
nucleo-l496zg-tflite-sine-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e27c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c60  0800e430  0800e430  0001e430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012090  08012090  00030e4c  2**0
                  CONTENTS
  4 .ARM          00000008  08012090  08012090  00022090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012098  08012098  00030e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012098  08012098  00022098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801209c  0801209c  0002209c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e4c  20000000  080120a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bbc  20000e50  08012eec  00030e50  2**4
                  ALLOC
 10 ._user_heap_stack 00000604  20001a0c  08012eec  00031a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030e4c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030e7c  2**0
                  CONTENTS, READONLY
 13 .debug_info   001c14ea  00000000  00000000  00030ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000dbfe  00000000  00000000  001f23a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00006aa0  00000000  00000000  001fffa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000050b4  00000000  00000000  00206a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035657  00000000  00000000  0020bafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042be7  00000000  00000000  00241153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b2cac  00000000  00000000  00283d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0001fa84  00000000  00000000  004369e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0045646c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000e50 	.word	0x20000e50
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e414 	.word	0x0800e414

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000e54 	.word	0x20000e54
 80001ec:	0800e414 	.word	0x0800e414

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff2b 	bl	8000b1c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fca1 	bl	8000638 <__aeabi_dmul>
 8000cf6:	f000 f97b 	bl	8000ff0 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc22 	bl	8000544 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc98 	bl	8000638 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fada 	bl	80002c8 <__aeabi_dsub>
 8000d14:	f000 f96c 	bl	8000ff0 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__aeabi_d2uiz>:
 8000ff0:	004a      	lsls	r2, r1, #1
 8000ff2:	d211      	bcs.n	8001018 <__aeabi_d2uiz+0x28>
 8000ff4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ff8:	d211      	bcs.n	800101e <__aeabi_d2uiz+0x2e>
 8000ffa:	d50d      	bpl.n	8001018 <__aeabi_d2uiz+0x28>
 8000ffc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001000:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001004:	d40e      	bmi.n	8001024 <__aeabi_d2uiz+0x34>
 8001006:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800100a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800100e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001012:	fa23 f002 	lsr.w	r0, r3, r2
 8001016:	4770      	bx	lr
 8001018:	f04f 0000 	mov.w	r0, #0
 800101c:	4770      	bx	lr
 800101e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001022:	d102      	bne.n	800102a <__aeabi_d2uiz+0x3a>
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	080119e8 	.word	0x080119e8

08001050 <_ZN6tflite13ErrorReporterD0Ev>:
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ffe9 	bl	8001030 <_ZN6tflite13ErrorReporterD1Ev>
 800105e:	2104      	movs	r1, #4
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f00a fa13 	bl	800b48c <_ZdlPvj>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ffd5 	bl	8001030 <_ZN6tflite13ErrorReporterD1Ev>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	08011cb8 	.word	0x08011cb8

08001094 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ffe7 	bl	8001070 <_ZN6tflite18MicroErrorReporterD1Ev>
 80010a2:	2104      	movs	r1, #4
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f00a f9f1 	bl	800b48c <_ZdlPvj>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  int endiantest = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d005      	beq.n	80010d2 <_ZN11flatbuffers11EndianCheckEv+0x1e>
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <_ZN11flatbuffers11EndianCheckEv+0x28>)
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 80010ca:	2149      	movs	r1, #73	; 0x49
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 80010ce:	f00a fab9 	bl	800b644 <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	0800e430 	.word	0x0800e430
 80010e0:	0800e474 	.word	0x0800e474
 80010e4:	0800e494 	.word	0x0800e494

080010e8 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80010f0:	687c      	ldr	r4, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fb67 	bl	80017c8 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80010fa:	4603      	mov	r3, r0
 80010fc:	425b      	negs	r3, r3
 80010fe:	4423      	add	r3, r4
  }
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}

08001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffe7 	bl	80010e8 <_ZNK11flatbuffers5Table9GetVTableEv>
 800111a:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 fb37 	bl	8001790 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8001122:	4603      	mov	r3, r0
 8001124:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	897b      	ldrh	r3, [r7, #10]
 800112a:	429a      	cmp	r2, r3
 800112c:	d207      	bcs.n	800113e <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fb2b 	bl	8001790 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800113a:	4603      	mov	r3, r0
 800113c:	e000      	b.n	8001140 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 800113e:	2300      	movs	r3, #0
  }
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_ZNK6tflite5Model7versionEv>:
    VT_DESCRIPTION = 10,
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16
  };
  uint32_t version() const {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	2104      	movs	r1, #4
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fb44 	bl	80017e4 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800115c:	4603      	mov	r3, r0
  }
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fb56 	bl	8001820 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <_ZN6tflite10OpResolverD1Ev>:
  virtual const TfLiteRegistration* FindOp(tflite::BuiltinOperator op,
                                           int version) const = 0;
  /// Finds the op registration of a custom operator by op name.
  virtual const TfLiteRegistration* FindOp(const char* op,
                                           int version) const = 0;
  virtual ~OpResolver() {}
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <_ZN6tflite10OpResolverD1Ev+0x1c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	080119d0 	.word	0x080119d0

080011a0 <_ZN6tflite10OpResolverD0Ev>:
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ffe9 	bl	8001180 <_ZN6tflite10OpResolverD1Ev>
 80011ae:	2104      	movs	r1, #4
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f00a f96b 	bl	800b48c <_ZdlPvj>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	460b      	mov	r3, r1
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3310      	adds	r3, #16
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	7afa      	ldrb	r2, [r7, #11]
 80011d8:	4611      	mov	r1, r2
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	4798      	blx	r3
 80011de:	4603      	mov	r3, r0
  }
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3314      	adds	r3, #20
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	4798      	blx	r3
 8001202:	4603      	mov	r3, r0
  }
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffaf 	bl	8001180 <_ZN6tflite10OpResolverD1Ev>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	080119ac 	.word	0x080119ac

08001230 <_ZN6tflite15MicroOpResolverD0Ev>:
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffe7 	bl	800120c <_ZN6tflite15MicroOpResolverD1Ev>
 800123e:	2104      	movs	r1, #4
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f00a f923 	bl	800b48c <_ZdlPvj>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <__tcf_0>:
  /* USER CODE BEGIN 2 */
  // Start timer/counter
    HAL_TIM_Base_Start(&htim16);

    // Set up logging (modify tensorflow/lite/micro/debug_log.cc)
    static tflite::MicroErrorReporter micro_error_reporter;
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
 8001254:	4801      	ldr	r0, [pc, #4]	; (800125c <__tcf_0+0xc>)
 8001256:	f7ff ff0b 	bl	8001070 <_ZN6tflite18MicroErrorReporterD1Ev>
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000c50 	.word	0x20000c50

08001260 <__tcf_1>:
    }

    // Pull in only needed operations (should match NN layers). Template parameter
    // <n> is number of ops to be added. Available ops:
    // tensorflow/lite/micro/kernels/micro_ops.h
    static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
 8001264:	4801      	ldr	r0, [pc, #4]	; (800126c <__tcf_1+0xc>)
 8001266:	f000 fc0d 	bl	8001a84 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000176c 	.word	0x2000176c

08001270 <__tcf_2>:
      while(1);
    }

    // Build an interpreter to run the model with.
    static tflite::MicroInterpreter static_interpreter(
        model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
 8001274:	4801      	ldr	r0, [pc, #4]	; (800127c <__tcf_2+0xc>)
 8001276:	f007 fb7b 	bl	8008970 <_ZN6tflite16MicroInterpreterD1Ev>
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200017a8 	.word	0x200017a8

08001280 <main>:
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b096      	sub	sp, #88	; 0x58
 8001284:	af04      	add	r7, sp, #16
	  int buf_len = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	643b      	str	r3, [r7, #64]	; 0x40
  HAL_Init();
 800128a:	f000 fe42 	bl	8001f12 <HAL_Init>
  SystemClock_Config();
 800128e:	f000 f96b 	bl	8001568 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001292:	f000 fa29 	bl	80016e8 <_ZL12MX_GPIO_Initv>
  MX_TIM16_Init();
 8001296:	f000 f9fb 	bl	8001690 <_ZL13MX_TIM16_Initv>
  MX_LPUART1_UART_Init();
 800129a:	f000 f9c7 	bl	800162c <_ZL20MX_LPUART1_UART_Initv>
    HAL_TIM_Base_Start(&htim16);
 800129e:	4897      	ldr	r0, [pc, #604]	; (80014fc <main+0x27c>)
 80012a0:	f002 fd1c 	bl	8003cdc <HAL_TIM_Base_Start>
    static tflite::MicroErrorReporter micro_error_reporter;
 80012a4:	4b96      	ldr	r3, [pc, #600]	; (8001500 <main+0x280>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f3bf 8f5b 	dmb	ish
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d010      	beq.n	80012e0 <main+0x60>
 80012be:	4890      	ldr	r0, [pc, #576]	; (8001500 <main+0x280>)
 80012c0:	f00a f8e8 	bl	800b494 <__cxa_guard_acquire>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bf14      	ite	ne
 80012ca:	2301      	movne	r3, #1
 80012cc:	2300      	moveq	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <main+0x60>
 80012d4:	488b      	ldr	r0, [pc, #556]	; (8001504 <main+0x284>)
 80012d6:	f00a f9d3 	bl	800b680 <atexit>
 80012da:	4889      	ldr	r0, [pc, #548]	; (8001500 <main+0x280>)
 80012dc:	f00a f8e6 	bl	800b4ac <__cxa_guard_release>
    error_reporter = &micro_error_reporter;
 80012e0:	4b89      	ldr	r3, [pc, #548]	; (8001508 <main+0x288>)
 80012e2:	4a8a      	ldr	r2, [pc, #552]	; (800150c <main+0x28c>)
 80012e4:	601a      	str	r2, [r3, #0]
    error_reporter->Report("STM32 TensorFlow Lite test");
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <main+0x288>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4989      	ldr	r1, [pc, #548]	; (8001510 <main+0x290>)
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fc19 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    model = tflite::GetModel(sine_model);
 80012f2:	4888      	ldr	r0, [pc, #544]	; (8001514 <main+0x294>)
 80012f4:	f7ff ff37 	bl	8001166 <_ZN6tflite8GetModelEPKv>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a87      	ldr	r2, [pc, #540]	; (8001518 <main+0x298>)
 80012fc:	6013      	str	r3, [r2, #0]
    if (model->version() != TFLITE_SCHEMA_VERSION)
 80012fe:	4b86      	ldr	r3, [pc, #536]	; (8001518 <main+0x298>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff20 	bl	8001148 <_ZNK6tflite5Model7versionEv>
 8001308:	4603      	mov	r3, r0
 800130a:	2b03      	cmp	r3, #3
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <main+0xa6>
      error_reporter->Report("Model version does not match Schema");
 8001318:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <main+0x288>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	497f      	ldr	r1, [pc, #508]	; (800151c <main+0x29c>)
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fc00 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      while(1);
 8001324:	e7fe      	b.n	8001324 <main+0xa4>
    static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 8001326:	4b7e      	ldr	r3, [pc, #504]	; (8001520 <main+0x2a0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f3bf 8f5b 	dmb	ish
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d014      	beq.n	800136a <main+0xea>
 8001340:	4877      	ldr	r0, [pc, #476]	; (8001520 <main+0x2a0>)
 8001342:	f00a f8a7 	bl	800b494 <__cxa_guard_acquire>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf14      	ite	ne
 800134c:	2301      	movne	r3, #1
 800134e:	2300      	moveq	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <main+0xea>
 8001356:	2100      	movs	r1, #0
 8001358:	4872      	ldr	r0, [pc, #456]	; (8001524 <main+0x2a4>)
 800135a:	f000 fa8f 	bl	800187c <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>
 800135e:	4872      	ldr	r0, [pc, #456]	; (8001528 <main+0x2a8>)
 8001360:	f00a f98e 	bl	800b680 <atexit>
 8001364:	486e      	ldr	r0, [pc, #440]	; (8001520 <main+0x2a0>)
 8001366:	f00a f8a1 	bl	800b4ac <__cxa_guard_release>
    tflite_status = micro_op_resolver.AddFullyConnected();
 800136a:	486e      	ldr	r0, [pc, #440]	; (8001524 <main+0x2a4>)
 800136c:	f000 faa2 	bl	80018b4 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedEv>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (tflite_status != kTfLiteOk)
 8001376:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <main+0x10c>
      error_reporter->Report("Could not add FULLY CONNECTED op");
 800137e:	4b62      	ldr	r3, [pc, #392]	; (8001508 <main+0x288>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	496a      	ldr	r1, [pc, #424]	; (800152c <main+0x2ac>)
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fbcd 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      while(1);
 800138a:	e7fe      	b.n	800138a <main+0x10a>
        model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 800138c:	4b68      	ldr	r3, [pc, #416]	; (8001530 <main+0x2b0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f3bf 8f5b 	dmb	ish
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf0c      	ite	eq
 800139c:	2301      	moveq	r3, #1
 800139e:	2300      	movne	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d01f      	beq.n	80013e6 <main+0x166>
 80013a6:	4862      	ldr	r0, [pc, #392]	; (8001530 <main+0x2b0>)
 80013a8:	f00a f874 	bl	800b494 <__cxa_guard_acquire>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	bf14      	ite	ne
 80013b2:	2301      	movne	r3, #1
 80013b4:	2300      	moveq	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d014      	beq.n	80013e6 <main+0x166>
 80013bc:	4b56      	ldr	r3, [pc, #344]	; (8001518 <main+0x298>)
 80013be:	6819      	ldr	r1, [r3, #0]
 80013c0:	4b51      	ldr	r3, [pc, #324]	; (8001508 <main+0x288>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2200      	movs	r2, #0
 80013c6:	9202      	str	r2, [sp, #8]
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <main+0x2b4>)
 80013d2:	4a54      	ldr	r2, [pc, #336]	; (8001524 <main+0x2a4>)
 80013d4:	4858      	ldr	r0, [pc, #352]	; (8001538 <main+0x2b8>)
 80013d6:	f007 fa8e 	bl	80088f6 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
 80013da:	4858      	ldr	r0, [pc, #352]	; (800153c <main+0x2bc>)
 80013dc:	f00a f950 	bl	800b680 <atexit>
 80013e0:	4853      	ldr	r0, [pc, #332]	; (8001530 <main+0x2b0>)
 80013e2:	f00a f863 	bl	800b4ac <__cxa_guard_release>
    interpreter = &static_interpreter;
 80013e6:	4b56      	ldr	r3, [pc, #344]	; (8001540 <main+0x2c0>)
 80013e8:	4a53      	ldr	r2, [pc, #332]	; (8001538 <main+0x2b8>)
 80013ea:	601a      	str	r2, [r3, #0]

    // Allocate memory from the tensor_arena for the model's tensors.
    tflite_status = interpreter->AllocateTensors();
 80013ec:	4b54      	ldr	r3, [pc, #336]	; (8001540 <main+0x2c0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f007 fb47 	bl	8008a84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (tflite_status != kTfLiteOk)
 80013fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001400:	2b00      	cmp	r3, #0
 8001402:	d006      	beq.n	8001412 <main+0x192>
    {
      error_reporter->Report("AllocateTensors() failed");
 8001404:	4b40      	ldr	r3, [pc, #256]	; (8001508 <main+0x288>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	494e      	ldr	r1, [pc, #312]	; (8001544 <main+0x2c4>)
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fb8a 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      while(1);
 8001410:	e7fe      	b.n	8001410 <main+0x190>
    }

    // Assign model input and output buffers (tensors) to pointers
    model_input = interpreter->input(0);
 8001412:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <main+0x2c0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f007 fce7 	bl	8008dec <_ZN6tflite16MicroInterpreter5inputEj>
 800141e:	4603      	mov	r3, r0
 8001420:	4a49      	ldr	r2, [pc, #292]	; (8001548 <main+0x2c8>)
 8001422:	6013      	str	r3, [r2, #0]
    model_output = interpreter->output(0);
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <main+0x2c0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f007 fd08 	bl	8008e40 <_ZN6tflite16MicroInterpreter6outputEj>
 8001430:	4603      	mov	r3, r0
 8001432:	4a46      	ldr	r2, [pc, #280]	; (800154c <main+0x2cc>)
 8001434:	6013      	str	r3, [r2, #0]

    // Get number of elements in input tensor
    num_elements = model_input->bytes / sizeof(float);
 8001436:	4b44      	ldr	r3, [pc, #272]	; (8001548 <main+0x2c8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	63bb      	str	r3, [r7, #56]	; 0x38
    buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001444:	4942      	ldr	r1, [pc, #264]	; (8001550 <main+0x2d0>)
 8001446:	4618      	mov	r0, r3
 8001448:	f00a ff34 	bl	800c2b4 <siprintf>
 800144c:	6438      	str	r0, [r7, #64]	; 0x40
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buf, buf_len, 100);
 800144e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001450:	b29a      	uxth	r2, r3
 8001452:	1d39      	adds	r1, r7, #4
 8001454:	2364      	movs	r3, #100	; 0x64
 8001456:	483f      	ldr	r0, [pc, #252]	; (8001554 <main+0x2d4>)
 8001458:	f002 fd9c 	bl	8003f94 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Fill input buffer (use test value)
	      for (uint32_t i = 0; i < num_elements; i++)
 800145c:	2300      	movs	r3, #0
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
 8001460:	e00b      	b.n	800147a <main+0x1fa>
	      {
	        model_input->data.f[i] = 2.0f;
 8001462:	4b39      	ldr	r3, [pc, #228]	; (8001548 <main+0x2c8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001472:	601a      	str	r2, [r3, #0]
	      for (uint32_t i = 0; i < num_elements; i++)
 8001474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001476:	3301      	adds	r3, #1
 8001478:	647b      	str	r3, [r7, #68]	; 0x44
 800147a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800147c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800147e:	429a      	cmp	r2, r3
 8001480:	d3ef      	bcc.n	8001462 <main+0x1e2>
	      }

	      // Get current timestamp
	      timestamp = htim16.Instance->CNT;
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <main+0x27c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	4a33      	ldr	r2, [pc, #204]	; (8001558 <main+0x2d8>)
 800148a:	6013      	str	r3, [r2, #0]

	      // Run inference
	      tflite_status = interpreter->Invoke();
 800148c:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <main+0x2c0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f007 fc13 	bl	8008cbc <_ZN6tflite16MicroInterpreter6InvokeEv>
 8001496:	4603      	mov	r3, r0
 8001498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	      if (tflite_status != kTfLiteOk)
 800149c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <main+0x230>
	      {
	        error_reporter->Report("Invoke failed");
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <main+0x288>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	492c      	ldr	r1, [pc, #176]	; (800155c <main+0x2dc>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 fb3a 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	      }

	      // Read output (predicted y) of neural network
	      y_val = model_output->data.f[0];
 80014b0:	4b26      	ldr	r3, [pc, #152]	; (800154c <main+0x2cc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a29      	ldr	r2, [pc, #164]	; (8001560 <main+0x2e0>)
 80014ba:	6013      	str	r3, [r2, #0]

	      // Print output of neural network along with inference time (microseconds)
	      buf_len = sprintf(buf,
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <main+0x2e0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f861 	bl	8000588 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
	                        "Output: %f | Duration: %lu\r\n",
	                        y_val,
	                        htim16.Instance->CNT - timestamp);
 80014ca:	490c      	ldr	r1, [pc, #48]	; (80014fc <main+0x27c>)
 80014cc:	6809      	ldr	r1, [r1, #0]
 80014ce:	6a48      	ldr	r0, [r1, #36]	; 0x24
	      buf_len = sprintf(buf,
 80014d0:	4921      	ldr	r1, [pc, #132]	; (8001558 <main+0x2d8>)
 80014d2:	6809      	ldr	r1, [r1, #0]
 80014d4:	1a41      	subs	r1, r0, r1
 80014d6:	1d38      	adds	r0, r7, #4
 80014d8:	9100      	str	r1, [sp, #0]
 80014da:	4922      	ldr	r1, [pc, #136]	; (8001564 <main+0x2e4>)
 80014dc:	f00a feea 	bl	800c2b4 <siprintf>
 80014e0:	6438      	str	r0, [r7, #64]	; 0x40
	      HAL_UART_Transmit(&hlpuart1, (uint8_t *)buf, buf_len, 100);
 80014e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	1d39      	adds	r1, r7, #4
 80014e8:	2364      	movs	r3, #100	; 0x64
 80014ea:	481a      	ldr	r0, [pc, #104]	; (8001554 <main+0x2d4>)
 80014ec:	f002 fd52 	bl	8003f94 <HAL_UART_Transmit>

	      // Wait before doing it again
	      HAL_Delay(500);
 80014f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f4:	f000 fd82 	bl	8001ffc <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80014f8:	e7b0      	b.n	800145c <main+0x1dc>
 80014fa:	bf00      	nop
 80014fc:	20000ef4 	.word	0x20000ef4
 8001500:	20001768 	.word	0x20001768
 8001504:	08001251 	.word	0x08001251
 8001508:	20000f40 	.word	0x20000f40
 800150c:	20000c50 	.word	0x20000c50
 8001510:	0800e534 	.word	0x0800e534
 8001514:	20000000 	.word	0x20000000
 8001518:	20000f44 	.word	0x20000f44
 800151c:	0800e550 	.word	0x0800e550
 8001520:	200017a4 	.word	0x200017a4
 8001524:	2000176c 	.word	0x2000176c
 8001528:	08001261 	.word	0x08001261
 800152c:	0800e574 	.word	0x0800e574
 8001530:	20001820 	.word	0x20001820
 8001534:	20000f60 	.word	0x20000f60
 8001538:	200017a8 	.word	0x200017a8
 800153c:	08001271 	.word	0x08001271
 8001540:	20000f48 	.word	0x20000f48
 8001544:	0800e598 	.word	0x0800e598
 8001548:	20000f4c 	.word	0x20000f4c
 800154c:	20000f50 	.word	0x20000f50
 8001550:	0800e5b4 	.word	0x0800e5b4
 8001554:	20000e6c 	.word	0x20000e6c
 8001558:	20001764 	.word	0x20001764
 800155c:	0800e5d4 	.word	0x0800e5d4
 8001560:	20001760 	.word	0x20001760
 8001564:	0800e5e4 	.word	0x0800e5e4

08001568 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b096      	sub	sp, #88	; 0x58
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	2244      	movs	r2, #68	; 0x44
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f00a ffae 	bl	800c4d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800158a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800158e:	f000 ffdf 	bl	8002550 <HAL_PWREx_ControlVoltageScaling>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf14      	ite	ne
 8001598:	2301      	movne	r3, #1
 800159a:	2300      	moveq	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80015a2:	f000 f8e5 	bl	8001770 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015a6:	2310      	movs	r3, #16
 80015a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015aa:	2301      	movs	r3, #1
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015b2:	2360      	movs	r3, #96	; 0x60
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b6:	2302      	movs	r3, #2
 80015b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015ba:	2301      	movs	r3, #1
 80015bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015be:	2301      	movs	r3, #1
 80015c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015c2:	2328      	movs	r3, #40	; 0x28
 80015c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 f820 	bl	800261c <HAL_RCC_OscConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2301      	movne	r3, #1
 80015e4:	2300      	moveq	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80015ec:	f000 f8c0 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f0:	230f      	movs	r3, #15
 80015f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f4:	2303      	movs	r3, #3
 80015f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001606:	463b      	mov	r3, r7
 8001608:	2104      	movs	r1, #4
 800160a:	4618      	mov	r0, r3
 800160c:	f001 fc20 	bl	8002e50 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	bf14      	ite	ne
 8001616:	2301      	movne	r3, #1
 8001618:	2300      	moveq	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001620:	f000 f8a6 	bl	8001770 <Error_Handler>
  }
}
 8001624:	bf00      	nop
 8001626:	3758      	adds	r7, #88	; 0x58
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001632:	4a16      	ldr	r2, [pc, #88]	; (800168c <_ZL20MX_LPUART1_UART_Initv+0x60>)
 8001634:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001644:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001654:	220c      	movs	r2, #12
 8001656:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <_ZL20MX_LPUART1_UART_Initv+0x5c>)
 800166c:	f002 fc44 	bl	8003ef8 <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <_ZL20MX_LPUART1_UART_Initv+0x58>
  {
    Error_Handler();
 8001680:	f000 f876 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000e6c 	.word	0x20000e6c
 800168c:	40008000 	.word	0x40008000

08001690 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <_ZL13MX_TIM16_Initv+0x50>)
 8001696:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <_ZL13MX_TIM16_Initv+0x54>)
 8001698:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <_ZL13MX_TIM16_Initv+0x50>)
 800169c:	224f      	movs	r2, #79	; 0x4f
 800169e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <_ZL13MX_TIM16_Initv+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <_ZL13MX_TIM16_Initv+0x50>)
 80016a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ac:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <_ZL13MX_TIM16_Initv+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <_ZL13MX_TIM16_Initv+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <_ZL13MX_TIM16_Initv+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <_ZL13MX_TIM16_Initv+0x50>)
 80016c2:	f002 fab3 	bl	8003c2c <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf14      	ite	ne
 80016cc:	2301      	movne	r3, #1
 80016ce:	2300      	moveq	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 80016d6:	f000 f84b 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000ef4 	.word	0x20000ef4
 80016e4:	40014400 	.word	0x40014400

080016e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_ZL12MX_GPIO_Initv+0x5c>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_ZL12MX_GPIO_Initv+0x5c>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <_ZL12MX_GPIO_Initv+0x5c>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <_ZL12MX_GPIO_Initv+0x5c>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <_ZL12MX_GPIO_Initv+0x5c>)
 800170c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <_ZL12MX_GPIO_Initv+0x5c>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800171e:	f000 ff6d 	bl	80025fc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_ZL12MX_GPIO_Initv+0x5c>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <_ZL12MX_GPIO_Initv+0x5c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <_ZL12MX_GPIO_Initv+0x5c>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000

08001748 <DebugLog>:

/* USER CODE BEGIN 4 */
// Custom implementation of DebugLog from TensorFlow
extern "C" void DebugLog(const char* s)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)s, strlen(s), 100);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7fe fdad 	bl	80002b0 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	2364      	movs	r3, #100	; 0x64
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4803      	ldr	r0, [pc, #12]	; (800176c <DebugLog+0x24>)
 8001760:	f002 fc18 	bl	8003f94 <HAL_UART_Transmit>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000e6c 	.word	0x20000e6c

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>

0800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8001782:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f8a8 	bl	80018f2 <_ZN11flatbuffers12EndianScalarItEET_S1_>
 80017a2:	4603      	mov	r3, r0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ffde 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80017be:	4603      	mov	r3, r0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 f881 	bl	80018dc <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 80017da:	4603      	mov	r3, r0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	460b      	mov	r3, r1
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	4619      	mov	r1, r3
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff fc86 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80017fc:	4603      	mov	r3, r0
 80017fe:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001800:	8afb      	ldrh	r3, [r7, #22]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	8afb      	ldrh	r3, [r7, #22]
 800180a:	4413      	add	r3, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ffcd 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001812:	4603      	mov	r3, r0
 8001814:	e000      	b.n	8001818 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8001816:	687b      	ldr	r3, [r7, #4]
  }
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f86e 	bl	800190a <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 800182e:	4603      	mov	r3, r0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	080119d0 	.word	0x080119d0

08001858 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ffe8 	bl	8001838 <_ZN6tflite10OpResolverC1Ev>
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	080119ac 	.word	0x080119ac

0800187c <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>:
namespace tflite {

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ffe5 	bl	8001858 <_ZN6tflite15MicroOpResolverC1Ev>
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE+0x34>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	635a      	str	r2, [r3, #52]	; 0x34
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	08011988 	.word	0x08011988

080018b4 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedEv>:
    // function.
    return AddBuiltin(BuiltinOperator_FLOOR,
                      *tflite::ops::micro::Register_FLOOR(), ParseOpData);
  }

  TfLiteStatus AddFullyConnected() {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED,
                      *tflite::ops::micro::Register_FULLY_CONNECTED(),
 80018bc:	f009 f9f0 	bl	800aca0 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
 80018c0:	4602      	mov	r2, r0
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED,
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedEv+0x24>)
 80018c4:	2109      	movs	r1, #9
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f832 	bl	8001930 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80018cc:	4603      	mov	r3, r0
                      ParseFullyConnected);
  }
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	08004e65 	.word	0x08004e65

080018dc <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
    return t;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	80fb      	strh	r3, [r7, #6]
    return t;
 80018fc:	88fb      	ldrh	r3, [r7, #6]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8001912:	f7ff fbcf 	bl	80010b4 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff2d 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001920:	4602      	mov	r2, r0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	460b      	mov	r3, r1
 800193e:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	2b20      	cmp	r3, #32
 8001944:	d10b      	bne.n	800195e <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
      if (error_reporter_ != nullptr) {
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001952:	4934      	ldr	r1, [pc, #208]	; (8001a24 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 8001954:	4618      	mov	r0, r3
 8001956:	f003 f8e5 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 800195a:	2301      	movs	r3, #1
 800195c:	e05d      	b.n	8001a1a <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (FindOp(op) != nullptr) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3310      	adds	r3, #16
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	7afa      	ldrb	r2, [r7, #11]
 8001968:	4611      	mov	r1, r2
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	4798      	blx	r3
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf14      	ite	ne
 8001974:	2301      	movne	r3, #1
 8001976:	2300      	moveq	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00c      	beq.n	8001998 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_ != nullptr) {
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x64>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198a:	7afa      	ldrb	r2, [r7, #11]
 800198c:	4926      	ldr	r1, [pc, #152]	; (8001a28 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 800198e:	4618      	mov	r0, r3
 8001990:	f003 f8c8 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8001994:	2301      	movs	r3, #1
 8001996:	e040      	b.n	8001a1a <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (registrations_len_ >= tOpCount) {
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00c      	beq.n	80019ba <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x8a>
      if (error_reporter_) {
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x86>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80019ac:	7afa      	ldrb	r2, [r7, #11]
 80019ae:	2301      	movs	r3, #1
 80019b0:	491e      	ldr	r1, [pc, #120]	; (8001a2c <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xfc>)
 80019b2:	f003 f8b7 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e02f      	b.n	8001a1a <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    registrations_[registrations_len_] = registration;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	015b      	lsls	r3, r3, #5
 80019c2:	4413      	add	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	1d1c      	adds	r4, r3, #4
 80019c8:	4615      	mov	r5, r2
 80019ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	7afa      	ldrb	r2, [r7, #11]
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	015b      	lsls	r3, r3, #5
 80019e0:	440b      	add	r3, r1
 80019e2:	3318      	adds	r3, #24
 80019e4:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24

    builtin_codes_[num_buitin_ops_] = op;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	7afa      	ldrb	r2, [r7, #11]
 80019fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    builtin_parsers_[num_buitin_ops_] = parser;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	330a      	adds	r3, #10
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	631a      	str	r2, [r3, #48]	; 0x30

    return kTfLiteOk;
 8001a18:	2300      	movs	r3, #0
  }
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bdb0      	pop	{r4, r5, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	0800e604 	.word	0x0800e604
 8001a28:	0800e64c 	.word	0x0800e64c
 8001a2c:	0800e69c 	.word	0x0800e69c

08001a30 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d101      	bne.n	8001a46 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x16>
 8001a42:	2300      	movs	r3, #0
 8001a44:	e018      	b.n	8001a78 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	e00f      	b.n	8001a6c <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x3c>
      const TfLiteRegistration& registration = registrations_[i];
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	015b      	lsls	r3, r3, #5
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	3304      	adds	r3, #4
 8001a56:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d101      	bne.n	8001a66 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x36>
        return &registration;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	e008      	b.n	8001a78 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d3ea      	bcc.n	8001a4c <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8001a76:	2300      	movs	r3, #0
  }
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev+0x20>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fbb9 	bl	800120c <_ZN6tflite15MicroOpResolverD1Ev>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	08011988 	.word	0x08011988

08001aa8 <_ZN6tflite22MicroMutableOpResolverILj1EED0Ev>:
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ffe7 	bl	8001a84 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 8001ab6:	2138      	movs	r1, #56	; 0x38
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f009 fce7 	bl	800b48c <_ZdlPvj>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e017      	b.n	8001b08 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x40>
      const TfLiteRegistration& registration = registrations_[i];
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	015b      	lsls	r3, r3, #5
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	d10a      	bne.n	8001b02 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x3a>
          (strcmp(registration.custom_name, op) == 0)) {
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	6839      	ldr	r1, [r7, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fb7c 	bl	80001f0 <strcmp>
 8001af8:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x3a>
        return &registration;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	e008      	b.n	8001b14 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3301      	adds	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d3e2      	bcc.n	8001ad8 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x10>
    return nullptr;
 8001b12:	2300      	movs	r3, #0
  }
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d901      	bls.n	8001b34 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x18>
 8001b30:	f009 fd80 	bl	800b634 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e011      	b.n	8001b5e <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x42>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	3328      	adds	r3, #40	; 0x28
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d106      	bne.n	8001b58 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x3c>
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	330a      	adds	r3, #10
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	e008      	b.n	8001b6a <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d3e8      	bcc.n	8001b3a <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 8001b68:	2300      	movs	r3, #0
  }
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6613      	str	r3, [r2, #96]	; 0x60
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_MspInit+0x44>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_MspInit+0x44>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0ac      	sub	sp, #176	; 0xb0
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	228c      	movs	r2, #140	; 0x8c
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f00a fc7b 	bl	800c4d8 <memset>
  if(huart->Instance==LPUART1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <HAL_UART_MspInit+0xb4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d13d      	bne.n	8001c68 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001bec:	2320      	movs	r3, #32
 8001bee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 fb4d 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c04:	f7ff fdb4 	bl	8001770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_UART_MspInit+0xb8>)
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_UART_MspInit+0xb8>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_UART_MspInit+0xb8>)
 8001c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_UART_MspInit+0xb8>)
 8001c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c24:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <HAL_UART_MspInit+0xb8>)
 8001c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_UART_MspInit+0xb8>)
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001c38:	f000 fce0 	bl	80025fc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c3c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001c56:	2308      	movs	r3, #8
 8001c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c60:	4619      	mov	r1, r3
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <HAL_UART_MspInit+0xbc>)
 8001c64:	f000 fad4 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	37b0      	adds	r7, #176	; 0xb0
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40008000 	.word	0x40008000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	48001800 	.word	0x48001800

08001c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_TIM_Base_MspInit+0x38>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	6613      	str	r3, [r2, #96]	; 0x60
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40014400 	.word	0x40014400
 8001cb8:	40021000 	.word	0x40021000

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler+0x4>

08001cce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f000 f958 	bl	8001fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_kill>:

int _kill(int pid, int sig)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d2a:	f00a fc8d 	bl	800c648 <__errno>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2216      	movs	r2, #22
 8001d32:	601a      	str	r2, [r3, #0]
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_exit>:

void _exit (int status)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffe7 	bl	8001d20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d52:	e7fe      	b.n	8001d52 <_exit+0x12>

08001d54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e00a      	b.n	8001d7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d66:	f3af 8000 	nop.w
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	60ba      	str	r2, [r7, #8]
 8001d72:	b2ca      	uxtb	r2, r1
 8001d74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbf0      	blt.n	8001d66 <_read+0x12>
  }

  return len;
 8001d84:	687b      	ldr	r3, [r7, #4]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e009      	b.n	8001db4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf1      	blt.n	8001da0 <_write+0x12>
  }
  return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_close>:

int _close(int file)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dee:	605a      	str	r2, [r3, #4]
  return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_isatty>:

int _isatty(int file)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f00a fbf2 	bl	800c648 <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20050000 	.word	0x20050000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	20001824 	.word	0x20001824
 8001e98:	20001a10 	.word	0x20001a10

08001e9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <SystemInit+0x20>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <SystemInit+0x20>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec4:	f7ff ffea 	bl	8001e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <LoopForever+0x6>)
  ldr r1, =_edata
 8001eca:	490d      	ldr	r1, [pc, #52]	; (8001f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <LoopForever+0xe>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee0:	4c0a      	ldr	r4, [pc, #40]	; (8001f0c <LoopForever+0x16>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eee:	f00a fbb1 	bl	800c654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ef2:	f7ff f9c5 	bl	8001280 <main>

08001ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ef6:	e7fe      	b.n	8001ef6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	20000e4c 	.word	0x20000e4c
  ldr r2, =_sidata
 8001f04:	080120a0 	.word	0x080120a0
  ldr r2, =_sbss
 8001f08:	20000e50 	.word	0x20000e50
  ldr r4, =_ebss
 8001f0c:	20001a0c 	.word	0x20001a0c

08001f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC1_2_IRQHandler>

08001f12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f000 f943 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 f80e 	bl	8001f44 <HAL_InitTick>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	71fb      	strb	r3, [r7, #7]
 8001f32:	e001      	b.n	8001f38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f34:	f7ff fe1e 	bl	8001b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f38:	79fb      	ldrb	r3, [r7, #7]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f50:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <HAL_InitTick+0x6c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d023      	beq.n	8001fa0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_InitTick+0x70>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_InitTick+0x6c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f941 	bl	80021f6 <HAL_SYSTICK_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b0f      	cmp	r3, #15
 8001f7e:	d809      	bhi.n	8001f94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f80:	2200      	movs	r2, #0
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f000 f919 	bl	80021be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_InitTick+0x74>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e007      	b.n	8001fa4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e004      	b.n	8001fa4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	e001      	b.n	8001fa4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000c5c 	.word	0x20000c5c
 8001fb4:	20000c54 	.word	0x20000c54
 8001fb8:	20000c58 	.word	0x20000c58

08001fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x20>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x24>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_IncTick+0x24>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000c5c 	.word	0x20000c5c
 8001fe0:	20001828 	.word	0x20001828

08001fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_GetTick+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20001828 	.word	0x20001828

08001ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff ffee 	bl	8001fe4 <HAL_GetTick>
 8002008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d005      	beq.n	8002022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_Delay+0x44>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002022:	bf00      	nop
 8002024:	f7ff ffde 	bl	8001fe4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	429a      	cmp	r2, r3
 8002032:	d8f7      	bhi.n	8002024 <HAL_Delay+0x28>
  {
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000c5c 	.word	0x20000c5c

08002044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800206c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002076:	4a04      	ldr	r2, [pc, #16]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	60d3      	str	r3, [r2, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0307 	and.w	r3, r3, #7
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff47 	bl	8002044 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff5c 	bl	800208c <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff8e 	bl	80020fc <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5d 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffb0 	bl	8002164 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221e:	e166      	b.n	80024ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8158 	beq.w	80024e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d005      	beq.n	8002250 <HAL_GPIO_Init+0x40>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d130      	bne.n	80022b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002286:	2201      	movs	r2, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0201 	and.w	r2, r3, #1
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	6939      	ldr	r1, [r7, #16]
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80b2 	beq.w	80024e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	4b61      	ldr	r3, [pc, #388]	; (800250c <HAL_GPIO_Init+0x2fc>)
 8002386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002388:	4a60      	ldr	r2, [pc, #384]	; (800250c <HAL_GPIO_Init+0x2fc>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6613      	str	r3, [r2, #96]	; 0x60
 8002390:	4b5e      	ldr	r3, [pc, #376]	; (800250c <HAL_GPIO_Init+0x2fc>)
 8002392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800239c:	4a5c      	ldr	r2, [pc, #368]	; (8002510 <HAL_GPIO_Init+0x300>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023c6:	d02b      	beq.n	8002420 <HAL_GPIO_Init+0x210>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_GPIO_Init+0x304>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d025      	beq.n	800241c <HAL_GPIO_Init+0x20c>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a51      	ldr	r2, [pc, #324]	; (8002518 <HAL_GPIO_Init+0x308>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d01f      	beq.n	8002418 <HAL_GPIO_Init+0x208>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a50      	ldr	r2, [pc, #320]	; (800251c <HAL_GPIO_Init+0x30c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d019      	beq.n	8002414 <HAL_GPIO_Init+0x204>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4f      	ldr	r2, [pc, #316]	; (8002520 <HAL_GPIO_Init+0x310>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_GPIO_Init+0x200>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a4e      	ldr	r2, [pc, #312]	; (8002524 <HAL_GPIO_Init+0x314>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00d      	beq.n	800240c <HAL_GPIO_Init+0x1fc>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_GPIO_Init+0x318>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <HAL_GPIO_Init+0x1f8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a4c      	ldr	r2, [pc, #304]	; (800252c <HAL_GPIO_Init+0x31c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_GPIO_Init+0x1f4>
 8002400:	2307      	movs	r3, #7
 8002402:	e00e      	b.n	8002422 <HAL_GPIO_Init+0x212>
 8002404:	2308      	movs	r3, #8
 8002406:	e00c      	b.n	8002422 <HAL_GPIO_Init+0x212>
 8002408:	2306      	movs	r3, #6
 800240a:	e00a      	b.n	8002422 <HAL_GPIO_Init+0x212>
 800240c:	2305      	movs	r3, #5
 800240e:	e008      	b.n	8002422 <HAL_GPIO_Init+0x212>
 8002410:	2304      	movs	r3, #4
 8002412:	e006      	b.n	8002422 <HAL_GPIO_Init+0x212>
 8002414:	2303      	movs	r3, #3
 8002416:	e004      	b.n	8002422 <HAL_GPIO_Init+0x212>
 8002418:	2302      	movs	r3, #2
 800241a:	e002      	b.n	8002422 <HAL_GPIO_Init+0x212>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_GPIO_Init+0x212>
 8002420:	2300      	movs	r3, #0
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	f002 0203 	and.w	r2, r2, #3
 8002428:	0092      	lsls	r2, r2, #2
 800242a:	4093      	lsls	r3, r2
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002432:	4937      	ldr	r1, [pc, #220]	; (8002510 <HAL_GPIO_Init+0x300>)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002440:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_GPIO_Init+0x320>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002464:	4a32      	ldr	r2, [pc, #200]	; (8002530 <HAL_GPIO_Init+0x320>)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_GPIO_Init+0x320>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800248e:	4a28      	ldr	r2, [pc, #160]	; (8002530 <HAL_GPIO_Init+0x320>)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002494:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_GPIO_Init+0x320>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024b8:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <HAL_GPIO_Init+0x320>)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_GPIO_Init+0x320>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024e2:	4a13      	ldr	r2, [pc, #76]	; (8002530 <HAL_GPIO_Init+0x320>)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3301      	adds	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f47f ae91 	bne.w	8002220 <HAL_GPIO_Init+0x10>
  }
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40021000 	.word	0x40021000
 8002510:	40010000 	.word	0x40010000
 8002514:	48000400 	.word	0x48000400
 8002518:	48000800 	.word	0x48000800
 800251c:	48000c00 	.word	0x48000c00
 8002520:	48001000 	.word	0x48001000
 8002524:	48001400 	.word	0x48001400
 8002528:	48001800 	.word	0x48001800
 800252c:	48001c00 	.word	0x48001c00
 8002530:	40010400 	.word	0x40010400

08002534 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_PWREx_GetVoltageRange+0x18>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40007000 	.word	0x40007000

08002550 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255e:	d130      	bne.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256c:	d038      	beq.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2232      	movs	r2, #50	; 0x32
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	0c9b      	lsrs	r3, r3, #18
 8002590:	3301      	adds	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002594:	e002      	b.n	800259c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3b01      	subs	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a8:	d102      	bne.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f2      	bne.n	8002596 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025bc:	d110      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e00f      	b.n	80025e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ce:	d007      	beq.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025d8:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40007000 	.word	0x40007000
 80025f4:	20000c54 	.word	0x20000c54
 80025f8:	431bde83 	.word	0x431bde83

080025fc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260a:	6053      	str	r3, [r2, #4]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40007000 	.word	0x40007000

0800261c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	f000 bc08 	b.w	8002e40 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002630:	4b96      	ldr	r3, [pc, #600]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800263a:	4b94      	ldr	r3, [pc, #592]	; (800288c <HAL_RCC_OscConfig+0x270>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80e4 	beq.w	800281a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_RCC_OscConfig+0x4c>
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	f040 808b 	bne.w	8002776 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2b01      	cmp	r3, #1
 8002664:	f040 8087 	bne.w	8002776 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002668:	4b88      	ldr	r3, [pc, #544]	; (800288c <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x64>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e3df      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1a      	ldr	r2, [r3, #32]
 8002684:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_RCC_OscConfig+0x7e>
 8002690:	4b7e      	ldr	r3, [pc, #504]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002698:	e005      	b.n	80026a6 <HAL_RCC_OscConfig+0x8a>
 800269a:	4b7c      	ldr	r3, [pc, #496]	; (800288c <HAL_RCC_OscConfig+0x270>)
 800269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d223      	bcs.n	80026f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fd92 	bl	80031d8 <RCC_SetFlashLatencyFromMSIRange>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e3c0      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026be:	4b73      	ldr	r3, [pc, #460]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a72      	ldr	r2, [pc, #456]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b70      	ldr	r3, [pc, #448]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	496d      	ldr	r1, [pc, #436]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026dc:	4b6b      	ldr	r3, [pc, #428]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	4968      	ldr	r1, [pc, #416]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
 80026f0:	e025      	b.n	800273e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f2:	4b66      	ldr	r3, [pc, #408]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a65      	ldr	r2, [pc, #404]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80026f8:	f043 0308 	orr.w	r3, r3, #8
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b63      	ldr	r3, [pc, #396]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4960      	ldr	r1, [pc, #384]	; (800288c <HAL_RCC_OscConfig+0x270>)
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002710:	4b5e      	ldr	r3, [pc, #376]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	495b      	ldr	r1, [pc, #364]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fd52 	bl	80031d8 <RCC_SetFlashLatencyFromMSIRange>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e380      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800273e:	f000 fc87 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8002742:	4602      	mov	r2, r0
 8002744:	4b51      	ldr	r3, [pc, #324]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	4950      	ldr	r1, [pc, #320]	; (8002890 <HAL_RCC_OscConfig+0x274>)
 8002750:	5ccb      	ldrb	r3, [r1, r3]
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	4a4e      	ldr	r2, [pc, #312]	; (8002894 <HAL_RCC_OscConfig+0x278>)
 800275c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800275e:	4b4e      	ldr	r3, [pc, #312]	; (8002898 <HAL_RCC_OscConfig+0x27c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fbee 	bl	8001f44 <HAL_InitTick>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d052      	beq.n	8002818 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	e364      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d032      	beq.n	80027e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800277e:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a42      	ldr	r2, [pc, #264]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800278a:	f7ff fc2b 	bl	8001fe4 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002792:	f7ff fc27 	bl	8001fe4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e34d      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b0:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a35      	ldr	r2, [pc, #212]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027b6:	f043 0308 	orr.w	r3, r3, #8
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4930      	ldr	r1, [pc, #192]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ce:	4b2f      	ldr	r3, [pc, #188]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	492b      	ldr	r1, [pc, #172]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
 80027e2:	e01a      	b.n	800281a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a28      	ldr	r2, [pc, #160]	; (800288c <HAL_RCC_OscConfig+0x270>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027f0:	f7ff fbf8 	bl	8001fe4 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f8:	f7ff fbf4 	bl	8001fe4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e31a      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_RCC_OscConfig+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x1dc>
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002818:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d073      	beq.n	800290e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d005      	beq.n	8002838 <HAL_RCC_OscConfig+0x21c>
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d10e      	bne.n	8002850 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d10b      	bne.n	8002850 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_RCC_OscConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d063      	beq.n	800290c <HAL_RCC_OscConfig+0x2f0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d15f      	bne.n	800290c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e2f7      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x24c>
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HAL_RCC_OscConfig+0x270>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e025      	b.n	80028b4 <HAL_RCC_OscConfig+0x298>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002870:	d114      	bne.n	800289c <HAL_RCC_OscConfig+0x280>
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a05      	ldr	r2, [pc, #20]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a02      	ldr	r2, [pc, #8]	; (800288c <HAL_RCC_OscConfig+0x270>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e013      	b.n	80028b4 <HAL_RCC_OscConfig+0x298>
 800288c:	40021000 	.word	0x40021000
 8002890:	080119f4 	.word	0x080119f4
 8002894:	20000c54 	.word	0x20000c54
 8002898:	20000c58 	.word	0x20000c58
 800289c:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a9f      	ldr	r2, [pc, #636]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b9d      	ldr	r3, [pc, #628]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a9c      	ldr	r2, [pc, #624]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7ff fb92 	bl	8001fe4 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7ff fb8e 	bl	8001fe4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e2b4      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d6:	4b92      	ldr	r3, [pc, #584]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x2a8>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7ff fb7e 	bl	8001fe4 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7ff fb7a 	bl	8001fe4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e2a0      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fe:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x2d0>
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d060      	beq.n	80029dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x310>
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d119      	bne.n	800295a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d116      	bne.n	800295a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292c:	4b7c      	ldr	r3, [pc, #496]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_OscConfig+0x328>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e27d      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	4973      	ldr	r1, [pc, #460]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002958:	e040      	b.n	80029dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d023      	beq.n	80029aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002962:	4b6f      	ldr	r3, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6e      	ldr	r2, [pc, #440]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7ff fb39 	bl	8001fe4 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7ff fb35 	bl	8001fe4 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e25b      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002988:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b62      	ldr	r3, [pc, #392]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	495f      	ldr	r1, [pc, #380]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
 80029a8:	e018      	b.n	80029dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b5d      	ldr	r3, [pc, #372]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a5c      	ldr	r2, [pc, #368]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7ff fb15 	bl	8001fe4 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029be:	f7ff fb11 	bl	8001fe4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e237      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d03c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01c      	beq.n	8002a2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f6:	4a4a      	ldr	r2, [pc, #296]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff faf0 	bl	8001fe4 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7ff faec 	bl	8001fe4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e212      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ef      	beq.n	8002a08 <HAL_RCC_OscConfig+0x3ec>
 8002a28:	e01b      	b.n	8002a62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a30:	4a3b      	ldr	r2, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7ff fad3 	bl	8001fe4 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a42:	f7ff facf 	bl	8001fe4 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e1f5      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a54:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ef      	bne.n	8002a42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80a6 	beq.w	8002bbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a70:	2300      	movs	r3, #0
 8002a72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a74:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10d      	bne.n	8002a9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a8c:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9c:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d118      	bne.n	8002ada <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab4:	f7ff fa96 	bl	8001fe4 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abc:	f7ff fa92 	bl	8001fe4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1b8      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_RCC_OscConfig+0x508>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d108      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4d8>
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af2:	e029      	b.n	8002b48 <HAL_RCC_OscConfig+0x52c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d115      	bne.n	8002b28 <HAL_RCC_OscConfig+0x50c>
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_OscConfig+0x504>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1c:	e014      	b.n	8002b48 <HAL_RCC_OscConfig+0x52c>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
 8002b28:	4b9d      	ldr	r3, [pc, #628]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	4a9c      	ldr	r2, [pc, #624]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b38:	4b99      	ldr	r3, [pc, #612]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	4a98      	ldr	r2, [pc, #608]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d016      	beq.n	8002b7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7ff fa48 	bl	8001fe4 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7ff fa44 	bl	8001fe4 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e168      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6e:	4b8c      	ldr	r3, [pc, #560]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ed      	beq.n	8002b58 <HAL_RCC_OscConfig+0x53c>
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7ff fa31 	bl	8001fe4 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7ff fa2d 	bl	8001fe4 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e151      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b9c:	4b80      	ldr	r3, [pc, #512]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ed      	bne.n	8002b86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002baa:	7ffb      	ldrb	r3, [r7, #31]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b7b      	ldr	r3, [pc, #492]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	4a7a      	ldr	r2, [pc, #488]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d03c      	beq.n	8002c42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01c      	beq.n	8002c0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bd0:	4b73      	ldr	r3, [pc, #460]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bd6:	4a72      	ldr	r2, [pc, #456]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7ff fa00 	bl	8001fe4 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be8:	f7ff f9fc 	bl	8001fe4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e122      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bfa:	4b69      	ldr	r3, [pc, #420]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0ef      	beq.n	8002be8 <HAL_RCC_OscConfig+0x5cc>
 8002c08:	e01b      	b.n	8002c42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c0a:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c10:	4a63      	ldr	r2, [pc, #396]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7ff f9e3 	bl	8001fe4 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c22:	f7ff f9df 	bl	8001fe4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e105      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c34:	4b5a      	ldr	r3, [pc, #360]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1ef      	bne.n	8002c22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80f9 	beq.w	8002e3e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	f040 80cf 	bne.w	8002df4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c56:	4b52      	ldr	r3, [pc, #328]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0203 	and.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d12c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	3b01      	subs	r3, #1
 8002c76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d123      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d113      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d109      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d071      	beq.n	8002da8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d068      	beq.n	8002d9c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cca:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d105      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cd6:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0ac      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2d      	ldr	r2, [pc, #180]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002cec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cf2:	f7ff f977 	bl	8001fe4 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7ff f973 	bl	8001fe4 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e099      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0c:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d18:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <HAL_RCC_OscConfig+0x788>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d28:	3a01      	subs	r2, #1
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	4311      	orrs	r1, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d32:	0212      	lsls	r2, r2, #8
 8002d34:	4311      	orrs	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d3a:	0852      	lsrs	r2, r2, #1
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	0552      	lsls	r2, r2, #21
 8002d40:	4311      	orrs	r1, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d46:	0852      	lsrs	r2, r2, #1
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	0652      	lsls	r2, r2, #25
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d52:	06d2      	lsls	r2, r2, #27
 8002d54:	430a      	orrs	r2, r1
 8002d56:	4912      	ldr	r1, [pc, #72]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d68:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d74:	f7ff f936 	bl	8001fe4 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7ff f932 	bl	8001fe4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e058      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8e:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <HAL_RCC_OscConfig+0x784>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d9a:	e050      	b.n	8002e3e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e04f      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
 8002da0:	40021000 	.word	0x40021000
 8002da4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da8:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <HAL_RCC_OscConfig+0x82c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d144      	bne.n	8002e3e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_RCC_OscConfig+0x82c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <HAL_RCC_OscConfig+0x82c>)
 8002dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <HAL_RCC_OscConfig+0x82c>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <HAL_RCC_OscConfig+0x82c>)
 8002dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dcc:	f7ff f90a 	bl	8001fe4 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7ff f906 	bl	8001fe4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e02c      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de6:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <HAL_RCC_OscConfig+0x82c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x7b8>
 8002df2:	e024      	b.n	8002e3e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d01f      	beq.n	8002e3a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfa:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <HAL_RCC_OscConfig+0x82c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <HAL_RCC_OscConfig+0x82c>)
 8002e00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7ff f8ed 	bl	8001fe4 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7ff f8e9 	bl	8001fe4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e00f      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_RCC_OscConfig+0x82c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f0      	bne.n	8002e0e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_RCC_OscConfig+0x82c>)
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	4905      	ldr	r1, [pc, #20]	; (8002e48 <HAL_RCC_OscConfig+0x82c>)
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_OscConfig+0x830>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	60cb      	str	r3, [r1, #12]
 8002e38:	e001      	b.n	8002e3e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3720      	adds	r7, #32
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	feeefffc 	.word	0xfeeefffc

08002e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0e7      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b75      	ldr	r3, [pc, #468]	; (800303c <HAL_RCC_ClockConfig+0x1ec>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d910      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <HAL_RCC_ClockConfig+0x1ec>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 0207 	bic.w	r2, r3, #7
 8002e7a:	4970      	ldr	r1, [pc, #448]	; (800303c <HAL_RCC_ClockConfig+0x1ec>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b6e      	ldr	r3, [pc, #440]	; (800303c <HAL_RCC_ClockConfig+0x1ec>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0cf      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	4b66      	ldr	r3, [pc, #408]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d908      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b63      	ldr	r3, [pc, #396]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4960      	ldr	r1, [pc, #384]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d04c      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed6:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d121      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0a6      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eee:	4b54      	ldr	r3, [pc, #336]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d115      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e09a      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f06:	4b4e      	ldr	r3, [pc, #312]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e08e      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f16:	4b4a      	ldr	r3, [pc, #296]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e086      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b46      	ldr	r3, [pc, #280]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4943      	ldr	r1, [pc, #268]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f38:	f7ff f854 	bl	8001fe4 <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7ff f850 	bl	8001fe4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e06e      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b3a      	ldr	r3, [pc, #232]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d208      	bcs.n	8002f96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	492b      	ldr	r1, [pc, #172]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f96:	4b29      	ldr	r3, [pc, #164]	; (800303c <HAL_RCC_ClockConfig+0x1ec>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d210      	bcs.n	8002fc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_RCC_ClockConfig+0x1ec>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 0207 	bic.w	r2, r3, #7
 8002fac:	4923      	ldr	r1, [pc, #140]	; (800303c <HAL_RCC_ClockConfig+0x1ec>)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb4:	4b21      	ldr	r3, [pc, #132]	; (800303c <HAL_RCC_ClockConfig+0x1ec>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e036      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	4918      	ldr	r1, [pc, #96]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4910      	ldr	r1, [pc, #64]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 8003000:	4313      	orrs	r3, r2
 8003002:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003004:	f000 f824 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <HAL_RCC_ClockConfig+0x1f0>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	490b      	ldr	r1, [pc, #44]	; (8003044 <HAL_RCC_ClockConfig+0x1f4>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
 8003020:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1f8>)
 8003022:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1fc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe ff8b 	bl	8001f44 <HAL_InitTick>
 800302e:	4603      	mov	r3, r0
 8003030:	72fb      	strb	r3, [r7, #11]

  return status;
 8003032:	7afb      	ldrb	r3, [r7, #11]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40022000 	.word	0x40022000
 8003040:	40021000 	.word	0x40021000
 8003044:	080119f4 	.word	0x080119f4
 8003048:	20000c54 	.word	0x20000c54
 800304c:	20000c58 	.word	0x20000c58

08003050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	b089      	sub	sp, #36	; 0x24
 8003054:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305e:	4b3e      	ldr	r3, [pc, #248]	; (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003068:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x34>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b0c      	cmp	r3, #12
 800307c:	d121      	bne.n	80030c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d11e      	bne.n	80030c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003084:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003090:	4b31      	ldr	r3, [pc, #196]	; (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	e005      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030a0:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030ac:	4a2b      	ldr	r2, [pc, #172]	; (800315c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10d      	bne.n	80030d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d102      	bne.n	80030ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	e004      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030d4:	4b23      	ldr	r3, [pc, #140]	; (8003164 <HAL_RCC_GetSysClockFreq+0x114>)
 80030d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d134      	bne.n	8003148 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030de:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d003      	beq.n	80030f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d003      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0xac>
 80030f4:	e005      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030f6:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <HAL_RCC_GetSysClockFreq+0x110>)
 80030f8:	617b      	str	r3, [r7, #20]
      break;
 80030fa:	e005      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCC_GetSysClockFreq+0x114>)
 80030fe:	617b      	str	r3, [r7, #20]
      break;
 8003100:	e002      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	617b      	str	r3, [r7, #20]
      break;
 8003106:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	3301      	adds	r3, #1
 8003114:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	fb03 f202 	mul.w	r2, r3, r2
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_RCC_GetSysClockFreq+0x108>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	0e5b      	lsrs	r3, r3, #25
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	3301      	adds	r3, #1
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	fbb2 f3f3 	udiv	r3, r2, r3
 8003146:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003148:	69bb      	ldr	r3, [r7, #24]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	08011a0c 	.word	0x08011a0c
 8003160:	00f42400 	.word	0x00f42400
 8003164:	007a1200 	.word	0x007a1200

08003168 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_RCC_GetHCLKFreq+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000c54 	.word	0x20000c54

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003184:	f7ff fff0 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4904      	ldr	r1, [pc, #16]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	08011a04 	.word	0x08011a04

080031ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031b0:	f7ff ffda 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0adb      	lsrs	r3, r3, #11
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4904      	ldr	r1, [pc, #16]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	08011a04 	.word	0x08011a04

080031d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031e4:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031f0:	f7ff f9a0 	bl	8002534 <HAL_PWREx_GetVoltageRange>
 80031f4:	6178      	str	r0, [r7, #20]
 80031f6:	e014      	b.n	8003222 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031f8:	4b25      	ldr	r3, [pc, #148]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	4a24      	ldr	r2, [pc, #144]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003202:	6593      	str	r3, [r2, #88]	; 0x58
 8003204:	4b22      	ldr	r3, [pc, #136]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003210:	f7ff f990 	bl	8002534 <HAL_PWREx_GetVoltageRange>
 8003214:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003216:	4b1e      	ldr	r3, [pc, #120]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003220:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003228:	d10b      	bne.n	8003242 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b80      	cmp	r3, #128	; 0x80
 800322e:	d919      	bls.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2ba0      	cmp	r3, #160	; 0xa0
 8003234:	d902      	bls.n	800323c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003236:	2302      	movs	r3, #2
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	e013      	b.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800323c:	2301      	movs	r3, #1
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e010      	b.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	d902      	bls.n	800324e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003248:	2303      	movs	r3, #3
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	e00a      	b.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b80      	cmp	r3, #128	; 0x80
 8003252:	d102      	bne.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003254:	2302      	movs	r3, #2
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e004      	b.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b70      	cmp	r3, #112	; 0x70
 800325e:	d101      	bne.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003260:	2301      	movs	r3, #1
 8003262:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f023 0207 	bic.w	r2, r3, #7
 800326c:	4909      	ldr	r1, [pc, #36]	; (8003294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003274:	4b07      	ldr	r3, [pc, #28]	; (8003294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	429a      	cmp	r2, r3
 8003280:	d001      	beq.n	8003286 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	40022000 	.word	0x40022000

08003298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032a0:	2300      	movs	r3, #0
 80032a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032a4:	2300      	movs	r3, #0
 80032a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d041      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032bc:	d02a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032c2:	d824      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032c8:	d008      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ce:	d81e      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d8:	d010      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032da:	e018      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032dc:	4b86      	ldr	r3, [pc, #536]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4a85      	ldr	r2, [pc, #532]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032e8:	e015      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 facd 	bl	8003890 <RCCEx_PLLSAI1_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032fa:	e00c      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3320      	adds	r3, #32
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fbb6 	bl	8003a74 <RCCEx_PLLSAI2_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800330c:	e003      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	74fb      	strb	r3, [r7, #19]
      break;
 8003312:	e000      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10b      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800331c:	4b76      	ldr	r3, [pc, #472]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800332a:	4973      	ldr	r1, [pc, #460]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003332:	e001      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003334:	7cfb      	ldrb	r3, [r7, #19]
 8003336:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d041      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003348:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800334c:	d02a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800334e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003352:	d824      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003358:	d008      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800335a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800335e:	d81e      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003368:	d010      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800336a:	e018      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800336c:	4b62      	ldr	r3, [pc, #392]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a61      	ldr	r2, [pc, #388]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003376:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003378:	e015      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	2100      	movs	r1, #0
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fa85 	bl	8003890 <RCCEx_PLLSAI1_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800338a:	e00c      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3320      	adds	r3, #32
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fb6e 	bl	8003a74 <RCCEx_PLLSAI2_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	74fb      	strb	r3, [r7, #19]
      break;
 80033a2:	e000      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a6:	7cfb      	ldrb	r3, [r7, #19]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10b      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ac:	4b52      	ldr	r3, [pc, #328]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ba:	494f      	ldr	r1, [pc, #316]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033c2:	e001      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80a0 	beq.w	8003516 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d6:	2300      	movs	r3, #0
 80033d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033da:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f0:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	4a40      	ldr	r2, [pc, #256]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fa:	6593      	str	r3, [r2, #88]	; 0x58
 80033fc:	4b3e      	ldr	r3, [pc, #248]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003408:	2301      	movs	r3, #1
 800340a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800340c:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a3a      	ldr	r2, [pc, #232]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003416:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003418:	f7fe fde4 	bl	8001fe4 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800341e:	e009      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003420:	f7fe fde0 	bl	8001fe4 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d902      	bls.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	74fb      	strb	r3, [r7, #19]
        break;
 8003432:	e005      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003434:	4b31      	ldr	r3, [pc, #196]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0ef      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d15c      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003446:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003450:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01f      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	429a      	cmp	r2, r3
 8003462:	d019      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003480:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003490:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fe fd9f 	bl	8001fe4 <HAL_GetTick>
 80034a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a8:	e00b      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe fd9b 	bl	8001fe4 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d902      	bls.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	74fb      	strb	r3, [r7, #19]
            break;
 80034c0:	e006      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ec      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	4904      	ldr	r1, [pc, #16]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034ee:	e009      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	74bb      	strb	r3, [r7, #18]
 80034f4:	e006      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003504:	7c7b      	ldrb	r3, [r7, #17]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d105      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350a:	4ba6      	ldr	r3, [pc, #664]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	4aa5      	ldr	r2, [pc, #660]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003514:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003522:	4ba0      	ldr	r3, [pc, #640]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f023 0203 	bic.w	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	499c      	ldr	r1, [pc, #624]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003544:	4b97      	ldr	r3, [pc, #604]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f023 020c 	bic.w	r2, r3, #12
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	4994      	ldr	r1, [pc, #592]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003566:	4b8f      	ldr	r3, [pc, #572]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	498b      	ldr	r1, [pc, #556]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003588:	4b86      	ldr	r3, [pc, #536]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	4983      	ldr	r1, [pc, #524]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035aa:	4b7e      	ldr	r3, [pc, #504]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b8:	497a      	ldr	r1, [pc, #488]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035cc:	4b75      	ldr	r3, [pc, #468]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035da:	4972      	ldr	r1, [pc, #456]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ee:	4b6d      	ldr	r3, [pc, #436]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fc:	4969      	ldr	r1, [pc, #420]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003610:	4b64      	ldr	r3, [pc, #400]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800361e:	4961      	ldr	r1, [pc, #388]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003632:	4b5c      	ldr	r3, [pc, #368]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003640:	4958      	ldr	r1, [pc, #352]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003654:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	4950      	ldr	r1, [pc, #320]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003676:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	4947      	ldr	r1, [pc, #284]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003698:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800369a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	493f      	ldr	r1, [pc, #252]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d028      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036ba:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4936      	ldr	r1, [pc, #216]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d8:	d106      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036da:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4a31      	ldr	r2, [pc, #196]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e4:	60d3      	str	r3, [r2, #12]
 80036e6:	e011      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f0:	d10c      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2101      	movs	r1, #1
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f8c9 	bl	8003890 <RCCEx_PLLSAI1_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d028      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003718:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003726:	491f      	ldr	r1, [pc, #124]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003736:	d106      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003738:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800373e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003742:	60d3      	str	r3, [r2, #12]
 8003744:	e011      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374e:	d10c      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	2101      	movs	r1, #1
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f89a 	bl	8003890 <RCCEx_PLLSAI1_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003766:	7cfb      	ldrb	r3, [r7, #19]
 8003768:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d02a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003784:	4907      	ldr	r1, [pc, #28]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003794:	d108      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003796:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4a02      	ldr	r2, [pc, #8]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800379c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a0:	60d3      	str	r3, [r2, #12]
 80037a2:	e013      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x534>
 80037a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2101      	movs	r1, #1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 f869 	bl	8003890 <RCCEx_PLLSAI1_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d02f      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037d8:	4b2c      	ldr	r3, [pc, #176]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e6:	4929      	ldr	r1, [pc, #164]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f6:	d10d      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	2102      	movs	r1, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f846 	bl	8003890 <RCCEx_PLLSAI1_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d014      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800380e:	7cfb      	ldrb	r3, [r7, #19]
 8003810:	74bb      	strb	r3, [r7, #18]
 8003812:	e011      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800381c:	d10c      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3320      	adds	r3, #32
 8003822:	2102      	movs	r1, #2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 f925 	bl	8003a74 <RCCEx_PLLSAI2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00b      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003854:	490d      	ldr	r1, [pc, #52]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003878:	4904      	ldr	r1, [pc, #16]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003880:	7cbb      	ldrb	r3, [r7, #18]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000

08003890 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800389e:	4b74      	ldr	r3, [pc, #464]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d018      	beq.n	80038dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038aa:	4b71      	ldr	r3, [pc, #452]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0203 	and.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d10d      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
       ||
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038c2:	4b6b      	ldr	r3, [pc, #428]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
       ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d047      	beq.n	8003966 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	e044      	b.n	8003966 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d018      	beq.n	8003916 <RCCEx_PLLSAI1_Config+0x86>
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d825      	bhi.n	8003934 <RCCEx_PLLSAI1_Config+0xa4>
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d002      	beq.n	80038f2 <RCCEx_PLLSAI1_Config+0x62>
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d009      	beq.n	8003904 <RCCEx_PLLSAI1_Config+0x74>
 80038f0:	e020      	b.n	8003934 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038f2:	4b5f      	ldr	r3, [pc, #380]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11d      	bne.n	800393a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003902:	e01a      	b.n	800393a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003904:	4b5a      	ldr	r3, [pc, #360]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d116      	bne.n	800393e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003914:	e013      	b.n	800393e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003916:	4b56      	ldr	r3, [pc, #344]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10f      	bne.n	8003942 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003922:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003932:	e006      	b.n	8003942 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      break;
 8003938:	e004      	b.n	8003944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800393a:	bf00      	nop
 800393c:	e002      	b.n	8003944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800393e:	bf00      	nop
 8003940:	e000      	b.n	8003944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003942:	bf00      	nop
    }

    if(status == HAL_OK)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10d      	bne.n	8003966 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800394a:	4b49      	ldr	r3, [pc, #292]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	430b      	orrs	r3, r1
 8003960:	4943      	ldr	r1, [pc, #268]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003962:	4313      	orrs	r3, r2
 8003964:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d17c      	bne.n	8003a66 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800396c:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a3f      	ldr	r2, [pc, #252]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003972:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003978:	f7fe fb34 	bl	8001fe4 <HAL_GetTick>
 800397c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800397e:	e009      	b.n	8003994 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003980:	f7fe fb30 	bl	8001fe4 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d902      	bls.n	8003994 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	73fb      	strb	r3, [r7, #15]
        break;
 8003992:	e005      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003994:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ef      	bne.n	8003980 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d15f      	bne.n	8003a66 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d110      	bne.n	80039ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ac:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80039b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6892      	ldr	r2, [r2, #8]
 80039bc:	0211      	lsls	r1, r2, #8
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68d2      	ldr	r2, [r2, #12]
 80039c2:	06d2      	lsls	r2, r2, #27
 80039c4:	430a      	orrs	r2, r1
 80039c6:	492a      	ldr	r1, [pc, #168]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	610b      	str	r3, [r1, #16]
 80039cc:	e027      	b.n	8003a1e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d112      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039d4:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6892      	ldr	r2, [r2, #8]
 80039e4:	0211      	lsls	r1, r2, #8
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6912      	ldr	r2, [r2, #16]
 80039ea:	0852      	lsrs	r2, r2, #1
 80039ec:	3a01      	subs	r2, #1
 80039ee:	0552      	lsls	r2, r2, #21
 80039f0:	430a      	orrs	r2, r1
 80039f2:	491f      	ldr	r1, [pc, #124]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	610b      	str	r3, [r1, #16]
 80039f8:	e011      	b.n	8003a1e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039fa:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6892      	ldr	r2, [r2, #8]
 8003a0a:	0211      	lsls	r1, r2, #8
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6952      	ldr	r2, [r2, #20]
 8003a10:	0852      	lsrs	r2, r2, #1
 8003a12:	3a01      	subs	r2, #1
 8003a14:	0652      	lsls	r2, r2, #25
 8003a16:	430a      	orrs	r2, r1
 8003a18:	4915      	ldr	r1, [pc, #84]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a1e:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a13      	ldr	r2, [pc, #76]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fadb 	bl	8001fe4 <HAL_GetTick>
 8003a2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a30:	e009      	b.n	8003a46 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a32:	f7fe fad7 	bl	8001fe4 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d902      	bls.n	8003a46 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	73fb      	strb	r3, [r7, #15]
          break;
 8003a44:	e005      	b.n	8003a52 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ef      	beq.n	8003a32 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4903      	ldr	r1, [pc, #12]	; (8003a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000

08003a74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a82:	4b69      	ldr	r3, [pc, #420]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d018      	beq.n	8003ac0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a8e:	4b66      	ldr	r3, [pc, #408]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0203 	and.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d10d      	bne.n	8003aba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
       ||
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003aa6:	4b60      	ldr	r3, [pc, #384]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d047      	beq.n	8003b4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	e044      	b.n	8003b4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d018      	beq.n	8003afa <RCCEx_PLLSAI2_Config+0x86>
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d825      	bhi.n	8003b18 <RCCEx_PLLSAI2_Config+0xa4>
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d002      	beq.n	8003ad6 <RCCEx_PLLSAI2_Config+0x62>
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d009      	beq.n	8003ae8 <RCCEx_PLLSAI2_Config+0x74>
 8003ad4:	e020      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ad6:	4b54      	ldr	r3, [pc, #336]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d11d      	bne.n	8003b1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae6:	e01a      	b.n	8003b1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ae8:	4b4f      	ldr	r3, [pc, #316]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d116      	bne.n	8003b22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af8:	e013      	b.n	8003b22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003afa:	4b4b      	ldr	r3, [pc, #300]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10f      	bne.n	8003b26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b06:	4b48      	ldr	r3, [pc, #288]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b16:	e006      	b.n	8003b26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1c:	e004      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10d      	bne.n	8003b4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b2e:	4b3e      	ldr	r3, [pc, #248]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	430b      	orrs	r3, r1
 8003b44:	4938      	ldr	r1, [pc, #224]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d166      	bne.n	8003c1e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b50:	4b35      	ldr	r3, [pc, #212]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5c:	f7fe fa42 	bl	8001fe4 <HAL_GetTick>
 8003b60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b62:	e009      	b.n	8003b78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b64:	f7fe fa3e 	bl	8001fe4 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d902      	bls.n	8003b78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	73fb      	strb	r3, [r7, #15]
        break;
 8003b76:	e005      	b.n	8003b84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b78:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ef      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d149      	bne.n	8003c1e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d110      	bne.n	8003bb2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6892      	ldr	r2, [r2, #8]
 8003ba0:	0211      	lsls	r1, r2, #8
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68d2      	ldr	r2, [r2, #12]
 8003ba6:	06d2      	lsls	r2, r2, #27
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	491f      	ldr	r1, [pc, #124]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	614b      	str	r3, [r1, #20]
 8003bb0:	e011      	b.n	8003bd6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6892      	ldr	r2, [r2, #8]
 8003bc2:	0211      	lsls	r1, r2, #8
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6912      	ldr	r2, [r2, #16]
 8003bc8:	0852      	lsrs	r2, r2, #1
 8003bca:	3a01      	subs	r2, #1
 8003bcc:	0652      	lsls	r2, r2, #25
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	4915      	ldr	r1, [pc, #84]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bd6:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be2:	f7fe f9ff 	bl	8001fe4 <HAL_GetTick>
 8003be6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003be8:	e009      	b.n	8003bfe <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bea:	f7fe f9fb 	bl	8001fe4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d902      	bls.n	8003bfe <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	73fb      	strb	r3, [r7, #15]
          break;
 8003bfc:	e005      	b.n	8003c0a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ef      	beq.n	8003bea <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	4903      	ldr	r1, [pc, #12]	; (8003c28 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000

08003c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e049      	b.n	8003cd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fe f812 	bl	8001c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f000 f89e 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d001      	beq.n	8003cf4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e047      	b.n	8003d84 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a23      	ldr	r2, [pc, #140]	; (8003d90 <HAL_TIM_Base_Start+0xb4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01d      	beq.n	8003d42 <HAL_TIM_Base_Start+0x66>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d018      	beq.n	8003d42 <HAL_TIM_Base_Start+0x66>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <HAL_TIM_Base_Start+0xb8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_TIM_Base_Start+0x66>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <HAL_TIM_Base_Start+0xbc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_TIM_Base_Start+0x66>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <HAL_TIM_Base_Start+0xc0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_TIM_Base_Start+0x66>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <HAL_TIM_Base_Start+0xc4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_TIM_Base_Start+0x66>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <HAL_TIM_Base_Start+0xc8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d115      	bne.n	8003d6e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <HAL_TIM_Base_Start+0xcc>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b06      	cmp	r3, #6
 8003d52:	d015      	beq.n	8003d80 <HAL_TIM_Base_Start+0xa4>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5a:	d011      	beq.n	8003d80 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6c:	e008      	b.n	8003d80 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e000      	b.n	8003d82 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800
 8003d9c:	40000c00 	.word	0x40000c00
 8003da0:	40013400 	.word	0x40013400
 8003da4:	40014000 	.word	0x40014000
 8003da8:	00010007 	.word	0x00010007

08003dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a46      	ldr	r2, [pc, #280]	; (8003ed8 <TIM_Base_SetConfig+0x12c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d00f      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a43      	ldr	r2, [pc, #268]	; (8003edc <TIM_Base_SetConfig+0x130>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a42      	ldr	r2, [pc, #264]	; (8003ee0 <TIM_Base_SetConfig+0x134>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a41      	ldr	r2, [pc, #260]	; (8003ee4 <TIM_Base_SetConfig+0x138>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <TIM_Base_SetConfig+0x13c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d108      	bne.n	8003dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a35      	ldr	r2, [pc, #212]	; (8003ed8 <TIM_Base_SetConfig+0x12c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01f      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d01b      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a32      	ldr	r2, [pc, #200]	; (8003edc <TIM_Base_SetConfig+0x130>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d017      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a31      	ldr	r2, [pc, #196]	; (8003ee0 <TIM_Base_SetConfig+0x134>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a30      	ldr	r2, [pc, #192]	; (8003ee4 <TIM_Base_SetConfig+0x138>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00f      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a2f      	ldr	r2, [pc, #188]	; (8003ee8 <TIM_Base_SetConfig+0x13c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2e      	ldr	r2, [pc, #184]	; (8003eec <TIM_Base_SetConfig+0x140>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d007      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <TIM_Base_SetConfig+0x144>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2c      	ldr	r2, [pc, #176]	; (8003ef4 <TIM_Base_SetConfig+0x148>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d108      	bne.n	8003e58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a16      	ldr	r2, [pc, #88]	; (8003ed8 <TIM_Base_SetConfig+0x12c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00f      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <TIM_Base_SetConfig+0x13c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a17      	ldr	r2, [pc, #92]	; (8003eec <TIM_Base_SetConfig+0x140>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <TIM_Base_SetConfig+0x144>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a15      	ldr	r2, [pc, #84]	; (8003ef4 <TIM_Base_SetConfig+0x148>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d105      	bne.n	8003eca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f023 0201 	bic.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	611a      	str	r2, [r3, #16]
  }
}
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800
 8003ee4:	40000c00 	.word	0x40000c00
 8003ee8:	40013400 	.word	0x40013400
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	40014400 	.word	0x40014400
 8003ef4:	40014800 	.word	0x40014800

08003ef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e040      	b.n	8003f8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd fe4e 	bl	8001bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fb6a 	bl	8004618 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8af 	bl	80040a8 <UART_SetConfig>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e01b      	b.n	8003f8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fbe9 	bl	800475c <UART_CheckIdleState>
 8003f8a:	4603      	mov	r3, r0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d178      	bne.n	800409e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_UART_Transmit+0x24>
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e071      	b.n	80040a0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2221      	movs	r2, #33	; 0x21
 8003fc8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fca:	f7fe f80b 	bl	8001fe4 <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	88fa      	ldrh	r2, [r7, #6]
 8003fd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	88fa      	ldrh	r2, [r7, #6]
 8003fdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe8:	d108      	bne.n	8003ffc <HAL_UART_Transmit+0x68>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	e003      	b.n	8004004 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004000:	2300      	movs	r3, #0
 8004002:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004004:	e030      	b.n	8004068 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2200      	movs	r2, #0
 800400e:	2180      	movs	r1, #128	; 0x80
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fc4b 	bl	80048ac <UART_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d004      	beq.n	8004026 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e03c      	b.n	80040a0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004038:	b292      	uxth	r2, r2
 800403a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	3302      	adds	r3, #2
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e008      	b.n	8004056 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	781a      	ldrb	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	b292      	uxth	r2, r2
 800404e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	3301      	adds	r3, #1
 8004054:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1c8      	bne.n	8004006 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	2140      	movs	r1, #64	; 0x40
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fc14 	bl	80048ac <UART_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e005      	b.n	80040a0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e000      	b.n	80040a0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800409e:	2302      	movs	r3, #2
  }
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ac:	b08a      	sub	sp, #40	; 0x28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4ba4      	ldr	r3, [pc, #656]	; (8004368 <UART_SetConfig+0x2c0>)
 80040d8:	4013      	ands	r3, r2
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a99      	ldr	r2, [pc, #612]	; (800436c <UART_SetConfig+0x2c4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	4313      	orrs	r3, r2
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004124:	430a      	orrs	r2, r1
 8004126:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a90      	ldr	r2, [pc, #576]	; (8004370 <UART_SetConfig+0x2c8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d126      	bne.n	8004180 <UART_SetConfig+0xd8>
 8004132:	4b90      	ldr	r3, [pc, #576]	; (8004374 <UART_SetConfig+0x2cc>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	2b03      	cmp	r3, #3
 800413e:	d81b      	bhi.n	8004178 <UART_SetConfig+0xd0>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0xa0>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	08004159 	.word	0x08004159
 800414c:	08004169 	.word	0x08004169
 8004150:	08004161 	.word	0x08004161
 8004154:	08004171 	.word	0x08004171
 8004158:	2301      	movs	r3, #1
 800415a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415e:	e116      	b.n	800438e <UART_SetConfig+0x2e6>
 8004160:	2302      	movs	r3, #2
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004166:	e112      	b.n	800438e <UART_SetConfig+0x2e6>
 8004168:	2304      	movs	r3, #4
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416e:	e10e      	b.n	800438e <UART_SetConfig+0x2e6>
 8004170:	2308      	movs	r3, #8
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004176:	e10a      	b.n	800438e <UART_SetConfig+0x2e6>
 8004178:	2310      	movs	r3, #16
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417e:	e106      	b.n	800438e <UART_SetConfig+0x2e6>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a7c      	ldr	r2, [pc, #496]	; (8004378 <UART_SetConfig+0x2d0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d138      	bne.n	80041fc <UART_SetConfig+0x154>
 800418a:	4b7a      	ldr	r3, [pc, #488]	; (8004374 <UART_SetConfig+0x2cc>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b0c      	cmp	r3, #12
 8004196:	d82d      	bhi.n	80041f4 <UART_SetConfig+0x14c>
 8004198:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0xf8>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080041f5 	.word	0x080041f5
 80041a8:	080041f5 	.word	0x080041f5
 80041ac:	080041f5 	.word	0x080041f5
 80041b0:	080041e5 	.word	0x080041e5
 80041b4:	080041f5 	.word	0x080041f5
 80041b8:	080041f5 	.word	0x080041f5
 80041bc:	080041f5 	.word	0x080041f5
 80041c0:	080041dd 	.word	0x080041dd
 80041c4:	080041f5 	.word	0x080041f5
 80041c8:	080041f5 	.word	0x080041f5
 80041cc:	080041f5 	.word	0x080041f5
 80041d0:	080041ed 	.word	0x080041ed
 80041d4:	2300      	movs	r3, #0
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041da:	e0d8      	b.n	800438e <UART_SetConfig+0x2e6>
 80041dc:	2302      	movs	r3, #2
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e0d4      	b.n	800438e <UART_SetConfig+0x2e6>
 80041e4:	2304      	movs	r3, #4
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ea:	e0d0      	b.n	800438e <UART_SetConfig+0x2e6>
 80041ec:	2308      	movs	r3, #8
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f2:	e0cc      	b.n	800438e <UART_SetConfig+0x2e6>
 80041f4:	2310      	movs	r3, #16
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fa:	e0c8      	b.n	800438e <UART_SetConfig+0x2e6>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a5e      	ldr	r2, [pc, #376]	; (800437c <UART_SetConfig+0x2d4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d125      	bne.n	8004252 <UART_SetConfig+0x1aa>
 8004206:	4b5b      	ldr	r3, [pc, #364]	; (8004374 <UART_SetConfig+0x2cc>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004210:	2b30      	cmp	r3, #48	; 0x30
 8004212:	d016      	beq.n	8004242 <UART_SetConfig+0x19a>
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d818      	bhi.n	800424a <UART_SetConfig+0x1a2>
 8004218:	2b20      	cmp	r3, #32
 800421a:	d00a      	beq.n	8004232 <UART_SetConfig+0x18a>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d814      	bhi.n	800424a <UART_SetConfig+0x1a2>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <UART_SetConfig+0x182>
 8004224:	2b10      	cmp	r3, #16
 8004226:	d008      	beq.n	800423a <UART_SetConfig+0x192>
 8004228:	e00f      	b.n	800424a <UART_SetConfig+0x1a2>
 800422a:	2300      	movs	r3, #0
 800422c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004230:	e0ad      	b.n	800438e <UART_SetConfig+0x2e6>
 8004232:	2302      	movs	r3, #2
 8004234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004238:	e0a9      	b.n	800438e <UART_SetConfig+0x2e6>
 800423a:	2304      	movs	r3, #4
 800423c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004240:	e0a5      	b.n	800438e <UART_SetConfig+0x2e6>
 8004242:	2308      	movs	r3, #8
 8004244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004248:	e0a1      	b.n	800438e <UART_SetConfig+0x2e6>
 800424a:	2310      	movs	r3, #16
 800424c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004250:	e09d      	b.n	800438e <UART_SetConfig+0x2e6>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a4a      	ldr	r2, [pc, #296]	; (8004380 <UART_SetConfig+0x2d8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d125      	bne.n	80042a8 <UART_SetConfig+0x200>
 800425c:	4b45      	ldr	r3, [pc, #276]	; (8004374 <UART_SetConfig+0x2cc>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004266:	2bc0      	cmp	r3, #192	; 0xc0
 8004268:	d016      	beq.n	8004298 <UART_SetConfig+0x1f0>
 800426a:	2bc0      	cmp	r3, #192	; 0xc0
 800426c:	d818      	bhi.n	80042a0 <UART_SetConfig+0x1f8>
 800426e:	2b80      	cmp	r3, #128	; 0x80
 8004270:	d00a      	beq.n	8004288 <UART_SetConfig+0x1e0>
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d814      	bhi.n	80042a0 <UART_SetConfig+0x1f8>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <UART_SetConfig+0x1d8>
 800427a:	2b40      	cmp	r3, #64	; 0x40
 800427c:	d008      	beq.n	8004290 <UART_SetConfig+0x1e8>
 800427e:	e00f      	b.n	80042a0 <UART_SetConfig+0x1f8>
 8004280:	2300      	movs	r3, #0
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e082      	b.n	800438e <UART_SetConfig+0x2e6>
 8004288:	2302      	movs	r3, #2
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e07e      	b.n	800438e <UART_SetConfig+0x2e6>
 8004290:	2304      	movs	r3, #4
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e07a      	b.n	800438e <UART_SetConfig+0x2e6>
 8004298:	2308      	movs	r3, #8
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e076      	b.n	800438e <UART_SetConfig+0x2e6>
 80042a0:	2310      	movs	r3, #16
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e072      	b.n	800438e <UART_SetConfig+0x2e6>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a35      	ldr	r2, [pc, #212]	; (8004384 <UART_SetConfig+0x2dc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d12a      	bne.n	8004308 <UART_SetConfig+0x260>
 80042b2:	4b30      	ldr	r3, [pc, #192]	; (8004374 <UART_SetConfig+0x2cc>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c0:	d01a      	beq.n	80042f8 <UART_SetConfig+0x250>
 80042c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c6:	d81b      	bhi.n	8004300 <UART_SetConfig+0x258>
 80042c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042cc:	d00c      	beq.n	80042e8 <UART_SetConfig+0x240>
 80042ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d2:	d815      	bhi.n	8004300 <UART_SetConfig+0x258>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <UART_SetConfig+0x238>
 80042d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042dc:	d008      	beq.n	80042f0 <UART_SetConfig+0x248>
 80042de:	e00f      	b.n	8004300 <UART_SetConfig+0x258>
 80042e0:	2300      	movs	r3, #0
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e6:	e052      	b.n	800438e <UART_SetConfig+0x2e6>
 80042e8:	2302      	movs	r3, #2
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e04e      	b.n	800438e <UART_SetConfig+0x2e6>
 80042f0:	2304      	movs	r3, #4
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e04a      	b.n	800438e <UART_SetConfig+0x2e6>
 80042f8:	2308      	movs	r3, #8
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e046      	b.n	800438e <UART_SetConfig+0x2e6>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e042      	b.n	800438e <UART_SetConfig+0x2e6>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a17      	ldr	r2, [pc, #92]	; (800436c <UART_SetConfig+0x2c4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d13a      	bne.n	8004388 <UART_SetConfig+0x2e0>
 8004312:	4b18      	ldr	r3, [pc, #96]	; (8004374 <UART_SetConfig+0x2cc>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800431c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004320:	d01a      	beq.n	8004358 <UART_SetConfig+0x2b0>
 8004322:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004326:	d81b      	bhi.n	8004360 <UART_SetConfig+0x2b8>
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432c:	d00c      	beq.n	8004348 <UART_SetConfig+0x2a0>
 800432e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004332:	d815      	bhi.n	8004360 <UART_SetConfig+0x2b8>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <UART_SetConfig+0x298>
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	d008      	beq.n	8004350 <UART_SetConfig+0x2a8>
 800433e:	e00f      	b.n	8004360 <UART_SetConfig+0x2b8>
 8004340:	2300      	movs	r3, #0
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e022      	b.n	800438e <UART_SetConfig+0x2e6>
 8004348:	2302      	movs	r3, #2
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e01e      	b.n	800438e <UART_SetConfig+0x2e6>
 8004350:	2304      	movs	r3, #4
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e01a      	b.n	800438e <UART_SetConfig+0x2e6>
 8004358:	2308      	movs	r3, #8
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e016      	b.n	800438e <UART_SetConfig+0x2e6>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004366:	e012      	b.n	800438e <UART_SetConfig+0x2e6>
 8004368:	efff69f3 	.word	0xefff69f3
 800436c:	40008000 	.word	0x40008000
 8004370:	40013800 	.word	0x40013800
 8004374:	40021000 	.word	0x40021000
 8004378:	40004400 	.word	0x40004400
 800437c:	40004800 	.word	0x40004800
 8004380:	40004c00 	.word	0x40004c00
 8004384:	40005000 	.word	0x40005000
 8004388:	2310      	movs	r3, #16
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a9f      	ldr	r2, [pc, #636]	; (8004610 <UART_SetConfig+0x568>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d17a      	bne.n	800448e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004398:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800439c:	2b08      	cmp	r3, #8
 800439e:	d824      	bhi.n	80043ea <UART_SetConfig+0x342>
 80043a0:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <UART_SetConfig+0x300>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043cd 	.word	0x080043cd
 80043ac:	080043eb 	.word	0x080043eb
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043eb 	.word	0x080043eb
 80043b8:	080043db 	.word	0x080043db
 80043bc:	080043eb 	.word	0x080043eb
 80043c0:	080043eb 	.word	0x080043eb
 80043c4:	080043eb 	.word	0x080043eb
 80043c8:	080043e3 	.word	0x080043e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043cc:	f7fe fed8 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 80043d0:	61f8      	str	r0, [r7, #28]
        break;
 80043d2:	e010      	b.n	80043f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d4:	4b8f      	ldr	r3, [pc, #572]	; (8004614 <UART_SetConfig+0x56c>)
 80043d6:	61fb      	str	r3, [r7, #28]
        break;
 80043d8:	e00d      	b.n	80043f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043da:	f7fe fe39 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 80043de:	61f8      	str	r0, [r7, #28]
        break;
 80043e0:	e009      	b.n	80043f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e6:	61fb      	str	r3, [r7, #28]
        break;
 80043e8:	e005      	b.n	80043f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80fb 	beq.w	80045f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	429a      	cmp	r2, r3
 800440c:	d305      	bcc.n	800441a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	429a      	cmp	r2, r3
 8004418:	d903      	bls.n	8004422 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004420:	e0e8      	b.n	80045f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2200      	movs	r2, #0
 8004426:	461c      	mov	r4, r3
 8004428:	4615      	mov	r5, r2
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	022b      	lsls	r3, r5, #8
 8004434:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004438:	0222      	lsls	r2, r4, #8
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	6849      	ldr	r1, [r1, #4]
 800443e:	0849      	lsrs	r1, r1, #1
 8004440:	2000      	movs	r0, #0
 8004442:	4688      	mov	r8, r1
 8004444:	4681      	mov	r9, r0
 8004446:	eb12 0a08 	adds.w	sl, r2, r8
 800444a:	eb43 0b09 	adc.w	fp, r3, r9
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	603b      	str	r3, [r7, #0]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800445c:	4650      	mov	r0, sl
 800445e:	4659      	mov	r1, fp
 8004460:	f7fc fc12 	bl	8000c88 <__aeabi_uldivmod>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4613      	mov	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004472:	d308      	bcc.n	8004486 <UART_SetConfig+0x3de>
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447a:	d204      	bcs.n	8004486 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	60da      	str	r2, [r3, #12]
 8004484:	e0b6      	b.n	80045f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800448c:	e0b2      	b.n	80045f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004496:	d15e      	bne.n	8004556 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004498:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800449c:	2b08      	cmp	r3, #8
 800449e:	d828      	bhi.n	80044f2 <UART_SetConfig+0x44a>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <UART_SetConfig+0x400>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	080044d5 	.word	0x080044d5
 80044b0:	080044dd 	.word	0x080044dd
 80044b4:	080044f3 	.word	0x080044f3
 80044b8:	080044e3 	.word	0x080044e3
 80044bc:	080044f3 	.word	0x080044f3
 80044c0:	080044f3 	.word	0x080044f3
 80044c4:	080044f3 	.word	0x080044f3
 80044c8:	080044eb 	.word	0x080044eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7fe fe58 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 80044d0:	61f8      	str	r0, [r7, #28]
        break;
 80044d2:	e014      	b.n	80044fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d4:	f7fe fe6a 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 80044d8:	61f8      	str	r0, [r7, #28]
        break;
 80044da:	e010      	b.n	80044fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044dc:	4b4d      	ldr	r3, [pc, #308]	; (8004614 <UART_SetConfig+0x56c>)
 80044de:	61fb      	str	r3, [r7, #28]
        break;
 80044e0:	e00d      	b.n	80044fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e2:	f7fe fdb5 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 80044e6:	61f8      	str	r0, [r7, #28]
        break;
 80044e8:	e009      	b.n	80044fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ee:	61fb      	str	r3, [r7, #28]
        break;
 80044f0:	e005      	b.n	80044fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d077      	beq.n	80045f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	005a      	lsls	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	441a      	add	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b0f      	cmp	r3, #15
 800451e:	d916      	bls.n	800454e <UART_SetConfig+0x4a6>
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d212      	bcs.n	800454e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f023 030f 	bic.w	r3, r3, #15
 8004530:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	b29b      	uxth	r3, r3
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	b29a      	uxth	r2, r3
 800453e:	8afb      	ldrh	r3, [r7, #22]
 8004540:	4313      	orrs	r3, r2
 8004542:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	8afa      	ldrh	r2, [r7, #22]
 800454a:	60da      	str	r2, [r3, #12]
 800454c:	e052      	b.n	80045f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004554:	e04e      	b.n	80045f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800455a:	2b08      	cmp	r3, #8
 800455c:	d827      	bhi.n	80045ae <UART_SetConfig+0x506>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x4bc>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004589 	.word	0x08004589
 8004568:	08004591 	.word	0x08004591
 800456c:	08004599 	.word	0x08004599
 8004570:	080045af 	.word	0x080045af
 8004574:	0800459f 	.word	0x0800459f
 8004578:	080045af 	.word	0x080045af
 800457c:	080045af 	.word	0x080045af
 8004580:	080045af 	.word	0x080045af
 8004584:	080045a7 	.word	0x080045a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7fe fdfa 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 800458c:	61f8      	str	r0, [r7, #28]
        break;
 800458e:	e014      	b.n	80045ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7fe fe0c 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 8004594:	61f8      	str	r0, [r7, #28]
        break;
 8004596:	e010      	b.n	80045ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004598:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <UART_SetConfig+0x56c>)
 800459a:	61fb      	str	r3, [r7, #28]
        break;
 800459c:	e00d      	b.n	80045ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459e:	f7fe fd57 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 80045a2:	61f8      	str	r0, [r7, #28]
        break;
 80045a4:	e009      	b.n	80045ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045aa:	61fb      	str	r3, [r7, #28]
        break;
 80045ac:	e005      	b.n	80045ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045b8:	bf00      	nop
    }

    if (pclk != 0U)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d019      	beq.n	80045f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	085a      	lsrs	r2, r3, #1
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	441a      	add	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b0f      	cmp	r3, #15
 80045d8:	d909      	bls.n	80045ee <UART_SetConfig+0x546>
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e0:	d205      	bcs.n	80045ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60da      	str	r2, [r3, #12]
 80045ec:	e002      	b.n	80045f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004600:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004604:	4618      	mov	r0, r3
 8004606:	3728      	adds	r7, #40	; 0x28
 8004608:	46bd      	mov	sp, r7
 800460a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460e:	bf00      	nop
 8004610:	40008000 	.word	0x40008000
 8004614:	00f42400 	.word	0x00f42400

08004618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01a      	beq.n	800472e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004716:	d10a      	bne.n	800472e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  }
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b098      	sub	sp, #96	; 0x60
 8004760:	af02      	add	r7, sp, #8
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800476c:	f7fd fc3a 	bl	8001fe4 <HAL_GetTick>
 8004770:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b08      	cmp	r3, #8
 800477e:	d12e      	bne.n	80047de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004788:	2200      	movs	r2, #0
 800478a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f88c 	bl	80048ac <UART_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d021      	beq.n	80047de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ae:	653b      	str	r3, [r7, #80]	; 0x50
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e6      	bne.n	800479a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e062      	b.n	80048a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d149      	bne.n	8004880 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f4:	2200      	movs	r2, #0
 80047f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f856 	bl	80048ac <UART_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d03c      	beq.n	8004880 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	623b      	str	r3, [r7, #32]
   return(result);
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
 8004826:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800482a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e6      	bne.n	8004806 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3308      	adds	r3, #8
 800483e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	60fb      	str	r3, [r7, #12]
   return(result);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3308      	adds	r3, #8
 8004856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004858:	61fa      	str	r2, [r7, #28]
 800485a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	69b9      	ldr	r1, [r7, #24]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	617b      	str	r3, [r7, #20]
   return(result);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e5      	bne.n	8004838 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e011      	b.n	80048a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3758      	adds	r7, #88	; 0x58
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048bc:	e04f      	b.n	800495e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d04b      	beq.n	800495e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c6:	f7fd fb8d 	bl	8001fe4 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <UART_WaitOnFlagUntilTimeout+0x30>
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e04e      	b.n	800497e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d037      	beq.n	800495e <UART_WaitOnFlagUntilTimeout+0xb2>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d034      	beq.n	800495e <UART_WaitOnFlagUntilTimeout+0xb2>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	d031      	beq.n	800495e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b08      	cmp	r3, #8
 8004906:	d110      	bne.n	800492a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2208      	movs	r2, #8
 800490e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f838 	bl	8004986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2208      	movs	r2, #8
 800491a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e029      	b.n	800497e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004938:	d111      	bne.n	800495e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f81e 	bl	8004986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e00f      	b.n	800497e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4013      	ands	r3, r2
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	429a      	cmp	r2, r3
 800496c:	bf0c      	ite	eq
 800496e:	2301      	moveq	r3, #1
 8004970:	2300      	movne	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	429a      	cmp	r2, r3
 800497a:	d0a0      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004986:	b480      	push	{r7}
 8004988:	b095      	sub	sp, #84	; 0x54
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ac:	643b      	str	r3, [r7, #64]	; 0x40
 80049ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e6      	bne.n	800498e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3308      	adds	r3, #8
 80049c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3308      	adds	r3, #8
 80049de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e5      	bne.n	80049c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d118      	bne.n	8004a2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f023 0310 	bic.w	r3, r3, #16
 8004a10:	647b      	str	r3, [r7, #68]	; 0x44
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1a:	61bb      	str	r3, [r7, #24]
 8004a1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6979      	ldr	r1, [r7, #20]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	613b      	str	r3, [r7, #16]
   return(result);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e6      	bne.n	80049fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a42:	bf00      	nop
 8004a44:	3754      	adds	r7, #84	; 0x54
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	009b      	lsls	r3, r3, #2
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	2b0b      	cmp	r3, #11
 8004a76:	d833      	bhi.n	8004ae0 <TfLiteTypeGetName+0x78>
 8004a78:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <TfLiteTypeGetName+0x18>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004ab1 	.word	0x08004ab1
 8004a84:	08004ab5 	.word	0x08004ab5
 8004a88:	08004abd 	.word	0x08004abd
 8004a8c:	08004ac1 	.word	0x08004ac1
 8004a90:	08004ac9 	.word	0x08004ac9
 8004a94:	08004ad5 	.word	0x08004ad5
 8004a98:	08004acd 	.word	0x08004acd
 8004a9c:	08004ab9 	.word	0x08004ab9
 8004aa0:	08004ad1 	.word	0x08004ad1
 8004aa4:	08004ac5 	.word	0x08004ac5
 8004aa8:	08004ad9 	.word	0x08004ad9
 8004aac:	08004add 	.word	0x08004add
    case kTfLiteNoType:
      return "NOTYPE";
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <TfLiteTypeGetName+0x88>)
 8004ab2:	e016      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat32:
      return "FLOAT32";
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <TfLiteTypeGetName+0x8c>)
 8004ab6:	e014      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt16:
      return "INT16";
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <TfLiteTypeGetName+0x90>)
 8004aba:	e012      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt32:
      return "INT32";
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <TfLiteTypeGetName+0x94>)
 8004abe:	e010      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
    case kTfLiteUInt8:
      return "UINT8";
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <TfLiteTypeGetName+0x98>)
 8004ac2:	e00e      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt8:
      return "INT8";
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <TfLiteTypeGetName+0x9c>)
 8004ac6:	e00c      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt64:
      return "INT64";
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <TfLiteTypeGetName+0xa0>)
 8004aca:	e00a      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
    case kTfLiteBool:
      return "BOOL";
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <TfLiteTypeGetName+0xa4>)
 8004ace:	e008      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <TfLiteTypeGetName+0xa8>)
 8004ad2:	e006      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
    case kTfLiteString:
      return "STRING";
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <TfLiteTypeGetName+0xac>)
 8004ad6:	e004      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat16:
      return "FLOAT16";
 8004ad8:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <TfLiteTypeGetName+0xb0>)
 8004ada:	e002      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat64:
      return "FLOAT64";
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <TfLiteTypeGetName+0xb4>)
 8004ade:	e000      	b.n	8004ae2 <TfLiteTypeGetName+0x7a>
  }
  return "Unknown type";
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <TfLiteTypeGetName+0xb8>)
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	0800e6e0 	.word	0x0800e6e0
 8004af4:	0800e6e8 	.word	0x0800e6e8
 8004af8:	0800e6f0 	.word	0x0800e6f0
 8004afc:	0800e6f8 	.word	0x0800e6f8
 8004b00:	0800e700 	.word	0x0800e700
 8004b04:	0800e708 	.word	0x0800e708
 8004b08:	0800e710 	.word	0x0800e710
 8004b0c:	0800e718 	.word	0x0800e718
 8004b10:	0800e720 	.word	0x0800e720
 8004b14:	0800e72c 	.word	0x0800e72c
 8004b18:	0800e734 	.word	0x0800e734
 8004b1c:	0800e73c 	.word	0x0800e73c
 8004b20:	0800e744 	.word	0x0800e744

08004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8004b24:	b40e      	push	{r1, r2, r3}
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8004b2e:	f107 0320 	add.w	r3, r7, #32
 8004b32:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	69f9      	ldr	r1, [r7, #28]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3
 8004b44:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8004b46:	68fb      	ldr	r3, [r7, #12]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b52:	b003      	add	sp, #12
 8004b54:	4770      	bx	lr

08004b56 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8004b56:	b40c      	push	{r2, r3}
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8004b62:	f107 031c 	add.w	r3, r7, #28
 8004b66:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	69b9      	ldr	r1, [r7, #24]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	4798      	blx	r3
 8004b78:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b86:	b002      	add	sp, #8
 8004b88:	4770      	bx	lr

08004b8a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2104      	movs	r1, #4
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fa52 	bl	800505a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	b2db      	uxtb	r3, r3
  }
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2106      	movs	r1, #6
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fa42 	bl	800505a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	b2db      	uxtb	r3, r3
  }
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	2108      	movs	r1, #8
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 f9d5 	bl	8004fa0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
  }
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	210a      	movs	r1, #10
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 f9c1 	bl	8004fa0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bf14      	ite	ne
 8004c24:	2301      	movne	r3, #1
 8004c26:	2300      	moveq	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
  }
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	210a      	movs	r1, #10
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 f9ad 	bl	8004fa0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8004c46:	4603      	mov	r3, r0
  }
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	210c      	movs	r1, #12
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 f9be 	bl	8004fde <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8004c62:	4603      	mov	r3, r0
  }
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ffdc 	bl	8004c32 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d104      	bne.n	8004c8a <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff ffe5 	bl	8004c50 <_ZNK6tflite8Operator15builtin_optionsEv>
 8004c86:	4603      	mov	r3, r0
 8004c88:	e000      	b.n	8004c8c <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 8004c8a:	2300      	movs	r3, #0
  }
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4798      	blx	r3
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
 8004d02:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8004d0a:	f006 fc93 	bl	800b634 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8004d14:	f006 fc8e 	bl	800b634 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8004d1e:	f006 fc89 	bl	800b634 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8004d28:	f006 fc84 	bl	800b634 <abort>
}
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  }
  return kTfLiteOk;
}

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	2b05      	cmp	r3, #5
 8004d42:	d81b      	bhi.n	8004d7c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8004d44:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8004d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4a:	bf00      	nop
 8004d4c:	08004d65 	.word	0x08004d65
 8004d50:	08004d69 	.word	0x08004d69
 8004d54:	08004d6d 	.word	0x08004d6d
 8004d58:	08004d71 	.word	0x08004d71
 8004d5c:	08004d75 	.word	0x08004d75
 8004d60:	08004d79 	.word	0x08004d79
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e00a      	b.n	8004d7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e008      	b.n	8004d7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e006      	b.n	8004d7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e004      	b.n	8004d7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8004d74:	2304      	movs	r3, #4
 8004d76:	e002      	b.n	8004d7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8004d78:	2305      	movs	r3, #5
 8004d7a:	e000      	b.n	8004d7e <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop

08004d8c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}

}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	2b0a      	cmp	r3, #10
 8004d9e:	d850      	bhi.n	8004e42 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xb6>
 8004da0:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004ddf 	.word	0x08004ddf
 8004dac:	08004dd5 	.word	0x08004dd5
 8004db0:	08004dfd 	.word	0x08004dfd
 8004db4:	08004e07 	.word	0x08004e07
 8004db8:	08004e1b 	.word	0x08004e1b
 8004dbc:	08004e25 	.word	0x08004e25
 8004dc0:	08004e2f 	.word	0x08004e2f
 8004dc4:	08004df3 	.word	0x08004df3
 8004dc8:	08004e39 	.word	0x08004e39
 8004dcc:	08004e11 	.word	0x08004e11
 8004dd0:	08004de9 	.word	0x08004de9
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	220a      	movs	r2, #10
 8004dd8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e03b      	b.n	8004e56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2201      	movs	r2, #1
 8004de2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e036      	b.n	8004e56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	220b      	movs	r2, #11
 8004dec:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e031      	b.n	8004e56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2207      	movs	r2, #7
 8004df6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e02c      	b.n	8004e56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e027      	b.n	8004e56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e022      	b.n	8004e56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2209      	movs	r2, #9
 8004e14:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e01d      	b.n	8004e56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e018      	b.n	8004e56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_STRING:
      *type = kTfLiteString;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2205      	movs	r2, #5
 8004e28:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e013      	b.n	8004e56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2206      	movs	r2, #6
 8004e32:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004e34:	2300      	movs	r3, #0
 8004e36:	e00e      	b.n	8004e56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e009      	b.n	8004e56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    default:
      *type = kTfLiteNoType;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4904      	ldr	r1, [pc, #16]	; (8004e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd4>)
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fe68 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8004e54:	2301      	movs	r3, #1
  }
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	0800e7dc 	.word	0x0800e7dc

08004e64 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op, BuiltinOperator,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8004e64:	b5b0      	push	{r4, r5, r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	460b      	mov	r3, r1
 8004e72:	72fb      	strb	r3, [r7, #11]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7ff ff3b 	bl	8004cf6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8004e80:	f107 0318 	add.w	r3, r7, #24
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff ff26 	bl	8004cd8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8004e8c:	f107 0310 	add.w	r3, r7, #16
 8004e90:	f107 0218 	add.w	r2, r7, #24
 8004e94:	4611      	mov	r1, r2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f934 	bl	8005104 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8004e9c:	f107 0310 	add.w	r3, r7, #16
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f96e 	bl	8005184 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f083 0301 	eor.w	r3, r3, #1
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6a>
 8004eb4:	4b36      	ldr	r3, [pc, #216]	; (8004f90 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	f240 130b 	movw	r3, #267	; 0x10b
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	4b35      	ldr	r3, [pc, #212]	; (8004f94 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 8004ec0:	4a35      	ldr	r2, [pc, #212]	; (8004f98 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff fe46 	bl	8004b56 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8004eca:	2401      	movs	r4, #1
 8004ecc:	e056      	b.n	8004f7c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff fecc 	bl	8004c6c <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 8004ed4:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d046      	beq.n	8004f6a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8004edc:	69f8      	ldr	r0, [r7, #28]
 8004ede:	f7ff fe60 	bl	8004ba2 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	461d      	mov	r5, r3
    params->activation =
 8004ee6:	f107 0310 	add.w	r3, r7, #16
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f957 	bl	800519e <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004ef0:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f7ff ff1e 	bl	8004d34 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8004ef8:	4603      	mov	r3, r0
    params->activation =
 8004efa:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 8004efc:	f107 0310 	add.w	r3, r7, #16
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f94c 	bl	800519e <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004f06:	4604      	mov	r4, r0
 8004f08:	69f8      	ldr	r0, [r7, #28]
 8004f0a:	f7ff fe6a 	bl	8004be2 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 8004f12:	f107 0310 	add.w	r3, r7, #16
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f941 	bl	800519e <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004f1c:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 8004f1e:	69f8      	ldr	r0, [r7, #28]
 8004f20:	f7ff fe73 	bl	8004c0a <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 8004f24:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 8004f26:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 8004f28:	69f8      	ldr	r0, [r7, #28]
 8004f2a:	f7ff fe4a 	bl	8004bc2 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd6>
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d009      	beq.n	8004f4c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
 8004f38:	e011      	b.n	8004f5e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8004f3a:	f107 0310 	add.w	r3, r7, #16
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f92d 	bl	800519e <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2200      	movs	r2, #0
 8004f48:	705a      	strb	r2, [r3, #1]
        break;
 8004f4a:	e00e      	b.n	8004f6a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f924 	bl	800519e <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2201      	movs	r2, #1
 8004f5a:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8004f5c:	e005      	b.n	8004f6a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8004f5e:	490f      	ldr	r1, [pc, #60]	; (8004f9c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff fddf 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 8004f66:	2401      	movs	r4, #1
 8004f68:	e008      	b.n	8004f7c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004f6a:	f107 0310 	add.w	r3, r7, #16
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f921 	bl	80051b6 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004f7a:	2400      	movs	r4, #0
}
 8004f7c:	f107 0310 	add.w	r3, r7, #16
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 f8dd 	bl	8005140 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004f86:	4623      	mov	r3, r4
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f90:	0800e860 	.word	0x0800e860
 8004f94:	0800e800 	.word	0x0800e800
 8004f98:	0800e848 	.word	0x0800e848
 8004f9c:	0800e874 	.word	0x0800e874

08004fa0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	807b      	strh	r3, [r7, #2]
 8004fac:	4613      	mov	r3, r2
 8004fae:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004fb0:	887b      	ldrh	r3, [r7, #2]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7fc f8a7 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	89fb      	ldrh	r3, [r7, #14]
 8004fc8:	4413      	add	r3, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f90c 	bl	80051e8 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	e000      	b.n	8004fd6 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 8004fd4:	787b      	ldrb	r3, [r7, #1]
  }
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004fea:	887b      	ldrh	r3, [r7, #2]
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f908 	bl	8005204 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8004ff4:	4603      	mov	r3, r0
  }
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b086      	sub	sp, #24
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	460b      	mov	r3, r1
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800500c:	897b      	ldrh	r3, [r7, #10]
 800500e:	4619      	mov	r1, r3
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f7fc f879 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005016:	4603      	mov	r3, r0
 8005018:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800501a:	8afb      	ldrh	r3, [r7, #22]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	8afb      	ldrh	r3, [r7, #22]
 8005024:	4413      	add	r3, r2
 8005026:	4618      	mov	r0, r3
 8005028:	f7fc fbce 	bl	80017c8 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 800502c:	4603      	mov	r3, r0
 800502e:	e000      	b.n	8005032 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8005030:	687b      	ldr	r3, [r7, #4]
  }
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f8fa 	bl	8005244 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005050:	4603      	mov	r3, r0
  }
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	807b      	strh	r3, [r7, #2]
 8005066:	4613      	mov	r3, r2
 8005068:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 800506a:	887b      	ldrh	r3, [r7, #2]
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc f84a 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005074:	4603      	mov	r3, r0
 8005076:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005078:	89fb      	ldrh	r3, [r7, #14]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	89fb      	ldrh	r3, [r7, #14]
 8005082:	4413      	add	r3, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f8fd 	bl	8005284 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 800508a:	4603      	mov	r3, r0
 800508c:	e001      	b.n	8005092 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 800508e:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc fb67 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80050ac:	4603      	mov	r3, r0
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff ffe9 	bl	800509a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80050c8:	4602      	mov	r2, r0
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d306      	bcc.n	80050de <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 80050d0:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 80050d2:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 80050d4:	f240 1101 	movw	r1, #257	; 0x101
 80050d8:	4809      	ldr	r0, [pc, #36]	; (8005100 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 80050da:	f006 fab3 	bl	800b644 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f8f1 	bl	80052c6 <_ZNK11flatbuffers6VectorIlE4DataEv>
 80050e4:	4603      	mov	r3, r0
 80050e6:	6839      	ldr	r1, [r7, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 f8da 	bl	80052a2 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 80050ee:	4603      	mov	r3, r0
  }
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	0800e91c 	.word	0x0800e91c
 80050fc:	0800e928 	.word	0x0800e928
 8005100:	0800e9f8 	.word	0x0800e9f8

08005104 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f8e3 	bl	80052de <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8005118:	4604      	mov	r4, r0
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	f107 030c 	add.w	r3, r7, #12
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff fdb5 	bl	8004c94 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800512a:	f107 030c 	add.w	r3, r7, #12
 800512e:	461a      	mov	r2, r3
 8005130:	4621      	mov	r1, r4
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f8fa 	bl	800532c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	bd90      	pop	{r4, r7, pc}

08005140 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f903 	bl	8005356 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005150:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00c      	beq.n	8005174 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f908 	bl	8005370 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8005160:	4604      	mov	r4, r0
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f911 	bl	800538a <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005168:	4603      	mov	r3, r0
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4619      	mov	r1, r3
 800516e:	4620      	mov	r0, r4
 8005170:	f7ff fd9f 	bl	8004cb2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
      }
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	bd90      	pop	{r4, r7, pc}

08005184 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    { return __x.get() != __y.get(); }

  /// unique_ptr comparison with nullptr
  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f906 	bl	80053a0 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8005194:	4603      	mov	r3, r0
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
	return get();
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f90b 	bl	80053c2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80051ac:	4603      	mov	r3, r0
      }
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 f90b 	bl	80053dc <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80051c6:	4603      	mov	r3, r0
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	71fb      	strb	r3, [r7, #7]
    return t;
 80051da:	79fb      	ldrb	r3, [r7, #7]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff ffeb 	bl	80051d0 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 80051fa:	4603      	mov	r3, r0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8005210:	887b      	ldrh	r3, [r7, #2]
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fb ff77 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800521a:	4603      	mov	r3, r0
 800521c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	89fb      	ldrh	r3, [r7, #14]
 8005222:	4413      	add	r3, r2
 8005224:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005226:	89fb      	ldrh	r3, [r7, #14]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d006      	beq.n	800523a <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 800522c:	68b8      	ldr	r0, [r7, #8]
 800522e:	f7fc fabd 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005232:	4602      	mov	r2, r0
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4413      	add	r3, r2
                        : nullptr;
 8005238:	e000      	b.n	800523c <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800523a:	2300      	movs	r3, #0
  }
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8005250:	887b      	ldrh	r3, [r7, #2]
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7fb ff57 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800525a:	4603      	mov	r3, r0
 800525c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	89fb      	ldrh	r3, [r7, #14]
 8005262:	4413      	add	r3, r2
 8005264:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005266:	89fb      	ldrh	r3, [r7, #14]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d006      	beq.n	800527a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 800526c:	68b8      	ldr	r0, [r7, #8]
 800526e:	f7fc fa9d 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005272:	4602      	mov	r2, r0
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4413      	add	r3, r2
                        : nullptr;
 8005278:	e000      	b.n	800527c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800527a:	2300      	movs	r3, #0
  }
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f993 3000 	ldrsb.w	r3, [r3]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f8b7 	bl	8005406 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8005298:	4603      	mov	r3, r0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	4413      	add	r3, r2
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fc fb10 	bl	80018dc <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 80052bc:	4603      	mov	r3, r0
  }
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
  }
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2201      	movs	r2, #1
 80052ee:	2104      	movs	r1, #4
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	4798      	blx	r3
 80052f4:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4619      	mov	r1, r3
 80052fa:	2004      	movs	r0, #4
 80052fc:	f7ff fc45 	bl	8004b8a <_ZnwjPv>
 8005300:	4603      	mov	r3, r0
  }
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <_ZNSt15__uniq_ptr_dataI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4618      	mov	r0, r3
 800531e:	f000 f899 	bl	8005454 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8005338:	68fc      	ldr	r4, [r7, #12]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f87f 	bl	800543e <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8005340:	4603      	mov	r3, r0
 8005342:	461a      	mov	r2, r3
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	4620      	mov	r0, r4
 8005348:	f7ff ffdf 	bl	800530a <_ZNSt15__uniq_ptr_dataI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	bd90      	pop	{r4, r7, pc}

08005356 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 f88d 	bl	8005480 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005366:	4603      	mov	r3, r0
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f88d 	bl	800549a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8005380:	4603      	mov	r3, r0
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f80a 	bl	80053c2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 f871 	bl	80054b4 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ffb6 	bl	8005356 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80053ea:	4603      	mov	r3, r0
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff ffb0 	bl	8005356 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
	return __p;
 80053fc:	68fb      	ldr	r3, [r7, #12]
      }
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	4603      	mov	r3, r0
 800540e:	71fb      	strb	r3, [r7, #7]
    return t;
 8005410:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	ee07 3a90 	vmov	s15, r3
}
 8005430:	eeb0 0a67 	vmov.f32	s0, s15
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8005460:	68fc      	ldr	r4, [r7, #12]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f834 	bl	80054d0 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005468:	4602      	mov	r2, r0
 800546a:	f107 0308 	add.w	r3, r7, #8
 800546e:	4619      	mov	r1, r3
 8005470:	4620      	mov	r0, r4
 8005472:	f000 f838 	bl	80054e6 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	bd90      	pop	{r4, r7, pc}

08005480 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f844 	bl	8005518 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005490:	4603      	mov	r3, r0
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 f843 	bl	8005530 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80054aa:	4603      	mov	r3, r0
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f843 	bl	800554a <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80054c4:	4603      	mov	r3, r0
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 80054e6:	b5b0      	push	{r4, r5, r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80054f2:	68fc      	ldr	r4, [r7, #12]
 80054f4:	68b8      	ldr	r0, [r7, #8]
 80054f6:	f000 f841 	bl	800557c <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80054fa:	4605      	mov	r5, r0
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ffe7 	bl	80054d0 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005502:	4603      	mov	r3, r0
 8005504:	461a      	mov	r2, r3
 8005506:	4629      	mov	r1, r5
 8005508:	4620      	mov	r0, r4
 800550a:	f000 f842 	bl	8005592 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bdb0      	pop	{r4, r5, r7, pc}

08005518 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f854 	bl	80055ce <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005526:	4603      	mov	r3, r0
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f812 	bl	8005564 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005540:	4603      	mov	r3, r0
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4618      	mov	r0, r3
 8005556:	f000 f848 	bl	80055ea <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800555a:	4603      	mov	r3, r0
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f85b 	bl	8005628 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 8005572:	4603      	mov	r3, r0
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4618      	mov	r0, r3
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005592:	b590      	push	{r4, r7, lr}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800559e:	68fc      	ldr	r4, [r7, #12]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff ff95 	bl	80054d0 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80055a6:	4603      	mov	r3, r0
 80055a8:	4619      	mov	r1, r3
 80055aa:	4620      	mov	r0, r4
 80055ac:	f000 f829 	bl	8005602 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1d1c      	adds	r4, r3, #4
 80055b4:	68b8      	ldr	r0, [r7, #8]
 80055b6:	f7ff ffe1 	bl	800557c <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80055ba:	4603      	mov	r3, r0
 80055bc:	4619      	mov	r1, r3
 80055be:	4620      	mov	r0, r4
 80055c0:	f000 f83f 	bl	8005642 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
	{ }
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd90      	pop	{r4, r7, pc}

080055ce <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3304      	adds	r3, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f842 	bl	8005664 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 80055e0:	4603      	mov	r3, r0
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f841 	bl	800567a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80055f8:	4603      	mov	r3, r0
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8005602:	b590      	push	{r4, r7, lr}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800560c:	687c      	ldr	r4, [r7, #4]
 800560e:	6838      	ldr	r0, [r7, #0]
 8005610:	f7ff ff5e 	bl	80054d0 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005614:	4603      	mov	r3, r0
 8005616:	4619      	mov	r1, r3
 8005618:	4620      	mov	r0, r4
 800561a:	f000 f83c 	bl	8005696 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
	{ }
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bd90      	pop	{r4, r7, pc}

08005628 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 f840 	bl	80056b8 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8005638:	4603      	mov	r3, r0
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800564c:	6838      	ldr	r0, [r7, #0]
 800564e:	f7ff ff95 	bl	800557c <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005652:	4603      	mov	r3, r0
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3304      	adds	r3, #4
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f821 	bl	80056ce <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 800568c:	4603      	mov	r3, r0
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80056a0:	6838      	ldr	r0, [r7, #0]
 80056a2:	f7ff ff15 	bl	80054d0 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80056a6:	4602      	mov	r2, r0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f8da 	bl	80058a8 <_ZNK11flatbuffers6VectorIcE4DataEv>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  return names;
 8005704:	4b02      	ldr	r3, [pc, #8]	; (8005710 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8005706:	4618      	mov	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	08011a3c 	.word	0x08011a3c

08005714 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
 800571e:	2300      	movs	r3, #0
 8005720:	72bb      	strb	r3, [r7, #10]
 8005722:	237e      	movs	r3, #126	; 0x7e
 8005724:	72fb      	strb	r3, [r7, #11]
 8005726:	f107 020b 	add.w	r2, r7, #11
 800572a:	f107 010a 	add.w	r1, r7, #10
 800572e:	1dfb      	adds	r3, r7, #7
 8005730:	4618      	mov	r0, r3
 8005732:	f000 f8c5 	bl	80058c0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 800573c:	4b07      	ldr	r3, [pc, #28]	; (800575c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 800573e:	e008      	b.n	8005752 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 8005744:	f7ff ffdc 	bl	8005700 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8005748:	4602      	mov	r2, r0
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	681b      	ldr	r3, [r3, #0]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	0800f058 	.word	0x0800f058

08005760 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	2104      	movs	r1, #4
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fc73 	bl	800505a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005774:	4603      	mov	r3, r0
 8005776:	b2db      	uxtb	r3, r3
  }
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2106      	movs	r1, #6
 800578c:	4618      	mov	r0, r3
 800578e:	f000 f8b2 	bl	80058f6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8005792:	4603      	mov	r3, r0
  }
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	2108      	movs	r1, #8
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fc27 	bl	8004ffe <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80057b0:	4603      	mov	r3, r0
  }
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b089      	sub	sp, #36	; 0x24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 80057ca:	2300      	movs	r3, #0
 80057cc:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
  auto builtin_code = opcode->builtin_code();
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff ffc3 	bl	8005760 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 80057da:	4603      	mov	r3, r0
 80057dc:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff ffdc 	bl	800579c <_ZNK6tflite12OperatorCode7versionEv>
 80057e4:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 80057e6:	7fbb      	ldrb	r3, [r7, #30]
 80057e8:	2b7e      	cmp	r3, #126	; 0x7e
 80057ea:	d908      	bls.n	80057fe <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 80057ec:	7fbb      	ldrb	r3, [r7, #30]
 80057ee:	461a      	mov	r2, r3
 80057f0:	492a      	ldr	r1, [pc, #168]	; (800589c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff f996 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 80057f8:	2301      	movs	r3, #1
 80057fa:	77fb      	strb	r3, [r7, #31]
 80057fc:	e049      	b.n	8005892 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 80057fe:	7fbb      	ldrb	r3, [r7, #30]
 8005800:	2b20      	cmp	r3, #32
 8005802:	d01b      	beq.n	800583c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x80>
    *registration = op_resolver.FindOp(builtin_code, version);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	7fb9      	ldrb	r1, [r7, #30]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	68b8      	ldr	r0, [r7, #8]
 8005810:	4798      	blx	r3
 8005812:	4602      	mov	r2, r0
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d138      	bne.n	8005892 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
      TF_LITE_REPORT_ERROR(
 8005820:	687c      	ldr	r4, [r7, #4]
 8005822:	7fbb      	ldrb	r3, [r7, #30]
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ff75 	bl	8005714 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800582a:	4602      	mov	r2, r0
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	491c      	ldr	r1, [pc, #112]	; (80058a0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 8005830:	4620      	mov	r0, r4
 8005832:	f7ff f977 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 8005836:	2301      	movs	r3, #1
 8005838:	77fb      	strb	r3, [r7, #31]
 800583a:	e02a      	b.n	8005892 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
    }
  } else if (!opcode->custom_code()) {
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff ff9f 	bl	8005780 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	bf0c      	ite	eq
 8005848:	2301      	moveq	r3, #1
 800584a:	2300      	movne	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d006      	beq.n	8005860 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>
    TF_LITE_REPORT_ERROR(
 8005852:	4914      	ldr	r1, [pc, #80]	; (80058a4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff f965 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800585a:	2301      	movs	r3, #1
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	e018      	b.n	8005892 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
  } else {
    const char* name = opcode->custom_code()->c_str();
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff ff8d 	bl	8005780 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8005866:	4603      	mov	r3, r0
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff ff3b 	bl	80056e4 <_ZNK11flatbuffers6String5c_strEv>
 800586e:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3304      	adds	r3, #4
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	6979      	ldr	r1, [r7, #20]
 800587c:	68b8      	ldr	r0, [r7, #8]
 800587e:	4798      	blx	r3
 8005880:	4602      	mov	r2, r0
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd6>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800588e:	2301      	movs	r3, #1
 8005890:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8005892:	7ffb      	ldrb	r3, [r7, #31]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3724      	adds	r7, #36	; 0x24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd90      	pop	{r4, r7, pc}
 800589c:	0800f05c 	.word	0x0800f05c
 80058a0:	0800f0b0 	.word	0x0800f0b0
 80058a4:	0800f0e8 	.word	0x0800f0e8

080058a8 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
  }
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	781a      	ldrb	r2, [r3, #0]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d305      	bcc.n	80058e4 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	781a      	ldrb	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d201      	bcs.n	80058e8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8005902:	887b      	ldrh	r3, [r7, #2]
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f805 	bl	8005916 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800590c:	4603      	mov	r3, r0
  }
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8005922:	887b      	ldrh	r3, [r7, #2]
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fb fbee 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800592c:	4603      	mov	r3, r0
 800592e:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	89fb      	ldrh	r3, [r7, #14]
 8005934:	4413      	add	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005938:	89fb      	ldrh	r3, [r7, #14]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d006      	beq.n	800594c <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 800593e:	68b8      	ldr	r0, [r7, #8]
 8005940:	f7fb ff34 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005944:	4602      	mov	r2, r0
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4413      	add	r3, r2
                        : nullptr;
 800594a:	e000      	b.n	800594e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800594c:	2300      	movs	r3, #0
  }
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:

#include "tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
 8005956:	b480      	push	{r7}
 8005958:	b087      	sub	sp, #28
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  if (!tensor->is_variable) {
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005964:	f083 0301 	eor.w	r3, r3, #1
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1c>
    return kTfLiteOk;
 800596e:	2300      	movs	r3, #0
 8005970:	e01e      	b.n	80059b0 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x5a>
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
  if (tensor->type == kTfLiteInt8) {
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b09      	cmp	r3, #9
 800597c:	d102      	bne.n	8005984 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x2e>
    value = tensor->params.zero_point;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	617b      	str	r3, [r7, #20]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	e009      	b.n	80059a4 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x4e>
    *raw_ptr = value;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	b2da      	uxtb	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	701a      	strb	r2, [r3, #0]
    raw_ptr++;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	3301      	adds	r3, #1
 800599c:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d3f0      	bcc.n	8005990 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x3a>
  }
#endif
  return kTfLiteOk;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80059c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80059ca:	f005 fe0f 	bl	800b5ec <roundf>
 80059ce:	eef0 7a40 	vmov.f32	s15, s0
 80059d2:	eeb0 0a67 	vmov.f32	s0, s15
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
 80059e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 80059f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f4:	b088      	sub	sp, #32
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	ed87 0b02 	vstr	d0, [r7, #8]
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a0c:	f7fb f87c 	bl	8000b08 <__aeabi_dcmpeq>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d006      	beq.n	8005a24 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
    return;
 8005a22:	e068      	b.n	8005af6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8005a24:	6838      	ldr	r0, [r7, #0]
 8005a26:	ed97 0b02 	vldr	d0, [r7, #8]
 8005a2a:	f005 fd5f 	bl	800b4ec <frexp>
 8005a2e:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	4b32      	ldr	r3, [pc, #200]	; (8005b00 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8005a38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a3c:	f7fa fdfc 	bl	8000638 <__aeabi_dmul>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	ec43 2b17 	vmov	d7, r2, r3
 8005a48:	eeb0 0a47 	vmov.f32	s0, s14
 8005a4c:	eef0 0a67 	vmov.f32	s1, s15
 8005a50:	f000 f88c 	bl	8005b6c <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8005a54:	ec53 2b10 	vmov	r2, r3, d0
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f7fb f92c 	bl	8000cb8 <__aeabi_d2lz>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8005a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a6c:	4925      	ldr	r1, [pc, #148]	; (8005b04 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8005a6e:	428a      	cmp	r2, r1
 8005a70:	f173 0300 	sbcs.w	r3, r3, #0
 8005a74:	db01      	blt.n	8005a7a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8005a76:	f005 fddd 	bl	800b634 <abort>
  if (q_fixed == (1ll << 31)) {
 8005a7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a7e:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8005a82:	430b      	orrs	r3, r1
 8005a84:	d118      	bne.n	8005ab8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8005a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a8a:	0fd9      	lsrs	r1, r3, #31
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	468a      	mov	sl, r1
 8005a90:	4683      	mov	fp, r0
 8005a92:	eb1a 0402 	adds.w	r4, sl, r2
 8005a96:	eb4b 0503 	adc.w	r5, fp, r3
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	0862      	lsrs	r2, r4, #1
 8005aa4:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8005aa8:	106b      	asrs	r3, r5, #1
 8005aaa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8005ab8:	f7ff ff90 	bl	80059dc <_ZNSt14numeric_limitsIlE3maxEv>
 8005abc:	4603      	mov	r3, r0
 8005abe:	17da      	asrs	r2, r3, #31
 8005ac0:	4698      	mov	r8, r3
 8005ac2:	4691      	mov	r9, r2
 8005ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ac8:	4590      	cmp	r8, r2
 8005aca:	eb79 0303 	sbcs.w	r3, r9, r3
 8005ace:	da01      	bge.n	8005ad4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8005ad0:	f005 fdb0 	bl	800b634 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f113 0f1f 	cmn.w	r3, #31
 8005adc:	da08      	bge.n	8005af0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
}
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005afe:	bf00      	nop
 8005b00:	41e00000 	.word	0x41e00000
 8005b04:	80000001 	.word	0x80000001

08005b08 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	ed93 7a00 	vldr	s14, [r3]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	edd3 7a00 	vldr	s15, [r3]
 8005b1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b26:	d501      	bpl.n	8005b2c <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	e000      	b.n	8005b2e <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8005b2c:	687b      	ldr	r3, [r7, #4]
    }
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	ed93 7a00 	vldr	s14, [r3]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	edd3 7a00 	vldr	s15, [r3]
 8005b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b58:	d501      	bpl.n	8005b5e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	e000      	b.n	8005b60 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8005b5e:	687b      	ldr	r3, [r7, #4]
    }
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	ed87 0b00 	vstr	d0, [r7]
 8005b76:	ed97 0b00 	vldr	d0, [r7]
 8005b7a:	f005 fcef 	bl	800b55c <round>
 8005b7e:	eeb0 7a40 	vmov.f32	s14, s0
 8005b82:	eef0 7a60 	vmov.f32	s15, s1
 8005b86:	eeb0 0a47 	vmov.f32	s0, s14
 8005b8a:	eef0 0a67 	vmov.f32	s1, s15
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005b9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ba2:	f7ff ff0b 	bl	80059bc <_ZSt5roundf>
 8005ba6:	eef0 7a40 	vmov.f32	s15, s0
 8005baa:	eeb0 0a67 	vmov.f32	s0, s15
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8005bc6:	b480      	push	{r7}
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	237f      	movs	r3, #127	; 0x7f
 8005bcc:	4618      	mov	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8005bd6:	b480      	push	{r7}
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	2300      	movs	r3, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8005be6:	b480      	push	{r7}
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	23ff      	movs	r3, #255	; 0xff
 8005bec:	4618      	mov	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
	...

08005bf8 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	4b02      	ldr	r3, [pc, #8]	; (8005c08 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8005bfe:	4618      	mov	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	ffff8000 	.word	0xffff8000

08005c0c <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005c14:	4618      	mov	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	ed87 0b00 	vstr	d0, [r7]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c30:	ec43 2b17 	vmov	d7, r2, r3
 8005c34:	eeb0 0a47 	vmov.f32	s0, s14
 8005c38:	eef0 0a67 	vmov.f32	s1, s15
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8005c48:	b5b0      	push	{r4, r5, r7, lr}
 8005c4a:	b08e      	sub	sp, #56	; 0x38
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fa fc94 	bl	8000588 <__aeabi_f2d>
 8005c60:	4604      	mov	r4, r0
 8005c62:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fa fc8d 	bl	8000588 <__aeabi_f2d>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8005c72:	4620      	mov	r0, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	f7fa fcdf 	bl	8000638 <__aeabi_dmul>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d04a      	beq.n	8005d1e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fa fc7b 	bl	8000588 <__aeabi_f2d>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8005c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ca2:	f7fa fb11 	bl	80002c8 <__aeabi_dsub>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	ec43 2b17 	vmov	d7, r2, r3
 8005cae:	eeb0 0a47 	vmov.f32	s0, s14
 8005cb2:	eef0 0a67 	vmov.f32	s1, s15
 8005cb6:	f7ff ffb2 	bl	8005c1e <_ZSt3absd>
 8005cba:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8005cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fa fc60 	bl	8000588 <__aeabi_f2d>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8005cd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005cd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005cd8:	f7fa fdd8 	bl	800088c <__aeabi_ddiv>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	461c      	mov	r4, r3
 8005ce8:	a318      	add	r3, pc, #96	; (adr r3, 8005d4c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	f7fa ff1f 	bl	8000b30 <__aeabi_dcmple>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	461c      	mov	r4, r3
 8005cfc:	b2e3      	uxtb	r3, r4
 8005cfe:	f083 0301 	eor.w	r3, r3, #1
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	695c      	ldr	r4, [r3, #20]
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	239a      	movs	r3, #154	; 0x9a
 8005d12:	4a0c      	ldr	r2, [pc, #48]	; (8005d44 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8005d14:	490c      	ldr	r1, [pc, #48]	; (8005d48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	47a0      	blx	r4
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e009      	b.n	8005d32 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8005d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f813 	bl	8005d54 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8005d2e:	4603      	mov	r3, r0
                                          multiplier);
 8005d30:	bf00      	nop
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3730      	adds	r7, #48	; 0x30
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bdb0      	pop	{r4, r5, r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	f3af 8000 	nop.w
 8005d40:	0800f2e0 	.word	0x0800f2e0
 8005d44:	0800f120 	.word	0x0800f120
 8005d48:	0800f1cc 	.word	0x0800f1cc
 8005d4c:	47ae147b 	.word	0x47ae147b
 8005d50:	3f947ae1 	.word	0x3f947ae1

08005d54 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8005d54:	b590      	push	{r4, r7, lr}
 8005d56:	b089      	sub	sp, #36	; 0x24
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	ed93 7a03 	vldr	s14, [r3, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8005d72:	ee17 0a90 	vmov	r0, s15
 8005d76:	f7fa fc07 	bl	8000588 <__aeabi_f2d>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8005d82:	2301      	movs	r3, #1
 8005d84:	461c      	mov	r4, r3
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d92:	f7fa fed7 	bl	8000b44 <__aeabi_dcmpge>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	461c      	mov	r4, r3
 8005da0:	b2e3      	uxtb	r3, r4
 8005da2:	f083 0301 	eor.w	r3, r3, #1
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	695c      	ldr	r4, [r3, #20]
 8005db0:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x98>)
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	23a7      	movs	r3, #167	; 0xa7
 8005db6:	4a0e      	ldr	r2, [pc, #56]	; (8005df0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8005db8:	490e      	ldr	r1, [pc, #56]	; (8005df4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	47a0      	blx	r4
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e010      	b.n	8005de4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x90>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fa fbde 	bl	8000588 <__aeabi_f2d>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005dd4:	f7fa fd5a 	bl	800088c <__aeabi_ddiv>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dde:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd90      	pop	{r4, r7, pc}
 8005dec:	0800f304 	.word	0x0800f304
 8005df0:	0800f120 	.word	0x0800f120
 8005df4:	0800f1cc 	.word	0x0800f1cc

08005df8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	ed87 0a00 	vstr	s0, [r7]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8005e0a:	ed97 7a00 	vldr	s14, [r7]
 8005e0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005e12:	eeb0 0a66 	vmov.f32	s0, s13
 8005e16:	f7ff febd 	bl	8005b94 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8005e1a:	eef0 7a40 	vmov.f32	s15, s0
 8005e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e22:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8005e2a:	4413      	add	r3, r2
  };
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08e      	sub	sp, #56	; 0x38
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8005e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d118      	bne.n	8005e90 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8005e5e:	f107 0314 	add.w	r3, r7, #20
 8005e62:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8005f58 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff ffc6 	bl	8005df8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	61fb      	str	r3, [r7, #28]
 8005e70:	f107 021c 	add.w	r2, r7, #28
 8005e74:	f107 0308 	add.w	r3, r7, #8
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f8d6 	bl	800602c <_ZSt3maxIlERKT_S2_S2_>
 8005e80:	4603      	mov	r3, r0
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e86:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e8c:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8005e8e:	e05f      	b.n	8005f50 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d129      	bne.n	8005eea <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8005e96:	f107 0314 	add.w	r3, r7, #20
 8005e9a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8005f58 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff ffaa 	bl	8005df8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	623b      	str	r3, [r7, #32]
 8005ea8:	f107 0220 	add.w	r2, r7, #32
 8005eac:	f107 0308 	add.w	r3, r7, #8
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 f8ba 	bl	800602c <_ZSt3maxIlERKT_S2_S2_>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebe:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8005ec0:	f107 0314 	add.w	r3, r7, #20
 8005ec4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff ff95 	bl	8005df8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f892 	bl	8006004 <_ZSt3minIlERKT_S2_S2_>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee6:	601a      	str	r2, [r3, #0]
}
 8005ee8:	e032      	b.n	8005f50 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d129      	bne.n	8005f44 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8005ef0:	f107 0314 	add.w	r3, r7, #20
 8005ef4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff ff7d 	bl	8005df8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005efe:	4603      	mov	r3, r0
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f06:	f107 0308 	add.w	r3, r7, #8
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 f88d 	bl	800602c <_ZSt3maxIlERKT_S2_S2_>
 8005f12:	4603      	mov	r3, r0
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f18:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8005f1a:	f107 0314 	add.w	r3, r7, #20
 8005f1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff ff68 	bl	8005df8 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f2c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005f30:	1d3b      	adds	r3, r7, #4
 8005f32:	4611      	mov	r1, r2
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 f865 	bl	8006004 <_ZSt3minIlERKT_S2_S2_>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f40:	601a      	str	r2, [r3, #0]
}
 8005f42:	e005      	b.n	8005f50 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f48:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4e:	601a      	str	r2, [r3, #0]
}
 8005f50:	bf00      	nop
 8005f52:	3738      	adds	r7, #56	; 0x38
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	00000000 	.word	0x00000000

08005f5c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8005f5c:	b590      	push	{r4, r7, lr}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d108      	bne.n	8005f8e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8005f7c:	f7ff fe2b 	bl	8005bd6 <_ZNSt14numeric_limitsIhE3minEv>
 8005f80:	4603      	mov	r3, r0
 8005f82:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8005f84:	f7ff fe2f 	bl	8005be6 <_ZNSt14numeric_limitsIhE3maxEv>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e024      	b.n	8005fd8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b09      	cmp	r3, #9
 8005f94:	d108      	bne.n	8005fa8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8005f96:	f7ff fe0d 	bl	8005bb4 <_ZNSt14numeric_limitsIaE3minEv>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8005f9e:	f7ff fe12 	bl	8005bc6 <_ZNSt14numeric_limitsIaE3maxEv>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	e017      	b.n	8005fd8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b07      	cmp	r3, #7
 8005fae:	d108      	bne.n	8005fc2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8005fb0:	f7ff fe22 	bl	8005bf8 <_ZNSt14numeric_limitsIsE3minEv>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8005fb8:	f7ff fe28 	bl	8005c0c <_ZNSt14numeric_limitsIsE3maxEv>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	e00a      	b.n	8005fd8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	695c      	ldr	r4, [r3, #20]
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	23da      	movs	r3, #218	; 0xda
 8005fcc:	4a0b      	ldr	r2, [pc, #44]	; (8005ffc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8005fce:	490c      	ldr	r1, [pc, #48]	; (8006000 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	47a0      	blx	r4
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e00a      	b.n	8005fee <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8005fd8:	7af8      	ldrb	r0, [r7, #11]
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	9301      	str	r3, [sp, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	6979      	ldr	r1, [r7, #20]
 8005fe8:	f7ff ff24 	bl	8005e34 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd90      	pop	{r4, r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	0800f320 	.word	0x0800f320
 8005ffc:	0800f120 	.word	0x0800f120
 8006000:	0800f1cc 	.word	0x0800f1cc

08006004 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	da01      	bge.n	800601e <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	e000      	b.n	8006020 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800601e:	687b      	ldr	r3, [r7, #4]
    }
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	da01      	bge.n	8006046 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	e000      	b.n	8006048 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8006046:	687b      	ldr	r3, [r7, #4]
    }
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2104      	movs	r1, #4
 8006060:	4618      	mov	r0, r3
 8006062:	f7fe ffea 	bl	800503a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006066:	4603      	mov	r3, r0
  }
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	2106      	movs	r1, #6
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe ffeb 	bl	800505a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8006084:	4603      	mov	r3, r0
 8006086:	b2db      	uxtb	r3, r3
  }
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/core/api/flatbuffer_conversions.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 80060b2:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 80060b4:	68bb      	ldr	r3, [r7, #8]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 80060de:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 80060e0:	68bb      	ldr	r3, [r7, #8]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4413      	add	r3, r2
 80060fe:	1e5a      	subs	r2, r3, #1
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	fbb2 f2f3 	udiv	r2, r2, r3
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	fb02 f303 	mul.w	r3, r2, r3
 800610c:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800610e:	68fb      	ldr	r3, [r7, #12]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size,
                              ErrorReporter* reporter) {
 800611c:	b590      	push	{r4, r7, lr}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	73fb      	strb	r3, [r7, #15]
  switch (type) {
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	3b01      	subs	r3, #1
 800612e:	2b08      	cmp	r3, #8
 8006130:	d834      	bhi.n	800619c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x80>
 8006132:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	0800615d 	.word	0x0800615d
 800613c:	0800616d 	.word	0x0800616d
 8006140:	08006175 	.word	0x08006175
 8006144:	08006185 	.word	0x08006185
 8006148:	0800619d 	.word	0x0800619d
 800614c:	0800618d 	.word	0x0800618d
 8006150:	08006165 	.word	0x08006165
 8006154:	08006195 	.word	0x08006195
 8006158:	0800617d 	.word	0x0800617d
    case kTfLiteFloat32:
      *size = sizeof(float);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2204      	movs	r2, #4
 8006160:	601a      	str	r2, [r3, #0]
      break;
 8006162:	e028      	b.n	80061b6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9a>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2202      	movs	r2, #2
 8006168:	601a      	str	r2, [r3, #0]
      break;
 800616a:	e024      	b.n	80061b6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9a>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2204      	movs	r2, #4
 8006170:	601a      	str	r2, [r3, #0]
      break;
 8006172:	e020      	b.n	80061b6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9a>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]
      break;
 800617a:	e01c      	b.n	80061b6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9a>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2201      	movs	r2, #1
 8006180:	601a      	str	r2, [r3, #0]
      break;
 8006182:	e018      	b.n	80061b6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9a>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2208      	movs	r2, #8
 8006188:	601a      	str	r2, [r3, #0]
      break;
 800618a:	e014      	b.n	80061b6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9a>
    case kTfLiteBool:
      *size = sizeof(bool);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]
      break;
 8006192:	e010      	b.n	80061b6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9a>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2208      	movs	r2, #8
 8006198:	601a      	str	r2, [r3, #0]
      break;
 800619a:	e00c      	b.n	80061b6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9a>
    default:
      reporter->Report("Type %s (%d) not is not supported",
 800619c:	687c      	ldr	r4, [r7, #4]
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe fc61 	bl	8004a68 <TfLiteTypeGetName>
 80061a6:	4602      	mov	r2, r0
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	4905      	ldr	r1, [pc, #20]	; (80061c0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0xa4>)
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7fe fcb9 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                       TfLiteTypeGetName(type), type);
      return kTfLiteError;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9c>
  }
  return kTfLiteOk;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd90      	pop	{r4, r7, pc}
 80061c0:	0800f3b0 	.word	0x0800f3b0

080061c4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff ff3c 	bl	8006054 <_ZNK6tflite6Tensor5shapeEv>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	bf14      	ite	ne
 80061e2:	2301      	movne	r3, #1
 80061e4:	2300      	moveq	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d022      	beq.n	8006232 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 80061ec:	2300      	movs	r3, #0
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	e00f      	b.n	8006212 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f7ff ff2e 	bl	8006054 <_ZNK6tflite6Tensor5shapeEv>
 80061f8:	4603      	mov	r3, r0
 80061fa:	69b9      	ldr	r1, [r7, #24]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe ff5b 	bl	80050b8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006202:	4602      	mov	r2, r0
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	fb02 f303 	mul.w	r3, r2, r3
 800620a:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	3301      	adds	r3, #1
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7ff ff1e 	bl	8006054 <_ZNK6tflite6Tensor5shapeEv>
 8006218:	4603      	mov	r3, r0
 800621a:	4618      	mov	r0, r3
 800621c:	f000 f834 	bl	8006288 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8006220:	4602      	mov	r2, r0
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	4293      	cmp	r3, r2
 8006226:	bf34      	ite	cc
 8006228:	2301      	movcc	r3, #1
 800622a:	2300      	movcs	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1df      	bne.n	80061f2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2e>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff ff1c 	bl	8006070 <_ZNK6tflite6Tensor4typeEv>
 8006238:	4603      	mov	r3, r0
 800623a:	4618      	mov	r0, r3
 800623c:	f107 0315 	add.w	r3, r7, #21
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	4619      	mov	r1, r3
 8006244:	f7fe fda2 	bl	8004d8c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006248:	4603      	mov	r3, r0
 800624a:	75fb      	strb	r3, [r7, #23]
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	e014      	b.n	8006280 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xbc>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(
 8006256:	7d7b      	ldrb	r3, [r7, #21]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff ff5d 	bl	800611c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>
 8006262:	4603      	mov	r3, r0
 8006264:	75bb      	strb	r3, [r7, #22]
 8006266:	7dbb      	ldrb	r3, [r7, #22]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xac>
 800626c:	7dbb      	ldrb	r3, [r7, #22]
 800626e:	e007      	b.n	8006280 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xbc>
      TfLiteTypeSizeOf(tf_lite_type, type_size, error_reporter));
  *bytes = element_count * (*type_size);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	fb03 f202 	mul.w	r2, r3, r2
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3720      	adds	r7, #32
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fe ff02 	bl	800509a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006296:	4603      	mov	r3, r0
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2108      	movs	r1, #8
 80062ac:	4618      	mov	r0, r3
 80062ae:	f001 fc85 	bl	8007bbc <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 80062b2:	4603      	mov	r3, r0
  }
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	210a      	movs	r1, #10
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 fc87 	bl	8007bdc <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 80062ce:	4603      	mov	r3, r0
  }
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	2110      	movs	r1, #16
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe fe89 	bl	8004ffe <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80062ec:	4603      	mov	r3, r0
  }
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	2108      	movs	r1, #8
 8006304:	4618      	mov	r0, r3
 8006306:	f7fb fa6d 	bl	80017e4 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800630a:	4603      	mov	r3, r0
  }
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	210c      	movs	r1, #12
 8006320:	4618      	mov	r0, r3
 8006322:	f001 fc6b 	bl	8007bfc <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8006326:	4603      	mov	r3, r0
  }
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	210e      	movs	r1, #14
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fe2e 	bl	8004fa0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	bf14      	ite	ne
 800634a:	2301      	movne	r3, #1
 800634c:	2300      	moveq	r3, #0
 800634e:	b2db      	uxtb	r3, r3
  }
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	2104      	movs	r1, #4
 8006366:	4618      	mov	r0, r3
 8006368:	f7fb fa3c 	bl	80017e4 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800636c:	4603      	mov	r3, r0
  }
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2106      	movs	r1, #6
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fe59 	bl	800503a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006388:	4603      	mov	r3, r0
  }
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2108      	movs	r1, #8
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fe4b 	bl	800503a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80063a4:	4603      	mov	r3, r0
  }
 80063a6:	4618      	mov	r0, r3
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	210e      	movs	r1, #14
 80063ba:	4618      	mov	r0, r3
 80063bc:	f001 fbee 	bl	8007b9c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 80063c0:	4603      	mov	r3, r0
  }
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2104      	movs	r1, #4
 80063d6:	4618      	mov	r0, r3
 80063d8:	f001 fc20 	bl	8007c1c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 80063dc:	4603      	mov	r3, r0
  }
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2106      	movs	r1, #6
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe fe21 	bl	800503a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80063f8:	4603      	mov	r3, r0
  }
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2108      	movs	r1, #8
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fe13 	bl	800503a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006414:	4603      	mov	r3, r0
  }
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	210a      	movs	r1, #10
 800642a:	4618      	mov	r0, r3
 800642c:	f001 fc06 	bl	8007c3c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8006430:	4603      	mov	r3, r0
  }
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2104      	movs	r1, #4
 8006446:	4618      	mov	r0, r3
 8006448:	f001 fba8 	bl	8007b9c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800644c:	4603      	mov	r3, r0
  }
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2104      	movs	r1, #4
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff fa47 	bl	80058f6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8006468:	4603      	mov	r3, r0
  }
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	2106      	movs	r1, #6
 8006480:	4618      	mov	r0, r3
 8006482:	f7fb f9af 	bl	80017e4 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8006486:	4603      	mov	r3, r0
  }
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2106      	movs	r1, #6
 800649c:	4618      	mov	r0, r3
 800649e:	f001 fbdd 	bl	8007c5c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 80064a2:	4603      	mov	r3, r0
  }
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2108      	movs	r1, #8
 80064b8:	4618      	mov	r0, r3
 80064ba:	f001 fbdf 	bl	8007c7c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 80064be:	4603      	mov	r3, r0
  }
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	210c      	movs	r1, #12
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fbe1 	bl	8007c9c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 80064da:	4603      	mov	r3, r0
  }
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2110      	movs	r1, #16
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 fbe3 	bl	8007cbc <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 80064f6:	4603      	mov	r3, r0
  }
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	4a04      	ldr	r2, [pc, #16]	; (800651c <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	08011ca0 	.word	0x08011ca0

08006520 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff ffe9 	bl	8006500 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800652e:	2104      	movs	r1, #4
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f004 ffab 	bl	800b48c <_ZdlPvj>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	4a04      	ldr	r2, [pc, #16]	; (800655c <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	08011ca0 	.word	0x08011ca0

08006560 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
// the flexible array element to be initialized.
const TfLiteIntArray kZeroLengthIntArray = {0};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff ffe7 	bl	8006540 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 8006572:	4a05      	ldr	r2, [pc, #20]	; (8006588 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	605a      	str	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	08011c60 	.word	0x08011c60

0800658c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6858      	ldr	r0, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	4798      	blx	r3
 80065ac:	4603      	mov	r3, r0
  }
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(ErrorReporter* reporter,
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
                        SimpleMemoryAllocator* allocator)
      : reporter_(reporter), allocator_(allocator) {}
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	605a      	str	r2, [r3, #4]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	609a      	str	r2, [r3, #8]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	60da      	str	r2, [r3, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	611a      	str	r2, [r3, #16]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>:

  // Initializes the builder by allocating AllocationInfo array from the
  // simple memory allocator.
  TfLiteStatus Init(size_t tensor_count, size_t scratch_buffer_count) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
    tensor_count_ = tensor_count;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	609a      	str	r2, [r3, #8]
    buffer_count_ = scratch_buffer_count;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	60da      	str	r2, [r3, #12]
    return Allocate();
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f821 	bl	8006664 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>
 8006622:	4603      	mov	r3, r0
  }
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>:

  // Add allocation information for the scratch buffers.
  TfLiteStatus AddScratchBuffers(internal::ScratchBufferHandle* buffer_handles);

  // Returns a pointer to the built AllocationInfo array.
  const AllocationInfo* Finish() const { return info_; }
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>:
  size_t Size() const { return tensor_count_ + buffer_count_; }
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	4413      	add	r3, r2
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
	...

08006664 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>:
  size_t tensor_count_ = 0;
  size_t buffer_count_ = 0;
  AllocationInfo* info_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::Allocate() {
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  size_t bytes = sizeof(AllocationInfo) * Size();
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ffe9 	bl	8006644 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 8006672:	4602      	mov	r2, r0
 8006674:	4613      	mov	r3, r2
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	4413      	add	r3, r2
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	60fb      	str	r3, [r7, #12]
  info_ = reinterpret_cast<AllocationInfo*>(
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6858      	ldr	r0, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	330c      	adds	r3, #12
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2204      	movs	r2, #4
 800668e:	68f9      	ldr	r1, [r7, #12]
 8006690:	4798      	blx	r3
 8006692:	4602      	mov	r2, r0
  info_ = reinterpret_cast<AllocationInfo*>(
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	611a      	str	r2, [r3, #16]
  if (info_ == nullptr) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d108      	bne.n	80066b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x4e>
    TF_LITE_REPORT_ERROR(
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4905      	ldr	r1, [pc, #20]	; (80066bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x58>)
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fe fa3b 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x50>
  }
  return kTfLiteOk;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	0800fc54 	.word	0x0800fc54

080066c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor>:

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteTensor* runtime_tensors) {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b09a      	sub	sp, #104	; 0x68
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 80066ce:	2300      	movs	r3, #0
 80066d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066d2:	e04e      	b.n	8006772 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xb2>
    AllocationInfo* current = &info_[i];
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6919      	ldr	r1, [r3, #16]
 80066d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066da:	4613      	mov	r3, r2
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	4413      	add	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	440b      	add	r3, r1
 80066e4:	617b      	str	r3, [r7, #20]
    // TfLiteTensor.uint8 field is deprecated so use .data field instead.
    current->output_ptr = &(runtime_tensors[i].data.data);
 80066e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066e8:	019b      	lsls	r3, r3, #6
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	4413      	add	r3, r2
 80066ee:	1d1a      	adds	r2, r3, #4
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	605a      	str	r2, [r3, #4]
    current->bytes = runtime_tensors[i].bytes;
 80066f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f6:	019b      	lsls	r3, r3, #6
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	4413      	add	r3, r2
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	601a      	str	r2, [r3, #0]
    current->first_created = -1;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f04f 32ff 	mov.w	r2, #4294967295
 8006708:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f04f 32ff 	mov.w	r2, #4294967295
 8006710:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 8006712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006714:	019b      	lsls	r3, r3, #6
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	4413      	add	r3, r2
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d113      	bne.n	8006748 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x88>
                                (!subgraph->tensors()->Get(i)->is_variable());
 8006720:	68b8      	ldr	r0, [r7, #8]
 8006722:	f7ff fe52 	bl	80063ca <_ZNK6tflite8SubGraph7tensorsEv>
 8006726:	4603      	mov	r3, r0
 8006728:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800672a:	4618      	mov	r0, r3
 800672c:	f001 fb5e 	bl	8007dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8006730:	4603      	mov	r3, r0
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fdfc 	bl	8006330 <_ZNK6tflite6Tensor11is_variableEv>
 8006738:	4603      	mov	r3, r0
 800673a:	f083 0301 	eor.w	r3, r3, #1
 800673e:	b2db      	uxtb	r3, r3
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x88>
 8006744:	2201      	movs	r2, #1
 8006746:	e000      	b.n	800674a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x8a>
 8006748:	2200      	movs	r2, #0
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xa4>
      current->offline_offset = offline_offsets[i];
 8006754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	611a      	str	r2, [r3, #16]
 8006762:	e003      	b.n	800676c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xac>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f04f 32ff 	mov.w	r2, #4294967295
 800676a:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800676c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800676e:	3301      	adds	r3, #1
 8006770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006778:	429a      	cmp	r2, r3
 800677a:	d3ab      	bcc.n	80066d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x14>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800677c:	2300      	movs	r3, #0
 800677e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006780:	e017      	b.n	80067b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xf2>
    const int tensor_index = subgraph->inputs()->Get(i);
 8006782:	68b8      	ldr	r0, [r7, #8]
 8006784:	f7ff fe2f 	bl	80063e6 <_ZNK6tflite8SubGraph6inputsEv>
 8006788:	4603      	mov	r3, r0
 800678a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fc93 	bl	80050b8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006792:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6919      	ldr	r1, [r3, #16]
 8006798:	69fa      	ldr	r2, [r7, #28]
 800679a:	4613      	mov	r3, r2
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	4413      	add	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	440b      	add	r3, r1
 80067a4:	61bb      	str	r3, [r7, #24]
    current->first_created = 0;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	2200      	movs	r2, #0
 80067aa:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 80067ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ae:	3301      	adds	r3, #1
 80067b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80067b2:	68b8      	ldr	r0, [r7, #8]
 80067b4:	f7ff fe17 	bl	80063e6 <_ZNK6tflite8SubGraph6inputsEv>
 80067b8:	4603      	mov	r3, r0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fc6d 	bl	800509a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80067c0:	4602      	mov	r2, r0
 80067c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067c4:	4293      	cmp	r3, r2
 80067c6:	bf34      	ite	cc
 80067c8:	2301      	movcc	r3, #1
 80067ca:	2300      	movcs	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1d7      	bne.n	8006782 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xc2>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80067d2:	2300      	movs	r3, #0
 80067d4:	657b      	str	r3, [r7, #84]	; 0x54
 80067d6:	e020      	b.n	800681a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x15a>
    const int tensor_index = subgraph->outputs()->Get(i);
 80067d8:	68b8      	ldr	r0, [r7, #8]
 80067da:	f7ff fe12 	bl	8006402 <_ZNK6tflite8SubGraph7outputsEv>
 80067de:	4603      	mov	r3, r0
 80067e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fc68 	bl	80050b8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80067e8:	6278      	str	r0, [r7, #36]	; 0x24
    AllocationInfo* current = &info_[tensor_index];
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6919      	ldr	r1, [r3, #16]
 80067ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f0:	4613      	mov	r3, r2
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	4413      	add	r3, r2
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	440b      	add	r3, r1
 80067fa:	623b      	str	r3, [r7, #32]
    current->last_used = subgraph->operators()->size() - 1;
 80067fc:	68b8      	ldr	r0, [r7, #8]
 80067fe:	f7ff fe0e 	bl	800641e <_ZNK6tflite8SubGraph9operatorsEv>
 8006802:	4603      	mov	r3, r0
 8006804:	4618      	mov	r0, r3
 8006806:	f001 fb17 	bl	8007e38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800680a:	4603      	mov	r3, r0
 800680c:	3b01      	subs	r3, #1
 800680e:	461a      	mov	r2, r3
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8006814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006816:	3301      	adds	r3, #1
 8006818:	657b      	str	r3, [r7, #84]	; 0x54
 800681a:	68b8      	ldr	r0, [r7, #8]
 800681c:	f7ff fdf1 	bl	8006402 <_ZNK6tflite8SubGraph7outputsEv>
 8006820:	4603      	mov	r3, r0
 8006822:	4618      	mov	r0, r3
 8006824:	f7fe fc39 	bl	800509a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006828:	4602      	mov	r2, r0
 800682a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682c:	4293      	cmp	r3, r2
 800682e:	bf34      	ite	cc
 8006830:	2301      	movcc	r3, #1
 8006832:	2300      	movcs	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1ce      	bne.n	80067d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x118>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800683a:	68b8      	ldr	r0, [r7, #8]
 800683c:	f7ff fdef 	bl	800641e <_ZNK6tflite8SubGraph9operatorsEv>
 8006840:	4603      	mov	r3, r0
 8006842:	4618      	mov	r0, r3
 8006844:	f001 faf8 	bl	8007e38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8006848:	4603      	mov	r3, r0
 800684a:	3b01      	subs	r3, #1
 800684c:	653b      	str	r3, [r7, #80]	; 0x50
 800684e:	e076      	b.n	800693e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x27e>
    const auto* op = subgraph->operators()->Get(i);
 8006850:	68b8      	ldr	r0, [r7, #8]
 8006852:	f7ff fde4 	bl	800641e <_ZNK6tflite8SubGraph9operatorsEv>
 8006856:	4602      	mov	r2, r0
 8006858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f001 faf9 	bl	8007e54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8006862:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8006864:	2300      	movs	r3, #0
 8006866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006868:	e021      	b.n	80068ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1ee>
      const int tensor_index = op->inputs()->Get(n);
 800686a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800686c:	f7ff fd83 	bl	8006376 <_ZNK6tflite8Operator6inputsEv>
 8006870:	4603      	mov	r3, r0
 8006872:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe fc1f 	bl	80050b8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800687a:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6919      	ldr	r1, [r3, #16]
 8006880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006882:	4613      	mov	r3, r2
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	4413      	add	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	440b      	add	r3, r1
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
      if (((current->last_used == -1) || (current->last_used < i))) {
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d004      	beq.n	80068a2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1e2>
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800689e:	429a      	cmp	r2, r3
 80068a0:	dd02      	ble.n	80068a8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1e8>
        current->last_used = i;
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068a6:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80068a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068aa:	3301      	adds	r3, #1
 80068ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068b0:	f7ff fd61 	bl	8006376 <_ZNK6tflite8Operator6inputsEv>
 80068b4:	4603      	mov	r3, r0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe fbef 	bl	800509a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80068bc:	4602      	mov	r2, r0
 80068be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c0:	4293      	cmp	r3, r2
 80068c2:	bf34      	ite	cc
 80068c4:	2301      	movcc	r3, #1
 80068c6:	2300      	movcs	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1cd      	bne.n	800686a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1aa>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 80068ce:	2300      	movs	r3, #0
 80068d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068d2:	e021      	b.n	8006918 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x258>
      const int tensor_index = op->outputs()->Get(n);
 80068d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068d6:	f7ff fd5c 	bl	8006392 <_ZNK6tflite8Operator7outputsEv>
 80068da:	4603      	mov	r3, r0
 80068dc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fbea 	bl	80050b8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80068e4:	6378      	str	r0, [r7, #52]	; 0x34
      AllocationInfo* current = &info_[tensor_index];
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6919      	ldr	r1, [r3, #16]
 80068ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ec:	4613      	mov	r3, r2
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	4413      	add	r3, r2
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	440b      	add	r3, r1
 80068f6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((current->first_created == -1) || (current->first_created > i)) {
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d004      	beq.n	800690c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x24c>
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006908:	429a      	cmp	r2, r3
 800690a:	da02      	bge.n	8006912 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x252>
        current->first_created = i;
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006910:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8006912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006914:	3301      	adds	r3, #1
 8006916:	64bb      	str	r3, [r7, #72]	; 0x48
 8006918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800691a:	f7ff fd3a 	bl	8006392 <_ZNK6tflite8Operator7outputsEv>
 800691e:	4603      	mov	r3, r0
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe fbba 	bl	800509a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006926:	4602      	mov	r2, r0
 8006928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692a:	4293      	cmp	r3, r2
 800692c:	bf34      	ite	cc
 800692e:	2301      	movcc	r3, #1
 8006930:	2300      	movcs	r3, #0
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1cd      	bne.n	80068d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x214>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8006938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800693a:	3b01      	subs	r3, #1
 800693c:	653b      	str	r3, [r7, #80]	; 0x50
 800693e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006940:	2b00      	cmp	r3, #0
 8006942:	da85      	bge.n	8006850 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x190>
      }
    }
  }

  // Work out which tensors need to be allocated.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8006944:	2300      	movs	r3, #0
 8006946:	647b      	str	r3, [r7, #68]	; 0x44
 8006948:	e04d      	b.n	80069e6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x326>
    AllocationInfo* current = &info_[i];
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6919      	ldr	r1, [r3, #16]
 800694e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006950:	4613      	mov	r3, r2
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	4413      	add	r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	440b      	add	r3, r1
 800695a:	643b      	str	r3, [r7, #64]	; 0x40
    const bool is_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 800695c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006964:	d106      	bne.n	8006974 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2b4>
 8006966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d001      	beq.n	8006974 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2b4>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2b6>
 8006974:	2300      	movs	r3, #0
    const bool is_read_only =
 8006976:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (is_read_only) {
 800697a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2c8>
      current->needs_allocating = false;
 8006982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006984:	2200      	movs	r2, #0
 8006986:	751a      	strb	r2, [r3, #20]
    }
    const bool has_partial_lifetime =
        !is_read_only &&
 8006988:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800698c:	f083 0301 	eor.w	r3, r3, #1
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00b      	beq.n	80069ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2ee>
        ((current->first_created == -1) || (current->last_used == -1));
 8006996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006998:	689b      	ldr	r3, [r3, #8]
        !is_read_only &&
 800699a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699e:	d004      	beq.n	80069aa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2ea>
        ((current->first_created == -1) || (current->last_used == -1));
 80069a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a8:	d101      	bne.n	80069ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2ee>
        !is_read_only &&
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2f0>
 80069ae:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 80069b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    if (has_partial_lifetime && current->needs_allocating) {
 80069b4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d011      	beq.n	80069e0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x320>
 80069bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069be:	7d1b      	ldrb	r3, [r3, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00d      	beq.n	80069e0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x320>
      TF_LITE_REPORT_ERROR(
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069d6:	4909      	ldr	r1, [pc, #36]	; (80069fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x33c>)
 80069d8:	f7fe f8a4 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 80069dc:	2301      	movs	r3, #1
 80069de:	e008      	b.n	80069f2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x332>
  for (size_t i = 0; i < tensor_count_; ++i) {
 80069e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e2:	3301      	adds	r3, #1
 80069e4:	647b      	str	r3, [r7, #68]	; 0x44
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d3ac      	bcc.n	800694a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x28a>
    }
  }
  return kTfLiteOk;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3760      	adds	r7, #96	; 0x60
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	0800fc98 	.word	0x0800fc98

08006a00 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:
// |    2    | Number offsets following: n                                     |
// |    3    | Arena byte offset of tensor #0 or -1 to allocate at runtime     |
// |    4    | Arena byte offset of tensor #1 or -1 to allocate at runtime     |
// | 3+(n-1) | Arena byte offset of tensor #(n-1) or -1 to allocate at runtime |
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08c      	sub	sp, #48	; 0x30
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 8006a0c:	68b8      	ldr	r0, [r7, #8]
 8006a0e:	f7ff fd69 	bl	80064e4 <_ZNK6tflite5Model8metadataEv>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bf14      	ite	ne
 8006a18:	2301      	movne	r3, #1
 8006a1a:	2300      	moveq	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d060      	beq.n	8006ae4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8006a22:	2300      	movs	r3, #0
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a26:	e04d      	b.n	8006ac4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xc4>
      auto metadata = model->metadata()->Get(i);
 8006a28:	68b8      	ldr	r0, [r7, #8]
 8006a2a:	f7ff fd5b 	bl	80064e4 <_ZNK6tflite5Model8metadataEv>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 fade 	bl	8007ff4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 8006a38:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8006a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a3c:	f7ff fd0b 	bl	8006456 <_ZNK6tflite8Metadata4nameEv>
 8006a40:	4603      	mov	r3, r0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fe4e 	bl	80056e4 <_ZNK11flatbuffers6String5c_strEv>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2217      	movs	r2, #23
 8006a4c:	4928      	ldr	r1, [pc, #160]	; (8006af0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f005 fd4a 	bl	800c4e8 <strncmp>
 8006a54:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	bf0c      	ite	eq
 8006a5a:	2301      	moveq	r3, #1
 8006a5c:	2300      	movne	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d02c      	beq.n	8006abe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xbe>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 8006a64:	68b8      	ldr	r0, [r7, #8]
 8006a66:	f7ff fd2f 	bl	80064c8 <_ZNK6tflite5Model7buffersEv>
 8006a6a:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 8006a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6e:	f7ff fd00 	bl	8006472 <_ZNK6tflite8Metadata6bufferEv>
 8006a72:	4603      	mov	r3, r0
 8006a74:	4619      	mov	r1, r3
 8006a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a78:	f001 faf0 	bl	800805c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8006a7c:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8006a7e:	6a38      	ldr	r0, [r7, #32]
 8006a80:	f7ff fcdb 	bl	800643a <_ZNK6tflite6Buffer4dataEv>
 8006a84:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 8006a86:	69f8      	ldr	r0, [r7, #28]
 8006a88:	f001 faf6 	bl	8008078 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8006a8c:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	3308      	adds	r3, #8
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d009      	beq.n	8006abe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xbe>
          TF_LITE_REPORT_ERROR(reporter_,
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	490f      	ldr	r1, [pc, #60]	; (8006af4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 8006ab6:	f7fe f835 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e013      	b.n	8006ae6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8006abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac4:	68b8      	ldr	r0, [r7, #8]
 8006ac6:	f7ff fd0d 	bl	80064e4 <_ZNK6tflite5Model8metadataEv>
 8006aca:	4603      	mov	r3, r0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 fa83 	bl	8007fd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	bf34      	ite	cc
 8006ada:	2301      	movcc	r3, #1
 8006adc:	2300      	movcs	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1a1      	bne.n	8006a28 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x28>
        }
      }
    }
  }
  return kTfLiteOk;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3730      	adds	r7, #48	; 0x30
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	08011c3c 	.word	0x08011c3c
 8006af4:	0800fc08 	.word	0x0800fc08

08006af8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferHandle* buffer_handles) {
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	e02d      	b.n	8006b66 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x6e>
    AllocationInfo* current = &info_[i];
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6919      	ldr	r1, [r3, #16]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4613      	mov	r3, r2
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	4413      	add	r3, r2
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	440b      	add	r3, r1
 8006b1a:	613b      	str	r3, [r7, #16]
    internal::ScratchBufferHandle* handle =
        &(buffer_handles[i - tensor_count_]);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	4613      	mov	r3, r2
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	461a      	mov	r2, r3
    internal::ScratchBufferHandle* handle =
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	4413      	add	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	605a      	str	r2, [r3, #4]
    current->bytes = handle->bytes;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	601a      	str	r2, [r3, #0]
    current->first_created = handle->node_idx;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	609a      	str	r2, [r3, #8]
    current->last_used = handle->node_idx;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	60da      	str	r2, [r3, #12]
    current->needs_allocating = true;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2201      	movs	r2, #1
 8006b56:	751a      	strb	r2, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5e:	611a      	str	r2, [r3, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3301      	adds	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d3c9      	bcc.n	8006b0a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8006b84:	b590      	push	{r4, r7, lr}
 8006b86:	b08b      	sub	sp, #44	; 0x2c
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8006b92:	2300      	movs	r3, #0
 8006b94:	61fb      	str	r3, [r7, #28]
 8006b96:	e046      	b.n	8006c26 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
    const AllocationInfo* current = &allocation_info[i];
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4413      	add	r3, r2
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	7d1b      	ldrb	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d036      	beq.n	8006c20 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x9c>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2110      	movs	r1, #16
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff fa98 	bl	80060ee <_ZN6tflite11AlignSizeUpEjj>
 8006bbe:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc8:	d114      	bne.n	8006bf4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x70>
        TF_LITE_ENSURE_STATUS(
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	681c      	ldr	r4, [r3, #0]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	6899      	ldr	r1, [r3, #8]
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	460b      	mov	r3, r1
 8006be0:	68f9      	ldr	r1, [r7, #12]
 8006be2:	68b8      	ldr	r0, [r7, #8]
 8006be4:	47a0      	blx	r4
 8006be6:	4603      	mov	r3, r0
 8006be8:	74bb      	strb	r3, [r7, #18]
 8006bea:	7cbb      	ldrb	r3, [r7, #18]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d017      	beq.n	8006c20 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x9c>
 8006bf0:	7cbb      	ldrb	r3, [r7, #18]
 8006bf2:	e01d      	b.n	8006c30 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 8006bf4:	6979      	ldr	r1, [r7, #20]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	6898      	ldr	r0, [r3, #8]
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	6912      	ldr	r2, [r2, #16]
 8006c02:	9201      	str	r2, [sp, #4]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	4603      	mov	r3, r0
 8006c08:	460a      	mov	r2, r1
 8006c0a:	68f9      	ldr	r1, [r7, #12]
 8006c0c:	68b8      	ldr	r0, [r7, #8]
 8006c0e:	f004 f9b3 	bl	800af78 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 8006c12:	4603      	mov	r3, r0
 8006c14:	74fb      	strb	r3, [r7, #19]
 8006c16:	7cfb      	ldrb	r3, [r7, #19]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x9c>
 8006c1c:	7cfb      	ldrb	r3, [r7, #19]
 8006c1e:	e007      	b.n	8006c30 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	3301      	adds	r3, #1
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d3b4      	bcc.n	8006b98 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x14>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3724      	adds	r7, #36	; 0x24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd90      	pop	{r4, r7, pc}

08006c38 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b08b      	sub	sp, #44	; 0x2c
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	623b      	str	r3, [r7, #32]
 8006c4e:	e02d      	b.n	8006cac <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
    const AllocationInfo* current = &allocation_info[i];
 8006c50:	6a3a      	ldr	r2, [r7, #32]
 8006c52:	4613      	mov	r3, r2
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	4413      	add	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	4413      	add	r3, r2
 8006c60:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	7d1b      	ldrb	r3, [r3, #20]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d01d      	beq.n	8006ca6 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x6e>
      int offset = -1;
 8006c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6e:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3314      	adds	r3, #20
 8006c76:	681c      	ldr	r4, [r3, #0]
 8006c78:	f107 0314 	add.w	r3, r7, #20
 8006c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	68b8      	ldr	r0, [r7, #8]
 8006c82:	47a0      	blx	r4
 8006c84:	4603      	mov	r3, r0
 8006c86:	76fb      	strb	r3, [r7, #27]
 8006c88:	7efb      	ldrb	r3, [r7, #27]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x5a>
 8006c8e:	7efb      	ldrb	r3, [r7, #27]
 8006c90:	e011      	b.n	8006cb6 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	4619      	mov	r1, r3
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	623b      	str	r3, [r7, #32]
 8006cac:	6a3a      	ldr	r2, [r7, #32]
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d3cd      	bcc.n	8006c50 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
    }
  }
  return kTfLiteOk;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	372c      	adds	r7, #44	; 0x2c
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd90      	pop	{r4, r7, pc}
	...

08006cc0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
}

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 8006cc0:	b5b0      	push	{r4, r5, r7, lr}
 8006cc2:	b090      	sub	sp, #64	; 0x40
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
  *result = {};
 8006cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	2340      	movs	r3, #64	; 0x40
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	f005 fbfe 	bl	800c4d8 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8006cdc:	68b8      	ldr	r0, [r7, #8]
 8006cde:	f7ff f9c7 	bl	8006070 <_ZNK6tflite6Tensor4typeEv>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	4619      	mov	r1, r3
 8006cec:	f7fe f84e 	bl	8004d8c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cf6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x44>
 8006cfe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d02:	e125      	b.n	8006f50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 8006d04:	68b8      	ldr	r0, [r7, #8]
 8006d06:	f7ff fb13 	bl	8006330 <_ZNK6tflite6Tensor11is_variableEv>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  // in memory. We'll check to see if there's a serialized buffer (pretty much
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 8006d14:	68b8      	ldr	r0, [r7, #8]
 8006d16:	f7ff faee 	bl	80062f6 <_ZNK6tflite6Tensor6bufferEv>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 f99c 	bl	800805c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8006d24:	6378      	str	r0, [r7, #52]	; 0x34
 8006d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01a      	beq.n	8006d62 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 8006d2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006d2e:	f7ff fb84 	bl	800643a <_ZNK6tflite6Buffer4dataEv>
 8006d32:	6338      	str	r0, [r7, #48]	; 0x30
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d013      	beq.n	8006d62 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 8006d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d3c:	f000 ffce 	bl	8007cdc <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	bf14      	ite	ne
 8006d46:	2301      	movne	r3, #1
 8006d48:	2300      	moveq	r3, #0
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d008      	beq.n	8006d62 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        result->data.data =
            const_cast<void*>(static_cast<const void*>(array->data()));
 8006d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d52:	f001 f991 	bl	8008078 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8006d56:	4602      	mov	r2, r0
        result->data.data =
 8006d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d5a:	605a      	str	r2, [r3, #4]
        // We set the data from a serialized buffer, so record tha.
        result->allocation_type = kTfLiteMmapRo;
 8006d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d5e:	2201      	movs	r2, #1
 8006d60:	751a      	strb	r2, [r3, #20]
    // it less ambiguous.
  }

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8006d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d102      	bne.n	8006d70 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb0>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8006d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8006d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d72:	f103 0118 	add.w	r1, r3, #24
 8006d76:	f107 0214 	add.w	r2, r7, #20
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68b8      	ldr	r0, [r7, #8]
 8006d7e:	f7ff fa21 	bl	80061c4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006d88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd6>
 8006d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d94:	e0dc      	b.n	8006f50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 8006d96:	68b8      	ldr	r0, [r7, #8]
 8006d98:	f7ff f95c 	bl	8006054 <_ZNK6tflite6Tensor5shapeEv>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bf0c      	ite	eq
 8006da2:	2301      	moveq	r3, #1
 8006da4:	2300      	movne	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf4>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8006dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dae:	4a6a      	ldr	r2, [pc, #424]	; (8006f58 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x298>)
 8006db0:	609a      	str	r2, [r3, #8]
 8006db2:	e013      	b.n	8006ddc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x11c>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006db4:	68b8      	ldr	r0, [r7, #8]
 8006db6:	f7ff f94d 	bl	8006054 <_ZNK6tflite6Tensor5shapeEv>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f001 f964 	bl	8008090 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006dce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x11c>
 8006dd6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006dda:	e0b9      	b.n	8006f50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 8006ddc:	68b8      	ldr	r0, [r7, #8]
 8006dde:	f7ff fa99 	bl	8006314 <_ZNK6tflite6Tensor12quantizationEv>
 8006de2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d021      	beq.n	8006e2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
  if (src_quantization && src_quantization->scale() &&
 8006dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dec:	f7ff fa58 	bl	80062a0 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d01b      	beq.n	8006e2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      (src_quantization->scale()->size() > 0) &&
 8006df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006df8:	f7ff fa52 	bl	80062a0 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 ff7a 	bl	8007cf8 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8006e04:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d011      	beq.n	8006e2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      src_quantization->zero_point() &&
 8006e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e0c:	f7ff fa56 	bl	80062bc <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006e10:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      (src_quantization->zero_point()->size() > 0)) {
 8006e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e18:	f7ff fa50 	bl	80062bc <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 ffa0 	bl	8007d64 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8006e24:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
 8006e2e:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 808c 	beq.w	8006f4e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x28e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 8006e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e38:	f7ff fa32 	bl	80062a0 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2100      	movs	r1, #0
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 ff67 	bl	8007d14 <_ZNK11flatbuffers6VectorIfE3GetEm>
 8006e46:	eef0 7a40 	vmov.f32	s15, s0
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4c:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8006e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e52:	f7ff fa33 	bl	80062bc <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 ff90 	bl	8007d80 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
    result->params.zero_point =
 8006e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e66:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8006e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e6a:	f7ff fa19 	bl	80062a0 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 ff41 	bl	8007cf8 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8006e76:	4603      	mov	r3, r0
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
    TfLiteAffineQuantization* quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            allocator->AllocateFromTail(sizeof(TfLiteAffineQuantization),
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	330c      	adds	r3, #12
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2204      	movs	r2, #4
 8006e84:	210c      	movs	r1, #12
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	4798      	blx	r3
 8006e8a:	6238      	str	r0, [r7, #32]
                                        alignof(TfLiteAffineQuantization)));
    if (quantization == nullptr) {
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d105      	bne.n	8006e9e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1de>
      TF_LITE_REPORT_ERROR(error_reporter,
 8006e92:	4932      	ldr	r1, [pc, #200]	; (8006f5c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29c>)
 8006e94:	6838      	ldr	r0, [r7, #0]
 8006e96:	f7fd fe45 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e058      	b.n	8006f50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>

    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8006e9e:	68fd      	ldr	r5, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	681c      	ldr	r4, [r3, #0]
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
 8006ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eaa:	f7fd fdd0 	bl	8004a4e <TfLiteIntArrayGetSizeInBytes>
 8006eae:	4603      	mov	r3, r0
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47a0      	blx	r4
 8006eb8:	4602      	mov	r2, r0
    quantization->zero_point =
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	605a      	str	r2, [r3, #4]
    if (quantization->zero_point == nullptr) {
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d105      	bne.n	8006ed2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x212>
      TF_LITE_REPORT_ERROR(error_reporter,
 8006ec6:	4926      	ldr	r1, [pc, #152]	; (8006f60 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>)
 8006ec8:	6838      	ldr	r0, [r7, #0]
 8006eca:	f7fd fe2b 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e03e      	b.n	8006f50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed4:	f7ff f9e4 	bl	80062a0 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f001 f8ef 	bl	80080c2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	77fb      	strb	r3, [r7, #31]
 8006ee8:	7ffb      	ldrb	r3, [r7, #31]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
 8006eee:	7ffb      	ldrb	r3, [r7, #31]
 8006ef0:	e02e      	b.n	8006f50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef8:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	3304      	adds	r3, #4
 8006f00:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < channels; i++) {
 8006f02:	2300      	movs	r3, #0
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f06:	e011      	b.n	8006f2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26c>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8006f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f0a:	f7ff f9d7 	bl	80062bc <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f12:	4619      	mov	r1, r3
 8006f14:	4610      	mov	r0, r2
 8006f16:	f000 ff33 	bl	8007d80 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8006f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	4413      	add	r3, r2
 8006f22:	4602      	mov	r2, r0
 8006f24:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8006f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f28:	3301      	adds	r3, #1
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	429a      	cmp	r2, r3
 8006f32:	dbe9      	blt.n	8006f08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8006f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f36:	f7ff f9cf 	bl	80062d8 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8006f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f4a:	6a3a      	ldr	r2, [r7, #32]
 8006f4c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3740      	adds	r7, #64	; 0x40
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bdb0      	pop	{r4, r5, r7, pc}
 8006f58:	08011c54 	.word	0x08011c54
 8006f5c:	0800fcfc 	.word	0x0800fcfc
 8006f60:	0800fd2c 	.word	0x0800fd2c

08006f64 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 8006f70:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	601a      	str	r2, [r3, #0]
    : memory_allocator_(memory_allocator),
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	605a      	str	r2, [r3, #4]
      error_reporter_(error_reporter),
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	609a      	str	r2, [r3, #8]
      model_is_allocating_(false) {}
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	731a      	strb	r2, [r3, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	611a      	str	r2, [r3, #16]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	615a      	str	r2, [r3, #20]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	08011c78 	.word	0x08011c78

08006fa8 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	4a04      	ldr	r2, [pc, #16]	; (8006fc4 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	08011c78 	.word	0x08011c78

08006fc8 <_ZN6tflite14MicroAllocatorD0Ev>:
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff ffe9 	bl	8006fa8 <_ZN6tflite14MicroAllocatorD1Ev>
 8006fd6:	2118      	movs	r1, #24
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f004 fa57 	bl	800b48c <_ZdlPvj>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8006ff4:	2110      	movs	r1, #16
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff f84a 	bl	8006090 <_ZN6tflite14AlignPointerUpEPhj>
 8006ffc:	6178      	str	r0, [r7, #20]
  if (aligned_arena != tensor_arena) {
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	429a      	cmp	r2, r3
 8007004:	d007      	beq.n	8007016 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x2e>
    TF_LITE_REPORT_ERROR(
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	461a      	mov	r2, r3
 800700e:	490c      	ldr	r1, [pc, #48]	; (8007040 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x58>)
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7fd fd87 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "%d bytes lost due to alignment. To avoid this loss, please make sure "
        "the tensor_arena is 16 bytes aligned.",
        aligned_arena - tensor_arena);
  }
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	441a      	add	r2, r3
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	6979      	ldr	r1, [r7, #20]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f002 faa4 	bl	8009574 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 800702c:	4603      	mov	r3, r0
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	4618      	mov	r0, r3
 8007032:	f000 f807 	bl	8007044 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8007036:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	0800fd5c 	.word	0x0800fd5c

08007044 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8007044:	b590      	push	{r4, r7, lr}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8007054:	f004 faee 	bl	800b634 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 800705e:	f004 fae9 	bl	800b634 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2204      	movs	r2, #4
 800706c:	2118      	movs	r1, #24
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
 8007072:	60f8      	str	r0, [r7, #12]
      sizeof(MicroAllocator), alignof(MicroAllocator));
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4619      	mov	r1, r3
 8007078:	2018      	movs	r0, #24
 800707a:	f7fd fd86 	bl	8004b8a <_ZnwjPv>
 800707e:	4604      	mov	r4, r0
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	4620      	mov	r0, r4
 8007086:	f7ff ff6d 	bl	8006f64 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800708a:	60bc      	str	r4, [r7, #8]
  return allocator;
 800708c:	68bb      	ldr	r3, [r7, #8]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	bd90      	pop	{r4, r7, pc}
	...

08007098 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::StartModelAllocation(
    const Model* model, TfLiteContext* context,
    const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations) {
 8007098:	b590      	push	{r4, r7, lr}
 800709a:	b089      	sub	sp, #36	; 0x24
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x18>
 80070ac:	f004 fac2 	bl	800b634 <abort>
  TFLITE_DCHECK(context != nullptr);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x22>
 80070b6:	f004 fabd 	bl	800b634 <abort>

  if (model_is_allocating_) {
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	7b1b      	ldrb	r3, [r3, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d007      	beq.n	80070d2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	4923      	ldr	r1, [pc, #140]	; (8007154 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xbc>)
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fd fd2b 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return kTfLiteError;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e03c      	b.n	800714c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fbe1 	bl	800789c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 80070da:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x4e>
 80070e2:	f004 faa7 	bl	800b634 <abort>
  model_is_allocating_ = true;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	731a      	strb	r2, [r3, #12]

  TF_LITE_ENSURE_STATUS(
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 fba6 	bl	8007844 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>
 80070f8:	4603      	mov	r3, r0
 80070fa:	74fb      	strb	r3, [r7, #19]
 80070fc:	7cfb      	ldrb	r3, [r7, #19]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x6e>
 8007102:	7cfb      	ldrb	r3, [r7, #19]
 8007104:	e022      	b.n	800714c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
      InitGraphAndContextTensorData(model, context, subgraph));
  TF_LITE_ENSURE_STATUS(
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3310      	adds	r3, #16
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007110:	6979      	ldr	r1, [r7, #20]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	4798      	blx	r3
 8007116:	4603      	mov	r3, r0
 8007118:	74bb      	strb	r3, [r7, #18]
 800711a:	7cbb      	ldrb	r3, [r7, #18]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x8c>
 8007120:	7cbb      	ldrb	r3, [r7, #18]
 8007122:	e013      	b.n	800714c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
      AllocateNodeAndRegistrations(subgraph, node_and_registrations));
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3314      	adds	r3, #20
 800712a:	681c      	ldr	r4, [r3, #0]
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	47a0      	blx	r4
 800713c:	4603      	mov	r3, r0
 800713e:	747b      	strb	r3, [r7, #17]
 8007140:	7c7b      	ldrb	r3, [r7, #17]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb2>
 8007146:	7c7b      	ldrb	r3, [r7, #17]
 8007148:	e000      	b.n	800714c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
      model, subgraph, op_resolver, *node_and_registrations));

  return kTfLiteOk;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	371c      	adds	r7, #28
 8007150:	46bd      	mov	sp, r7
 8007152:	bd90      	pop	{r4, r7, pc}
 8007154:	0800fdc8 	.word	0x0800fdc8

08007158 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:

TfLiteStatus MicroAllocator::FinishModelAllocation(const Model* model,
                                                   TfLiteContext* context) {
 8007158:	b590      	push	{r4, r7, lr}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  if (!model_is_allocating_) {
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	7b1b      	ldrb	r3, [r3, #12]
 8007168:	f083 0301 	eor.w	r3, r3, #1
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d007      	beq.n	8007182 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x2a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	491b      	ldr	r1, [pc, #108]	; (80071e4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x8c>)
 8007178:	4618      	mov	r0, r3
 800717a:	f7fd fcd3 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 800717e:	2301      	movs	r3, #1
 8007180:	e02c      	b.n	80071dc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8007182:	68b9      	ldr	r1, [r7, #8]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 fb89 	bl	800789c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800718a:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x3e>
 8007192:	f004 fa4f 	bl	800b634 <abort>

  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	331c      	adds	r3, #28
 800719c:	681c      	ldr	r4, [r3, #0]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	47a0      	blx	r4
 80071a8:	4603      	mov	r3, r0
 80071aa:	74fb      	strb	r3, [r7, #19]
 80071ac:	7cfb      	ldrb	r3, [r7, #19]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x5e>
 80071b2:	7cfb      	ldrb	r3, [r7, #19]
 80071b4:	e012      	b.n	80071dc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3318      	adds	r3, #24
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	6879      	ldr	r1, [r7, #4]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	4798      	blx	r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	74bb      	strb	r3, [r7, #18]
 80071ca:	7cbb      	ldrb	r3, [r7, #18]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x7c>
 80071d0:	7cbb      	ldrb	r3, [r7, #18]
 80071d2:	e003      	b.n	80071dc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>

  model_is_allocating_ = false;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	731a      	strb	r2, [r3, #12]
  return kTfLiteOk;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd90      	pop	{r4, r7, pc}
 80071e4:	0800fe20 	.word	0x0800fe20

080071e8 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:

TfLiteStatus MicroAllocator::AllocatePersistentBuffer(size_t bytes,
                                                      void** ptr) {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6858      	ldr	r0, [r3, #4]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	330c      	adds	r3, #12
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2210      	movs	r2, #16
 8007204:	68b9      	ldr	r1, [r7, #8]
 8007206:	4798      	blx	r3
 8007208:	6178      	str	r0, [r7, #20]
  if (data == nullptr) {
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d108      	bne.n	8007222 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	4907      	ldr	r1, [pc, #28]	; (8007234 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x4c>)
 8007218:	4618      	mov	r0, r3
 800721a:	f7fd fc83 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate persistent buffer of size %d",
                         bytes);
    return kTfLiteError;
 800721e:	2301      	movs	r3, #1
 8007220:	e003      	b.n	800722a <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x42>
  }
  (*ptr) = data;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	0800fe6c 	.word	0x0800fe6c

08007238 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
 8007238:	b590      	push	{r4, r7, lr}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
  // A sanity check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691c      	ldr	r4, [r3, #16]
          memory_allocator_->GetTail()) {
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	4618      	mov	r0, r3
 8007258:	f002 fa50 	bl	80096fc <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 800725c:	4603      	mov	r3, r0
  if (scratch_buffer_handles_ != nullptr &&
 800725e:	429c      	cmp	r4, r3
 8007260:	d001      	beq.n	8007266 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x30>
 8007266:	2300      	movs	r3, #0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d007      	beq.n	800727c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x44>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	491d      	ldr	r1, [pc, #116]	; (80072e8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb0>)
 8007272:	4618      	mov	r0, r3
 8007274:	f7fd fc56 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Internal error: AllocateFromTail can not be called "
                         "between two RequestScratchBufferInArena calls.");
    return kTfLiteError;
 8007278:	2301      	movs	r3, #1
 800727a:	e030      	b.n	80072de <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }

  internal::ScratchBufferHandle* handle =
      reinterpret_cast<internal::ScratchBufferHandle*>(
          memory_allocator_->AllocateFromTail(
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6858      	ldr	r0, [r3, #4]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2204      	movs	r2, #4
 800728c:	210c      	movs	r1, #12
 800728e:	4798      	blx	r3
 8007290:	6178      	str	r0, [r7, #20]
              sizeof(internal::ScratchBufferHandle),
              alignof(internal::ScratchBufferHandle)));
  if (handle == nullptr) {
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d108      	bne.n	80072aa <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x72>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	4913      	ldr	r1, [pc, #76]	; (80072ec <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb4>)
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fd fc3f 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e019      	b.n	80072de <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }
  *handle = {};
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	461a      	mov	r2, r3
 80072ae:	2300      	movs	r3, #0
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	6053      	str	r3, [r2, #4]
 80072b4:	6093      	str	r3, [r2, #8]
  handle->bytes = bytes;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	605a      	str	r2, [r3, #4]
  handle->node_idx = node_id;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	609a      	str	r2, [r3, #8]
  *buffer_idx = scratch_buffer_count_;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	461a      	mov	r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	601a      	str	r2, [r3, #0]
  scratch_buffer_count_ += 1;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	615a      	str	r2, [r3, #20]
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	611a      	str	r2, [r3, #16]
  return kTfLiteOk;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd90      	pop	{r4, r7, pc}
 80072e6:	bf00      	nop
 80072e8:	0800fe9c 	.word	0x0800fe9c
 80072ec:	0800ff00 	.word	0x0800ff00

080072f0 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695a      	ldr	r2, [r3, #20]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d809      	bhi.n	8007318 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6898      	ldr	r0, [r3, #8]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	490b      	ldr	r1, [pc, #44]	; (800733c <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x4c>)
 8007310:	f7fd fc08 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
 8007314:	2300      	movs	r3, #0
 8007316:	e00c      	b.n	8007332 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x42>
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6919      	ldr	r1, [r3, #16]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	695a      	ldr	r2, [r3, #20]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	1ad2      	subs	r2, r2, r3
 8007324:	4613      	mov	r3, r2
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	3b0c      	subs	r3, #12
 800732e:	440b      	add	r3, r1
 8007330:	681b      	ldr	r3, [r3, #0]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	0800ff38 	.word	0x0800ff38

08007340 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateTfLiteTensorArray(
    TfLiteContext* context, const SubGraph* subgraph) {
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  context->tensors_size = subgraph->tensors()->size();
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff f83c 	bl	80063ca <_ZNK6tflite8SubGraph7tensorsEv>
 8007352:	4603      	mov	r3, r0
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fd3b 	bl	8007dd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800735a:	4602      	mov	r2, r0
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	601a      	str	r2, [r3, #0]
  context->tensors =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6858      	ldr	r0, [r3, #4]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	330c      	adds	r3, #12
 800736c:	681b      	ldr	r3, [r3, #0]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	6812      	ldr	r2, [r2, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8007372:	0191      	lsls	r1, r2, #6
 8007374:	2204      	movs	r2, #4
 8007376:	4798      	blx	r3
 8007378:	4602      	mov	r2, r0
  context->tensors =
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	609a      	str	r2, [r3, #8]
  if (context->tensors == nullptr) {
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x5c>
    TF_LITE_REPORT_ERROR(
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6898      	ldr	r0, [r3, #8]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	019b      	lsls	r3, r3, #6
 8007390:	461a      	mov	r2, r3
 8007392:	4905      	ldr	r1, [pc, #20]	; (80073a8 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x68>)
 8007394:	f7fd fbc6 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->tensors, %d bytes required",
        sizeof(TfLiteTensor) * context->tensors_size);
    return kTfLiteError;
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x5e>
  }
  return kTfLiteOk;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	0800ff64 	.word	0x0800ff64

080073ac <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorArrayFromFlatbuffer(
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
 80073ac:	b5b0      	push	{r4, r5, r7, lr}
 80073ae:	b088      	sub	sp, #32
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
  // Initialize tensors in context_ using the flatbuffer for quantization data.
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]
 80073be:	e02c      	b.n	800741a <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6e>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 80073c4:	6838      	ldr	r0, [r7, #0]
 80073c6:	f7ff f800 	bl	80063ca <_ZNK6tflite8SubGraph7tensorsEv>
 80073ca:	4603      	mov	r3, r0
 80073cc:	6979      	ldr	r1, [r7, #20]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fd0c 	bl	8007dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80073d4:	4605      	mov	r5, r0
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 80073d6:	68b8      	ldr	r0, [r7, #8]
 80073d8:	f7ff f876 	bl	80064c8 <_ZNK6tflite5Model7buffersEv>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &context->tensors[i]);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	019b      	lsls	r3, r3, #6
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 80073e8:	4413      	add	r3, r2
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	460b      	mov	r3, r1
 80073ee:	4602      	mov	r2, r0
 80073f0:	4629      	mov	r1, r5
 80073f2:	4620      	mov	r0, r4
 80073f4:	f7ff fc64 	bl	8006cc0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 80073f8:	4603      	mov	r3, r0
 80073fa:	74fb      	strb	r3, [r7, #19]
    if (status != kTfLiteOk) {
 80073fc:	7cfb      	ldrb	r3, [r7, #19]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d008      	beq.n	8007414 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x68>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	490e      	ldr	r1, [pc, #56]	; (8007444 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x98>)
 800740a:	4618      	mov	r0, r3
 800740c:	f7fd fb8a 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 8007410:	2301      	movs	r3, #1
 8007412:	e013      	b.n	800743c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x90>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	3301      	adds	r3, #1
 8007418:	617b      	str	r3, [r7, #20]
 800741a:	6838      	ldr	r0, [r7, #0]
 800741c:	f7fe ffd5 	bl	80063ca <_ZNK6tflite8SubGraph7tensorsEv>
 8007420:	4603      	mov	r3, r0
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fcd4 	bl	8007dd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007428:	4602      	mov	r2, r0
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	4293      	cmp	r3, r2
 800742e:	bf34      	ite	cc
 8007430:	2301      	movcc	r3, #1
 8007432:	2300      	movcs	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1c2      	bne.n	80073c0 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14>
    }
  }
  return kTfLiteOk;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bdb0      	pop	{r4, r5, r7, pc}
 8007444:	0800ffa8 	.word	0x0800ffa8

08007448 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
 8007448:	b5b0      	push	{r4, r5, r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	685d      	ldr	r5, [r3, #4]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	330c      	adds	r3, #12
 8007460:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 8007462:	68b8      	ldr	r0, [r7, #8]
 8007464:	f7fe ffdb 	bl	800641e <_ZNK6tflite8SubGraph9operatorsEv>
 8007468:	4603      	mov	r3, r0
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fce4 	bl	8007e38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8007470:	4602      	mov	r2, r0
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 800747a:	2204      	movs	r2, #4
 800747c:	4619      	mov	r1, r3
 800747e:	4628      	mov	r0, r5
 8007480:	47a0      	blx	r4
 8007482:	6178      	str	r0, [r7, #20]
          alignof(NodeAndRegistration)));
  if (output == nullptr) {
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d107      	bne.n	800749a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x52>
    TF_LITE_REPORT_ERROR(
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	4907      	ldr	r1, [pc, #28]	; (80074ac <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x64>)
 8007490:	4618      	mov	r0, r3
 8007492:	f7fd fb47 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 8007496:	2301      	movs	r3, #1
 8007498:	e003      	b.n	80074a2 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x5a>
  }
  *node_and_registrations = output;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bdb0      	pop	{r4, r5, r7, pc}
 80074aa:	bf00      	nop
 80074ac:	0800ffc8 	.word	0x0800ffc8

080074b0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const Model* model, const SubGraph* subgraph,
    const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 80074b0:	b5b0      	push	{r4, r5, r7, lr}
 80074b2:	b098      	sub	sp, #96	; 0x60
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 80074be:	2300      	movs	r3, #0
 80074c0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  auto* opcodes = model->operator_codes();
 80074c4:	68b8      	ldr	r0, [r7, #8]
 80074c6:	f7fe ffe3 	bl	8006490 <_ZNK6tflite5Model14operator_codesEv>
 80074ca:	6478      	str	r0, [r7, #68]	; 0x44
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	f107 031c 	add.w	r3, r7, #28
 80074d4:	4611      	mov	r1, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7ff f842 	bl	8006560 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 80074dc:	2300      	movs	r3, #0
 80074de:	657b      	str	r3, [r7, #84]	; 0x54
 80074e0:	e12e      	b.n	8007740 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x290>
    const auto* op = subgraph->operators()->Get(i);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fe ff9b 	bl	800641e <_ZNK6tflite8SubGraph9operatorsEv>
 80074e8:	4603      	mov	r3, r0
 80074ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 fcb1 	bl	8007e54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 80074f2:	6438      	str	r0, [r7, #64]	; 0x40
    const size_t index = op->opcode_index();
 80074f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80074f6:	f7fe ff2f 	bl	8006358 <_ZNK6tflite8Operator12opcode_indexEv>
 80074fa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (index >= opcodes->size()) {
 80074fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80074fe:	f000 fccf 	bl	8007ea0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8007502:	4602      	mov	r2, r0
 8007504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007506:	4293      	cmp	r3, r2
 8007508:	bf2c      	ite	cs
 800750a:	2301      	movcs	r3, #1
 800750c:	2300      	movcc	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d008      	beq.n	8007526 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x76>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800751a:	4997      	ldr	r1, [pc, #604]	; (8007778 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c8>)
 800751c:	4618      	mov	r0, r3
 800751e:	f7fd fb01 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 8007522:	2401      	movs	r4, #1
 8007524:	e11e      	b.n	8007764 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
    }
    auto* opcode = (*opcodes)[index];
 8007526:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007528:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800752a:	f000 fde3 	bl	80080f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 800752e:	63b8      	str	r0, [r7, #56]	; 0x38
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 8007536:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	461a      	mov	r2, r3
 8007542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007544:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8007546:	3324      	adds	r3, #36	; 0x24
 8007548:	4602      	mov	r2, r0
 800754a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800754c:	f7fe f936 	bl	80057bc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 8007550:	4603      	mov	r3, r0
 8007552:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (status != kTfLiteOk) {
 8007556:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800755a:	2b00      	cmp	r3, #0
 800755c:	d011      	beq.n	8007582 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xd2>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	689c      	ldr	r4, [r3, #8]
 8007562:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007564:	f7fe f8fc 	bl	8005760 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8007568:	4603      	mov	r3, r0
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe f8d2 	bl	8005714 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8007570:	4603      	mov	r3, r0
 8007572:	461a      	mov	r2, r3
 8007574:	4981      	ldr	r1, [pc, #516]	; (800777c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2cc>)
 8007576:	4620      	mov	r0, r4
 8007578:	f7fd fad4 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(opcode->builtin_code()));
      return status;
 800757c:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8007580:	e0f0      	b.n	8007764 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
    }
    const auto* registration = node_and_registrations[i].registration;
 8007582:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	461a      	mov	r2, r3
 800758e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007590:	4413      	add	r3, r2
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
    if (registration == nullptr) {
 8007596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007598:	2b00      	cmp	r3, #0
 800759a:	d108      	bne.n	80075ae <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xfe>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075a2:	4977      	ldr	r1, [pc, #476]	; (8007780 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d0>)
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fd fabd 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 80075aa:	2401      	movs	r4, #1
 80075ac:	e0da      	b.n	8007764 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 80075ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b0:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 80075b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    const char* custom_data = nullptr;
 80075b6:	2300      	movs	r3, #0
 80075b8:	653b      	str	r3, [r7, #80]	; 0x50
    size_t custom_data_size = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned char* builtin_data = nullptr;
 80075be:	2300      	movs	r3, #0
 80075c0:	61bb      	str	r3, [r7, #24]

    if (op_type == BuiltinOperator_CUSTOM) {
 80075c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	d11b      	bne.n	8007602 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x152>
      // Custom Ops may or may not have a non-null custom_options field.
      if (op->custom_options() != nullptr) {
 80075ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80075cc:	f7fe feef 	bl	80063ae <_ZNK6tflite8Operator14custom_optionsEv>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	bf14      	ite	ne
 80075d6:	2301      	movne	r3, #1
 80075d8:	2300      	moveq	r3, #0
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d05d      	beq.n	800769c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ec>
        custom_data =
            reinterpret_cast<const char*>(op->custom_options()->data());
 80075e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80075e2:	f7fe fee4 	bl	80063ae <_ZNK6tflite8Operator14custom_optionsEv>
 80075e6:	4603      	mov	r3, r0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fd45 	bl	8008078 <_ZNK11flatbuffers6VectorIhE4dataEv>
 80075ee:	6538      	str	r0, [r7, #80]	; 0x50
        custom_data_size = op->custom_options()->size();
 80075f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80075f2:	f7fe fedc 	bl	80063ae <_ZNK6tflite8Operator14custom_optionsEv>
 80075f6:	4603      	mov	r3, r0
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fb6f 	bl	8007cdc <_ZNK11flatbuffers6VectorIhE4sizeEv>
 80075fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007600:	e04c      	b.n	800769c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ec>
      }
    } else {
      if (op->custom_options() != nullptr) {
 8007602:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007604:	f7fe fed3 	bl	80063ae <_ZNK6tflite8Operator14custom_optionsEv>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	bf14      	ite	ne
 800760e:	2301      	movne	r3, #1
 8007610:	2300      	moveq	r3, #0
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00e      	beq.n	8007636 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x186>
        TF_LITE_REPORT_ERROR(
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689c      	ldr	r4, [r3, #8]
 800761c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007620:	4618      	mov	r0, r3
 8007622:	f7fe f877 	bl	8005714 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8007626:	4603      	mov	r3, r0
 8007628:	461a      	mov	r2, r3
 800762a:	4956      	ldr	r1, [pc, #344]	; (8007784 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
 800762c:	4620      	mov	r0, r4
 800762e:	f7fd fa79 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Unsupported behavior: found builtin operator %s with custom "
            "options.\n",
            EnumNameBuiltinOperator(op_type));
        return kTfLiteError;
 8007632:	2401      	movs	r4, #1
 8007634:	e096      	b.n	8007764 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
      }

      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3318      	adds	r3, #24
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007642:	4611      	mov	r1, r2
 8007644:	6838      	ldr	r0, [r7, #0]
 8007646:	4798      	blx	r3
 8007648:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (parser == nullptr) {
 800764a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10e      	bne.n	800766e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1be>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689c      	ldr	r4, [r3, #8]
 8007654:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe f85b 	bl	8005714 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800765e:	4603      	mov	r3, r0
 8007660:	461a      	mov	r2, r3
 8007662:	4949      	ldr	r1, [pc, #292]	; (8007788 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d8>)
 8007664:	4620      	mov	r0, r4
 8007666:	f7fd fa5d 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             EnumNameBuiltinOperator(op_type));

        return kTfLiteError;
 800766a:	2401      	movs	r4, #1
 800766c:	e07a      	b.n	8007764 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
      }
      TF_LITE_ENSURE_STATUS(parser(op, op_type, error_reporter_,
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	f107 001c 	add.w	r0, r7, #28
 8007676:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 800767a:	f107 0318 	add.w	r3, r7, #24
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007682:	4603      	mov	r3, r0
 8007684:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007686:	47a0      	blx	r4
 8007688:	4603      	mov	r3, r0
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800768e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ec>
 8007696:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 800769a:	e063      	b.n	8007764 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
                                   &builtin_data_allocator,
                                   (void**)(&builtin_data)));
    }

    TfLiteIntArray* inputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	685c      	ldr	r4, [r3, #4]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689d      	ldr	r5, [r3, #8]
 80076a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80076a6:	f7fe fe66 	bl	8006376 <_ZNK6tflite8Operator6inputsEv>
 80076aa:	4602      	mov	r2, r0
 80076ac:	f107 0314 	add.w	r3, r7, #20
 80076b0:	4629      	mov	r1, r5
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 fcec 	bl	8008090 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x21c>
 80076c6:	f897 402a 	ldrb.w	r4, [r7, #42]	; 0x2a
 80076ca:	e04b      	b.n	8007764 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
        memory_allocator_, error_reporter_, op->inputs(), &inputs_array));

    TfLiteIntArray* outputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	685c      	ldr	r4, [r3, #4]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689d      	ldr	r5, [r3, #8]
 80076d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80076d6:	f7fe fe5c 	bl	8006392 <_ZNK6tflite8Operator7outputsEv>
 80076da:	4602      	mov	r2, r0
 80076dc:	f107 0310 	add.w	r3, r7, #16
 80076e0:	4629      	mov	r1, r5
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 fcd4 	bl	8008090 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80076ee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x24c>
 80076f6:	f897 4029 	ldrb.w	r4, [r7, #41]	; 0x29
 80076fa:	e033      	b.n	8007764 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
        memory_allocator_, error_reporter_, op->outputs(), &outputs_array));

    TfLiteNode* node = &(node_and_registrations[i].node);
 80076fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	461a      	mov	r2, r3
 8007708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800770a:	4413      	add	r3, r2
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
    *node = {};
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	4618      	mov	r0, r3
 8007712:	2324      	movs	r3, #36	; 0x24
 8007714:	461a      	mov	r2, r3
 8007716:	2100      	movs	r1, #0
 8007718:	f004 fede 	bl	800c4d8 <memset>
    node->inputs = inputs_array;
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007732:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 8007734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 800773a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800773c:	3301      	adds	r3, #1
 800773e:	657b      	str	r3, [r7, #84]	; 0x54
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7fe fe6c 	bl	800641e <_ZNK6tflite8SubGraph9operatorsEv>
 8007746:	4603      	mov	r3, r0
 8007748:	4618      	mov	r0, r3
 800774a:	f000 fb75 	bl	8007e38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800774e:	4602      	mov	r2, r0
 8007750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007752:	4293      	cmp	r3, r2
 8007754:	bf34      	ite	cc
 8007756:	2301      	movcc	r3, #1
 8007758:	2300      	movcs	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	f47f aec0 	bne.w	80074e2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x32>
  }

  return kTfLiteOk;
 8007762:	2400      	movs	r4, #0
}
 8007764:	f107 031c 	add.w	r3, r7, #28
 8007768:	4618      	mov	r0, r3
 800776a:	f000 ff2f 	bl	80085cc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800776e:	4623      	mov	r3, r4
 8007770:	4618      	mov	r0, r3
 8007772:	3758      	adds	r7, #88	; 0x58
 8007774:	46bd      	mov	sp, r7
 8007776:	bdb0      	pop	{r4, r5, r7, pc}
 8007778:	08010000 	.word	0x08010000
 800777c:	0801002c 	.word	0x0801002c
 8007780:	0801005c 	.word	0x0801005c
 8007784:	08010080 	.word	0x08010080
 8007788:	080100c8 	.word	0x080100c8

0800778c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::AllocateVariables(TfLiteContext* context,
                                               const SubGraph* subgraph) {
 800778c:	b5b0      	push	{r4, r5, r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < context->tensors_size; ++i) {
 8007798:	2300      	movs	r3, #0
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	e046      	b.n	800782c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xa0>
    if (subgraph->tensors()->Get(i)->is_variable()) {
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7fe fe13 	bl	80063ca <_ZNK6tflite8SubGraph7tensorsEv>
 80077a4:	4603      	mov	r3, r0
 80077a6:	6979      	ldr	r1, [r7, #20]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fb1f 	bl	8007dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80077ae:	4603      	mov	r3, r0
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fe fdbd 	bl	8006330 <_ZNK6tflite6Tensor11is_variableEv>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d02c      	beq.n	8007816 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x8a>
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6858      	ldr	r0, [r3, #4]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	330c      	adds	r3, #12
 80077c8:	681b      	ldr	r3, [r3, #0]
          context->tensors[i].bytes, kBufferAlignment);
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	6891      	ldr	r1, [r2, #8]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	0192      	lsls	r2, r2, #6
 80077d2:	440a      	add	r2, r1
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
 80077d4:	6995      	ldr	r5, [r2, #24]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	6891      	ldr	r1, [r2, #8]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	0192      	lsls	r2, r2, #6
 80077de:	188c      	adds	r4, r1, r2
 80077e0:	2210      	movs	r2, #16
 80077e2:	4629      	mov	r1, r5
 80077e4:	4798      	blx	r3
 80077e6:	4603      	mov	r3, r0
 80077e8:	6063      	str	r3, [r4, #4]
      // Allocation failure.
      if (context->tensors[i].data.data == nullptr) {
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	019b      	lsls	r3, r3, #6
 80077f2:	4413      	add	r3, r2
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10d      	bne.n	8007816 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x8a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6898      	ldr	r0, [r3, #8]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	019b      	lsls	r3, r3, #6
 8007806:	4413      	add	r3, r2
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	461a      	mov	r2, r3
 800780c:	490c      	ldr	r1, [pc, #48]	; (8007840 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xb4>)
 800780e:	f7fd f989 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             context->tensors[i].bytes);
        return kTfLiteError;
 8007812:	2301      	movs	r3, #1
 8007814:	e010      	b.n	8007838 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xac>
      }
    }
    tflite::ResetVariableTensor(&(context->tensors[i]));
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	689a      	ldr	r2, [r3, #8]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	019b      	lsls	r3, r3, #6
 800781e:	4413      	add	r3, r2
 8007820:	4618      	mov	r0, r3
 8007822:	f7fe f898 	bl	8005956 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < context->tensors_size; ++i) {
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	3301      	adds	r3, #1
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	429a      	cmp	r2, r3
 8007834:	d3b3      	bcc.n	800779e <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x12>
  }

  return kTfLiteOk;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bdb0      	pop	{r4, r5, r7, pc}
 8007840:	080100e8 	.word	0x080100e8

08007844 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

TfLiteStatus MicroAllocator::InitGraphAndContextTensorData(
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
 8007844:	b590      	push	{r4, r7, lr}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	4798      	blx	r3
 8007862:	4603      	mov	r3, r0
 8007864:	75fb      	strb	r3, [r7, #23]
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2c>
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	e010      	b.n	8007892 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e>
  TF_LITE_ENSURE_STATUS(
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	330c      	adds	r3, #12
 8007876:	681c      	ldr	r4, [r3, #0]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	47a0      	blx	r4
 8007882:	4603      	mov	r3, r0
 8007884:	75bb      	strb	r3, [r7, #22]
 8007886:	7dbb      	ldrb	r3, [r7, #22]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4c>
 800788c:	7dbb      	ldrb	r3, [r7, #22]
 800788e:	e000      	b.n	8007892 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e>
      PopulateTfLiteTensorArrayFromFlatbuffer(model, context, subgraph));
  return kTfLiteOk;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	bd90      	pop	{r4, r7, pc}
	...

0800789c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  auto* subgraphs = model->subgraphs();
 80078a6:	6838      	ldr	r0, [r7, #0]
 80078a8:	f7fe fe00 	bl	80064ac <_ZNK6tflite5Model9subgraphsEv>
 80078ac:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 fb2a 	bl	8007f08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	bf14      	ite	ne
 80078ba:	2301      	movne	r3, #1
 80078bc:	2300      	moveq	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d007      	beq.n	80078d4 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	4907      	ldr	r1, [pc, #28]	; (80078e8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x4c>)
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fd f92a 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e004      	b.n	80078de <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x42>
  }
  return (*subgraphs)[0];
 80078d4:	2100      	movs	r1, #0
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 fbb2 	bl	8008040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80078dc:	4603      	mov	r3, r0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	08010118 	.word	0x08010118

080078ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
 80078ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ee:	b0a7      	sub	sp, #156	; 0x9c
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
 80078fa:	2400      	movs	r4, #0
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689d      	ldr	r5, [r3, #8]
                                        memory_allocator_->GetHead(),
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	685b      	ldr	r3, [r3, #4]
                                        memory_allocator_->GetTail());
 8007904:	4618      	mov	r0, r3
 8007906:	f001 feed 	bl	80096e4 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 800790a:	4606      	mov	r6, r0
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fef3 	bl	80096fc <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 8007916:	4603      	mov	r3, r0
 8007918:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800791c:	4632      	mov	r2, r6
 800791e:	4629      	mov	r1, r5
 8007920:	f001 fdf2 	bl	8009508 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6899      	ldr	r1, [r3, #8]
 8007928:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800792c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007930:	4618      	mov	r0, r3
 8007932:	f7fe fe4b 	bl	80065cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>
    TF_LITE_ENSURE_STATUS(
 8007936:	6838      	ldr	r0, [r7, #0]
 8007938:	f7fe fd47 	bl	80063ca <_ZNK6tflite8SubGraph7tensorsEv>
 800793c:	4603      	mov	r3, r0
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fa46 	bl	8007dd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007944:	4601      	mov	r1, r0
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	695a      	ldr	r2, [r3, #20]
 800794a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800794e:	4618      	mov	r0, r3
 8007950:	f7fe fe58 	bl	8006604 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800795a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x7e>
 8007962:	f897 408f 	ldrb.w	r4, [r7, #143]	; 0x8f
 8007966:	2500      	movs	r5, #0
 8007968:	e0ff      	b.n	8007b6a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
        builder.Init(subgraph->tensors()->size(), scratch_buffer_count_));

    const int32_t* offline_planner_offsets = nullptr;
 800796a:	2300      	movs	r3, #0
 800796c:	643b      	str	r3, [r7, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(
 800796e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007972:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007976:	68b9      	ldr	r1, [r7, #8]
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff f841 	bl	8006a00 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800797e:	4603      	mov	r3, r0
 8007980:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8007984:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xa8>
 800798c:	f897 408e 	ldrb.w	r4, [r7, #142]	; 0x8e
 8007990:	2500      	movs	r5, #0
 8007992:	e0ea      	b.n	8007b6a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
        builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
 8007994:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	f7fe fe8e 	bl	80066c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80079aa:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xce>
 80079b2:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 80079b6:	2500      	movs	r5, #0
 80079b8:	e0d7      	b.n	8007b6a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
                                             context->tensors));

    TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_handles_));
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	691a      	ldr	r2, [r3, #16]
 80079be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80079c2:	4611      	mov	r1, r2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff f897 	bl	8006af8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 80079d0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf4>
 80079d8:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 80079dc:	2500      	movs	r5, #0
 80079de:	e0c4      	b.n	8007b6a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    const AllocationInfo* allocation_info = builder.Finish();
 80079e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe fe21 	bl	800662c <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>
 80079ea:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
 80079ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 fe8e 	bl	8009714 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 80079f8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
 80079fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a00:	2201      	movs	r2, #1
 8007a02:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007a06:	4618      	mov	r0, r3
 8007a08:	f001 fe0a 	bl	8009620 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
 8007a0c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8007a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10f      	bne.n	8007a38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14c>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6898      	ldr	r0, [r3, #8]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6899      	ldr	r1, [r3, #8]
 8007a20:	4b59      	ldr	r3, [pc, #356]	; (8007b88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x29c>)
 8007a22:	9301      	str	r3, [sp, #4]
 8007a24:	f240 339a 	movw	r3, #922	; 0x39a
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	4b58      	ldr	r3, [pc, #352]	; (8007b8c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a0>)
 8007a2c:	4a58      	ldr	r2, [pc, #352]	; (8007b90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a4>)
 8007a2e:	f7fd f892 	bl	8004b56 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007a32:	2401      	movs	r4, #1
 8007a34:	2500      	movs	r5, #0
 8007a36:	e098      	b.n	8007b6a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8007a38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007a3c:	f107 0314 	add.w	r3, r7, #20
 8007a40:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007a44:	4618      	mov	r0, r3
 8007a46:	f003 f9e9 	bl	800ae1c <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689d      	ldr	r5, [r3, #8]
 8007a4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fdf6 	bl	8006644 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f107 0114 	add.w	r1, r7, #20
 8007a5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a62:	4628      	mov	r0, r5
 8007a64:	f7ff f88e 	bl	8006b84 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007a6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x192>
 8007a76:	f897 407f 	ldrb.w	r4, [r7, #127]	; 0x7f
 8007a7a:	2500      	movs	r5, #0
 8007a7c:	e06b      	b.n	8007b56 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
        CreatePlan(error_reporter_, &planner, allocation_info, builder.Size()));

    size_t actual_available_arena_size =
        memory_allocator_->GetAvailableMemory();
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 fe46 	bl	8009714 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 8007a88:	67b8      	str	r0, [r7, #120]	; 0x78
    // Make sure we have enough arena size.
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8007a8a:	f107 0314 	add.w	r3, r7, #20
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f003 fc7e 	bl	800b390 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8007a94:	4602      	mov	r2, r0
 8007a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	bf34      	ite	cc
 8007a9c:	2301      	movcc	r3, #1
 8007a9e:	2300      	movcs	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00f      	beq.n	8007ac6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1da>
      TF_LITE_REPORT_ERROR(
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	689c      	ldr	r4, [r3, #8]
 8007aaa:	f107 0314 	add.w	r3, r7, #20
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f003 fc6e 	bl	800b390 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ab8:	4936      	ldr	r1, [pc, #216]	; (8007b94 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a8>)
 8007aba:	4620      	mov	r0, r4
 8007abc:	f7fd f832 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Arena size is too small for activation buffers. Needed %d but only "
          "%d was available.",
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
 8007ac0:	2401      	movs	r4, #1
 8007ac2:	2500      	movs	r5, #0
 8007ac4:	e047      	b.n	8007b56 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	689d      	ldr	r5, [r3, #8]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f001 fe08 	bl	80096e4 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 8007ad4:	4606      	mov	r6, r0
 8007ad6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fdb2 	bl	8006644 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f107 0114 	add.w	r1, r7, #20
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007aec:	4632      	mov	r2, r6
 8007aee:	4628      	mov	r0, r5
 8007af0:	f7ff f8a2 	bl	8006c38 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 8007af4:	4603      	mov	r3, r0
 8007af6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007afa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21e>
 8007b02:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8007b06:	2500      	movs	r5, #0
 8007b08:	e025      	b.n	8007b56 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
                                     memory_allocator_->GetHead(),
                                     allocation_info, builder.Size()));
    // Allocate the planned area, so the allocator knows it's used.
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685e      	ldr	r6, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3308      	adds	r3, #8
 8007b16:	681d      	ldr	r5, [r3, #0]
 8007b18:	f107 0314 	add.w	r3, r7, #20
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f003 fc37 	bl	800b390 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2201      	movs	r2, #1
 8007b26:	4619      	mov	r1, r3
 8007b28:	4630      	mov	r0, r6
 8007b2a:	47a8      	blx	r5
 8007b2c:	6738      	str	r0, [r7, #112]	; 0x70
                                            /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
 8007b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10f      	bne.n	8007b54 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x268>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6898      	ldr	r0, [r3, #8]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6899      	ldr	r1, [r3, #8]
 8007b3c:	4b16      	ldr	r3, [pc, #88]	; (8007b98 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>)
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	f240 33b3 	movw	r3, #947	; 0x3b3
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a0>)
 8007b48:	4a11      	ldr	r2, [pc, #68]	; (8007b90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a4>)
 8007b4a:	f7fd f804 	bl	8004b56 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8007b4e:	2401      	movs	r4, #1
 8007b50:	2500      	movs	r5, #0
 8007b52:	e000      	b.n	8007b56 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x26a>
  }
 8007b54:	2501      	movs	r5, #1
 8007b56:	f107 0314 	add.w	r3, r7, #20
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f003 f9b0 	bl	800aec0 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8007b60:	2d01      	cmp	r5, #1
 8007b62:	d101      	bne.n	8007b68 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27c>
 8007b64:	2501      	movs	r5, #1
 8007b66:	e000      	b.n	8007b6a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
 8007b68:	2500      	movs	r5, #0
 8007b6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 fd36 	bl	80095e0 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8007b74:	2d01      	cmp	r5, #1
 8007b76:	d101      	bne.n	8007b7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x290>
 8007b78:	bf00      	nop
  return kTfLiteOk;
 8007b7a:	2400      	movs	r4, #0
}
 8007b7c:	4623      	mov	r3, r4
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3794      	adds	r7, #148	; 0x94
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b86:	bf00      	nop
 8007b88:	08010198 	.word	0x08010198
 8007b8c:	08010144 	.word	0x08010144
 8007b90:	08010180 	.word	0x08010180
 8007b94:	080101b4 	.word	0x080101b4
 8007b98:	0801020c 	.word	0x0801020c

08007b9c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007ba8:	887b      	ldrh	r3, [r7, #2]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 faaf 	bl	8008110 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8007bb2:	4603      	mov	r3, r0
  }
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007bc8:	887b      	ldrh	r3, [r7, #2]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fabf 	bl	8008150 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8007bd2:	4603      	mov	r3, r0
  }
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007be8:	887b      	ldrh	r3, [r7, #2]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 facf 	bl	8008190 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8007bf2:	4603      	mov	r3, r0
  }
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007c08:	887b      	ldrh	r3, [r7, #2]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fadf 	bl	80081d0 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8007c12:	4603      	mov	r3, r0
  }
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007c28:	887b      	ldrh	r3, [r7, #2]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 faef 	bl	8008210 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8007c32:	4603      	mov	r3, r0
  }
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007c48:	887b      	ldrh	r3, [r7, #2]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 faff 	bl	8008250 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8007c52:	4603      	mov	r3, r0
  }
 8007c54:	4618      	mov	r0, r3
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007c68:	887b      	ldrh	r3, [r7, #2]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fb0f 	bl	8008290 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8007c72:	4603      	mov	r3, r0
  }
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007c88:	887b      	ldrh	r3, [r7, #2]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fb1f 	bl	80082d0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8007c92:	4603      	mov	r3, r0
  }
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007ca8:	887b      	ldrh	r3, [r7, #2]
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fb2f 	bl	8008310 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8007cb2:	4603      	mov	r3, r0
  }
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007cc8:	887b      	ldrh	r3, [r7, #2]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fb3f 	bl	8008350 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8007cd2:	4603      	mov	r3, r0
  }
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7f9 fd46 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7f9 fd38 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff ffea 	bl	8007cf8 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8007d24:	4602      	mov	r2, r0
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d306      	bcc.n	8007d3a <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 8007d2e:	4a0b      	ldr	r2, [pc, #44]	; (8007d5c <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8007d30:	f240 1101 	movw	r1, #257	; 0x101
 8007d34:	480a      	ldr	r0, [pc, #40]	; (8007d60 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 8007d36:	f003 fc85 	bl	800b644 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fb4a 	bl	80083d4 <_ZNK11flatbuffers6VectorIfE4DataEv>
 8007d40:	4603      	mov	r3, r0
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 fb2f 	bl	80083a8 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8007d4a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	08010230 	.word	0x08010230
 8007d5c:	0801023c 	.word	0x0801023c
 8007d60:	08010304 	.word	0x08010304

08007d64 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7f9 fd02 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007d76:	4603      	mov	r3, r0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7ff ffea 	bl	8007d64 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8007d90:	4602      	mov	r2, r0
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d306      	bcc.n	8007da6 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 8007d9a:	4a0b      	ldr	r2, [pc, #44]	; (8007dc8 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 8007d9c:	f240 1101 	movw	r1, #257	; 0x101
 8007da0:	480a      	ldr	r0, [pc, #40]	; (8007dcc <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 8007da2:	f003 fc4f 	bl	800b644 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fb36 	bl	8008418 <_ZNK11flatbuffers6VectorIxE4DataEv>
 8007dac:	4603      	mov	r3, r0
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fb1b 	bl	80083ec <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
  }
 8007dba:	4610      	mov	r0, r2
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	08010230 	.word	0x08010230
 8007dc8:	08010390 	.word	0x08010390
 8007dcc:	08010304 	.word	0x08010304

08007dd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7f9 fccc 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007de2:	4603      	mov	r3, r0
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7ff ffea 	bl	8007dd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d306      	bcc.n	8007e12 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8007e04:	4b09      	ldr	r3, [pc, #36]	; (8007e2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8007e06:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8007e08:	f240 1101 	movw	r1, #257	; 0x101
 8007e0c:	4809      	ldr	r0, [pc, #36]	; (8007e34 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 8007e0e:	f003 fc19 	bl	800b644 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fb20 	bl	8008458 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fb07 	bl	8008430 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8007e22:	4603      	mov	r3, r0
  }
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	08010230 	.word	0x08010230
 8007e30:	08010538 	.word	0x08010538
 8007e34:	08010304 	.word	0x08010304

08007e38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7f9 fc98 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7ff ffea 	bl	8007e38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8007e64:	4602      	mov	r2, r0
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d306      	bcc.n	8007e7a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 8007e6c:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 8007e6e:	4a0a      	ldr	r2, [pc, #40]	; (8007e98 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8007e70:	f240 1101 	movw	r1, #257	; 0x101
 8007e74:	4809      	ldr	r0, [pc, #36]	; (8007e9c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8007e76:	f003 fbe5 	bl	800b644 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fb0c 	bl	8008498 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8007e80:	4603      	mov	r3, r0
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 faf3 	bl	8008470 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 8007e8a:	4603      	mov	r3, r0
  }
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	08010230 	.word	0x08010230
 8007e98:	08010630 	.word	0x08010630
 8007e9c:	08010304 	.word	0x08010304

08007ea0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7f9 fc64 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff ffea 	bl	8007ea0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d306      	bcc.n	8007ee2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 8007ed4:	4b09      	ldr	r3, [pc, #36]	; (8007efc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 8007ed6:	4a0a      	ldr	r2, [pc, #40]	; (8007f00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 8007ed8:	f240 1101 	movw	r1, #257	; 0x101
 8007edc:	4809      	ldr	r0, [pc, #36]	; (8007f04 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 8007ede:	f003 fbb1 	bl	800b644 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 faf8 	bl	80084d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fadf 	bl	80084b0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 8007ef2:	4603      	mov	r3, r0
  }
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	08010230 	.word	0x08010230
 8007f00:	0801072c 	.word	0x0801072c
 8007f04:	08010304 	.word	0x08010304

08007f08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7f9 fc30 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff ffea 	bl	8007f08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007f34:	4602      	mov	r2, r0
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d306      	bcc.n	8007f4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8007f3c:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 8007f3e:	4a0a      	ldr	r2, [pc, #40]	; (8007f68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 8007f40:	f240 1101 	movw	r1, #257	; 0x101
 8007f44:	4809      	ldr	r0, [pc, #36]	; (8007f6c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 8007f46:	f003 fb7d 	bl	800b644 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fae4 	bl	8008518 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 8007f50:	4603      	mov	r3, r0
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 facb 	bl	80084f0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8007f5a:	4603      	mov	r3, r0
  }
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	08010230 	.word	0x08010230
 8007f68:	08010830 	.word	0x08010830
 8007f6c:	08010304 	.word	0x08010304

08007f70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7f9 fbfc 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007f82:	4603      	mov	r3, r0
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff ffea 	bl	8007f70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d306      	bcc.n	8007fb2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 8007fa4:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 8007fa6:	4a0a      	ldr	r2, [pc, #40]	; (8007fd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 8007fa8:	f240 1101 	movw	r1, #257	; 0x101
 8007fac:	4809      	ldr	r0, [pc, #36]	; (8007fd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 8007fae:	f003 fb49 	bl	800b644 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fad0 	bl	8008558 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 fab7 	bl	8008530 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8007fc2:	4603      	mov	r3, r0
  }
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	08010230 	.word	0x08010230
 8007fd0:	0801092c 	.word	0x0801092c
 8007fd4:	08010304 	.word	0x08010304

08007fd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7f9 fbc8 	bl	800177a <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007fea:	4603      	mov	r3, r0
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7ff ffea 	bl	8007fd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8008004:	4602      	mov	r2, r0
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	4293      	cmp	r3, r2
 800800a:	d306      	bcc.n	800801a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800800e:	4a0a      	ldr	r2, [pc, #40]	; (8008038 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 8008010:	f240 1101 	movw	r1, #257	; 0x101
 8008014:	4809      	ldr	r0, [pc, #36]	; (800803c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 8008016:	f003 fb15 	bl	800b644 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fabc 	bl	8008598 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 8008020:	4603      	mov	r3, r0
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	f000 faa3 	bl	8008570 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 800802a:	4603      	mov	r3, r0
  }
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	08010230 	.word	0x08010230
 8008038:	08010a24 	.word	0x08010a24
 800803c:	08010304 	.word	0x08010304

08008040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff ff69 	bl	8007f24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008052:	4603      	mov	r3, r0
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff ff8f 	bl	8007f8c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800806e:	4603      	mov	r3, r0
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f985 	bl	8008390 <_ZNK11flatbuffers6VectorIhE4DataEv>
 8008086:	4603      	mov	r3, r0
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 80080a4:	f003 fac6 	bl	800b634 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 80080ae:	f003 fac1 	bl	800b634 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 80080d6:	f003 faad 	bl	800b634 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 80080e0:	f003 faa8 	bl	800b634 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fedb 	bl	8007ebc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 8008106:	4603      	mov	r3, r0
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800811c:	887b      	ldrh	r3, [r7, #2]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7f8 fff1 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008126:	4603      	mov	r3, r0
 8008128:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	89fb      	ldrh	r3, [r7, #14]
 800812e:	4413      	add	r3, r2
 8008130:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008132:	89fb      	ldrh	r3, [r7, #14]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d006      	beq.n	8008146 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 8008138:	68b8      	ldr	r0, [r7, #8]
 800813a:	f7f9 fb37 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800813e:	4602      	mov	r2, r0
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4413      	add	r3, r2
                        : nullptr;
 8008144:	e000      	b.n	8008148 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008146:	2300      	movs	r3, #0
  }
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800815c:	887b      	ldrh	r3, [r7, #2]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7f8 ffd1 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008166:	4603      	mov	r3, r0
 8008168:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	89fb      	ldrh	r3, [r7, #14]
 800816e:	4413      	add	r3, r2
 8008170:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008172:	89fb      	ldrh	r3, [r7, #14]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d006      	beq.n	8008186 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 8008178:	68b8      	ldr	r0, [r7, #8]
 800817a:	f7f9 fb17 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800817e:	4602      	mov	r2, r0
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4413      	add	r3, r2
                        : nullptr;
 8008184:	e000      	b.n	8008188 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008186:	2300      	movs	r3, #0
  }
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800819c:	887b      	ldrh	r3, [r7, #2]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7f8 ffb1 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80081a6:	4603      	mov	r3, r0
 80081a8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	89fb      	ldrh	r3, [r7, #14]
 80081ae:	4413      	add	r3, r2
 80081b0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80081b2:	89fb      	ldrh	r3, [r7, #14]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d006      	beq.n	80081c6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 80081b8:	68b8      	ldr	r0, [r7, #8]
 80081ba:	f7f9 faf7 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80081be:	4602      	mov	r2, r0
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4413      	add	r3, r2
                        : nullptr;
 80081c4:	e000      	b.n	80081c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80081c6:	2300      	movs	r3, #0
  }
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80081dc:	887b      	ldrh	r3, [r7, #2]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7f8 ff91 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80081e6:	4603      	mov	r3, r0
 80081e8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	89fb      	ldrh	r3, [r7, #14]
 80081ee:	4413      	add	r3, r2
 80081f0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80081f2:	89fb      	ldrh	r3, [r7, #14]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d006      	beq.n	8008206 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 80081f8:	68b8      	ldr	r0, [r7, #8]
 80081fa:	f7f9 fad7 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80081fe:	4602      	mov	r2, r0
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4413      	add	r3, r2
                        : nullptr;
 8008204:	e000      	b.n	8008208 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008206:	2300      	movs	r3, #0
  }
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800821c:	887b      	ldrh	r3, [r7, #2]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7f8 ff71 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008226:	4603      	mov	r3, r0
 8008228:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	89fb      	ldrh	r3, [r7, #14]
 800822e:	4413      	add	r3, r2
 8008230:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008232:	89fb      	ldrh	r3, [r7, #14]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d006      	beq.n	8008246 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 8008238:	68b8      	ldr	r0, [r7, #8]
 800823a:	f7f9 fab7 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800823e:	4602      	mov	r2, r0
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	4413      	add	r3, r2
                        : nullptr;
 8008244:	e000      	b.n	8008248 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008246:	2300      	movs	r3, #0
  }
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800825c:	887b      	ldrh	r3, [r7, #2]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7f8 ff51 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008266:	4603      	mov	r3, r0
 8008268:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	89fb      	ldrh	r3, [r7, #14]
 800826e:	4413      	add	r3, r2
 8008270:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008272:	89fb      	ldrh	r3, [r7, #14]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d006      	beq.n	8008286 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 8008278:	68b8      	ldr	r0, [r7, #8]
 800827a:	f7f9 fa97 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800827e:	4602      	mov	r2, r0
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4413      	add	r3, r2
                        : nullptr;
 8008284:	e000      	b.n	8008288 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008286:	2300      	movs	r3, #0
  }
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800829c:	887b      	ldrh	r3, [r7, #2]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7f8 ff31 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80082a6:	4603      	mov	r3, r0
 80082a8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	89fb      	ldrh	r3, [r7, #14]
 80082ae:	4413      	add	r3, r2
 80082b0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80082b2:	89fb      	ldrh	r3, [r7, #14]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d006      	beq.n	80082c6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 80082b8:	68b8      	ldr	r0, [r7, #8]
 80082ba:	f7f9 fa77 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80082be:	4602      	mov	r2, r0
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	4413      	add	r3, r2
                        : nullptr;
 80082c4:	e000      	b.n	80082c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80082c6:	2300      	movs	r3, #0
  }
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80082dc:	887b      	ldrh	r3, [r7, #2]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7f8 ff11 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80082e6:	4603      	mov	r3, r0
 80082e8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	89fb      	ldrh	r3, [r7, #14]
 80082ee:	4413      	add	r3, r2
 80082f0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80082f2:	89fb      	ldrh	r3, [r7, #14]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d006      	beq.n	8008306 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 80082f8:	68b8      	ldr	r0, [r7, #8]
 80082fa:	f7f9 fa57 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80082fe:	4602      	mov	r2, r0
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4413      	add	r3, r2
                        : nullptr;
 8008304:	e000      	b.n	8008308 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008306:	2300      	movs	r3, #0
  }
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800831c:	887b      	ldrh	r3, [r7, #2]
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7f8 fef1 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008326:	4603      	mov	r3, r0
 8008328:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	89fb      	ldrh	r3, [r7, #14]
 800832e:	4413      	add	r3, r2
 8008330:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008332:	89fb      	ldrh	r3, [r7, #14]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d006      	beq.n	8008346 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 8008338:	68b8      	ldr	r0, [r7, #8]
 800833a:	f7f9 fa37 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800833e:	4602      	mov	r2, r0
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4413      	add	r3, r2
                        : nullptr;
 8008344:	e000      	b.n	8008348 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008346:	2300      	movs	r3, #0
  }
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800835c:	887b      	ldrh	r3, [r7, #2]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7f8 fed1 	bl	8001108 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008366:	4603      	mov	r3, r0
 8008368:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	89fb      	ldrh	r3, [r7, #14]
 800836e:	4413      	add	r3, r2
 8008370:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008372:	89fb      	ldrh	r3, [r7, #14]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d006      	beq.n	8008386 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 8008378:	68b8      	ldr	r0, [r7, #8]
 800837a:	f7f9 fa17 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800837e:	4602      	mov	r2, r0
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4413      	add	r3, r2
                        : nullptr;
 8008384:	e000      	b.n	8008388 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008386:	2300      	movs	r3, #0
  }
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3304      	adds	r3, #4
  }
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	4413      	add	r3, r2
 80083ba:	edd3 7a00 	vldr	s15, [r3]
 80083be:	eeb0 0a67 	vmov.f32	s0, s15
 80083c2:	f7fd f82d 	bl	8005420 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 80083c6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80083ca:	eeb0 0a67 	vmov.f32	s0, s15
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3304      	adds	r3, #4
  }
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	00db      	lsls	r3, r3, #3
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	4413      	add	r3, r2
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	4610      	mov	r0, r2
 8008404:	4619      	mov	r1, r3
 8008406:	f000 f8d3 	bl	80085b0 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
  }
 800840e:	4610      	mov	r0, r2
 8008410:	4619      	mov	r1, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3304      	adds	r3, #4
  }
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	4413      	add	r3, r2
 8008442:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7f9 f9b1 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800844a:	4602      	mov	r2, r0
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4413      	add	r3, r2
  }
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3304      	adds	r3, #4
  }
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	4413      	add	r3, r2
 8008482:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7f9 f991 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800848a:	4602      	mov	r2, r0
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4413      	add	r3, r2
  }
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3304      	adds	r3, #4
  }
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	4413      	add	r3, r2
 80084c2:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7f9 f971 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80084ca:	4602      	mov	r2, r0
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4413      	add	r3, r2
  }
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	3304      	adds	r3, #4
  }
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	4413      	add	r3, r2
 8008502:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7f9 f951 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800850a:	4602      	mov	r2, r0
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4413      	add	r3, r2
  }
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3304      	adds	r3, #4
  }
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	4413      	add	r3, r2
 8008542:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7f9 f931 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800854a:	4602      	mov	r2, r0
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4413      	add	r3, r2
  }
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3304      	adds	r3, #4
  }
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	4413      	add	r3, r2
 8008582:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7f9 f911 	bl	80017ac <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800858a:	4602      	mov	r2, r0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4413      	add	r3, r2
  }
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3304      	adds	r3, #4
  }
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 80085ba:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80085be:	4610      	mov	r0, r2
 80085c0:	4619      	mov	r1, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	4a05      	ldr	r2, [pc, #20]	; (80085ec <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fd ff8f 	bl	8006500 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	08011c60 	.word	0x08011c60

080085f0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff ffe7 	bl	80085cc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 80085fe:	2108      	movs	r1, #8
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f002 ff43 	bl	800b48c <_ZdlPvj>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 8008610:	b580      	push	{r7, lr}
 8008612:	b0c4      	sub	sp, #272	; 0x110
 8008614:	af00      	add	r7, sp, #0
 8008616:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800861a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800861e:	6018      	str	r0, [r3, #0]
 8008620:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008628:	6019      	str	r1, [r3, #0]
 800862a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800862e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008632:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8008634:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008638:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800863c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008640:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008644:	f107 0010 	add.w	r0, r7, #16
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6812      	ldr	r2, [r2, #0]
 800864c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008650:	f000 fde2 	bl	8009218 <MicroVsnprintf>
  DebugLog(log_buffer);
 8008654:	f107 0310 	add.w	r3, r7, #16
 8008658:	4618      	mov	r0, r3
 800865a:	f7f9 f875 	bl	8001748 <DebugLog>
  DebugLog("\r\n");
 800865e:	4804      	ldr	r0, [pc, #16]	; (8008670 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x60>)
 8008660:	f7f9 f872 	bl	8001748 <DebugLog>
#endif
  return 0;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	08010b20 	.word	0x08010b20

08008674 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>:
  // comes from.
  virtual uint32_t BeginEvent(const char* tag, EventType event_type,
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
 8008674:	b590      	push	{r4, r7, lr}
 8008676:	b089      	sub	sp, #36	; 0x24
 8008678:	af04      	add	r7, sp, #16
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3308      	adds	r3, #8
 8008686:	681c      	ldr	r4, [r3, #0]
 8008688:	f04f 0200 	mov.w	r2, #0
 800868c:	f04f 0300 	mov.w	r3, #0
 8008690:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008694:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008698:	e9cd 2300 	strd	r2, r3, [sp]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	47a0      	blx	r4
 80086a4:	4603      	mov	r3, r0
  }
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd90      	pop	{r4, r7, pc}

080086ae <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>:
// of the object and ends when the object goes out of scope.
// The lifetime of tag should be at least the lifetime of `profiler`.
// `profiler` may be null, in which case nothing is profiled.
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b086      	sub	sp, #24
 80086b2:	af02      	add	r7, sp, #8
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	603b      	str	r3, [r7, #0]
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	605a      	str	r2, [r3, #4]
    if (profiler) {
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00c      	beq.n	80086e8 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx+0x3a>
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086d6:	e9cd 2300 	strd	r2, r3, [sp]
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	f7ff ffc9 	bl	8008674 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>
 80086e2:	4602      	mov	r2, r0
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	605a      	str	r2, [r3, #4]
    }
  }
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <_ZN6tflite13ScopedProfileD1Ev>:

  ~ScopedProfile() {
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
    if (profiler_) {
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00a      	beq.n	8008718 <_ZN6tflite13ScopedProfileD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3310      	adds	r3, #16
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	6852      	ldr	r2, [r2, #4]
 8008714:	4611      	mov	r1, r2
 8008716:	4798      	blx	r3
    }
  }
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>:
  uint32_t event_handle_;
};

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
 8008722:	b5b0      	push	{r4, r5, r7, lr}
 8008724:	b086      	sub	sp, #24
 8008726:	af02      	add	r7, sp, #8
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	603b      	str	r3, [r7, #0]
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2200      	movs	r2, #0
 8008736:	461c      	mov	r4, r3
 8008738:	4615      	mov	r5, r2
 800873a:	e9cd 4500 	strd	r4, r5, [sp]
 800873e:	2302      	movs	r3, #2
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	68b9      	ldr	r1, [r7, #8]
 8008744:	f7ff ffb3 	bl	80086ae <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bdb0      	pop	{r4, r5, r7, pc}

08008752 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>:
// A helper class to encapsulate the implementation of APIs in Context.
// context->impl_ points to an instance of this class.
// Check tensorflow/lite/c/common.h for detailed descriptions.
class ContextHelper {
 public:
  explicit ContextHelper(ErrorReporter* error_reporter,
 8008752:	b480      	push	{r7}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	607a      	str	r2, [r7, #4]
                         MicroAllocator* allocator)
      : allocator_(allocator), error_reporter_(error_reporter) {}
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	605a      	str	r2, [r3, #4]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f04f 32ff 	mov.w	r2, #4294967295
 8008770:	609a      	str	r2, [r3, #8]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>:
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	609a      	str	r2, [r3, #8]
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fd fe1c 	bl	80063e6 <_ZNK6tflite8SubGraph6inputsEv>
 80087ae:	4603      	mov	r3, r0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fd fd69 	bl	8006288 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 80087b6:	4603      	mov	r3, r0
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fd fe0a 	bl	80063e6 <_ZNK6tflite8SubGraph6inputsEv>
 80087d2:	4603      	mov	r3, r0
  }
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fd fe0a 	bl	8006402 <_ZNK6tflite8SubGraph7outputsEv>
 80087ee:	4603      	mov	r3, r0
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fd fd49 	bl	8006288 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 80087f6:	4603      	mov	r3, r0
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800880c:	4618      	mov	r0, r3
 800880e:	f7fd fdf8 	bl	8006402 <_ZNK6tflite8SubGraph7outputsEv>
 8008812:	4603      	mov	r3, r0
  }
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	2b20      	cmp	r3, #32
 800882a:	d102      	bne.n	8008832 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	e007      	b.n	8008842 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	4618      	mov	r0, r3
 800883a:	f7fc ff6b 	bl	8005714 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800883e:	4603      	mov	r3, r0
 8008840:	bf00      	nop
  }
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
}  // namespace

namespace internal {

TfLiteStatus ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                     size_t bytes, void** ptr) {
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	68b9      	ldr	r1, [r7, #8]
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fcc1 	bl	80071e8 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>
 8008866:	4603      	mov	r3, r0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	6899      	ldr	r1, [r3, #8]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	f7fe fcd3 	bl	8007238 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>
 8008892:	4603      	mov	r3, r0
      helper->current_node_idx_, bytes, buffer_idx);
}
 8008894:	4618      	mov	r0, r3
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68db      	ldr	r3, [r3, #12]
      ->allocator_->GetScratchBuffer(buffer_idx);
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fd1e 	bl	80072f0 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>
 80088b4:	4603      	mov	r3, r0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 80088be:	b40e      	push	{r1, r2, r3}
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 80088ce:	f107 0320 	add.w	r3, r7, #32
 80088d2:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6858      	ldr	r0, [r3, #4]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	69f9      	ldr	r1, [r7, #28]
 80088e6:	4798      	blx	r3
  va_end(args);
}
 80088e8:	bf00      	nop
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088f2:	b003      	add	sp, #12
 80088f4:	4770      	bx	lr

080088f6 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
 8008902:	603b      	str	r3, [r7, #0]
      error_reporter_(error_reporter),
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
                                         error_reporter)),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
    : model_(model),
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	605a      	str	r2, [r3, #4]
      op_resolver_(op_resolver),
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	609a      	str	r2, [r3, #8]
      error_reporter_(error_reporter),
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	69fa      	ldr	r2, [r7, #28]
 800891a:	60da      	str	r2, [r3, #12]
      context_helper_(error_reporter_, &allocator_) {
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3310      	adds	r3, #16
 8008920:	2250      	movs	r2, #80	; 0x50
 8008922:	2100      	movs	r1, #0
 8008924:	4618      	mov	r0, r3
 8008926:	f003 fdd7 	bl	800c4d8 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	69b9      	ldr	r1, [r7, #24]
 800892e:	6838      	ldr	r0, [r7, #0]
 8008930:	f7fe fb5a 	bl	8006fe8 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 8008934:	4602      	mov	r2, r0
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	661a      	str	r2, [r3, #96]	; 0x60
      tensors_allocated_(false),
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      initialization_status_(kTfLiteError),
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      context_helper_(error_reporter_, &allocator_) {
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	68d9      	ldr	r1, [r3, #12]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008958:	461a      	mov	r2, r3
 800895a:	f7ff fefa 	bl	8008752 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>
  Init(profiler);
 800895e:	6a39      	ldr	r1, [r7, #32]
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 f84d 	bl	8008a00 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <_ZN6tflite16MicroInterpreterD1Ev>:
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  if (node_and_registrations_ != nullptr) {
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d03a      	beq.n	80089f6 <_ZN6tflite16MicroInterpreterD1Ev+0x86>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008980:	2300      	movs	r3, #0
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	e025      	b.n	80089d2 <_ZN6tflite16MicroInterpreterD1Ev+0x62>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6819      	ldr	r1, [r3, #0]
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	4613      	mov	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	00db      	lsls	r3, r3, #3
 8008994:	440b      	add	r3, r1
 8008996:	613b      	str	r3, [r7, #16]
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6819      	ldr	r1, [r3, #0]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	440b      	add	r3, r1
      const TfLiteRegistration* registration =
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	60fb      	str	r3, [r7, #12]
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00c      	beq.n	80089cc <_ZN6tflite16MicroInterpreterD1Ev+0x5c>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d008      	beq.n	80089cc <_ZN6tflite16MicroInterpreterD1Ev+0x5c>
        registration->free(&context_, node->user_data);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	f102 0010 	add.w	r0, r2, #16
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	6912      	ldr	r2, [r2, #16]
 80089c8:	4611      	mov	r1, r2
 80089ca:	4798      	blx	r3
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	3301      	adds	r3, #1
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fd fd21 	bl	800641e <_ZNK6tflite8SubGraph9operatorsEv>
 80089dc:	4603      	mov	r3, r0
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff fa2a 	bl	8007e38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80089e4:	4602      	mov	r2, r0
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	4293      	cmp	r3, r2
 80089ea:	bf34      	ite	cc
 80089ec:	2301      	movcc	r3, #1
 80089ee:	2300      	movcs	r3, #0
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1c7      	bne.n	8008986 <_ZN6tflite16MicroInterpreterD1Ev+0x16>
      }
    }
  }
}
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4618      	mov	r0, r3
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fd fd4c 	bl	80064ac <_ZNK6tflite5Model9subgraphsEv>
 8008a14:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff fa76 	bl	8007f08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	bf14      	ite	ne
 8008a22:	2301      	movne	r3, #1
 8008a24:	2300      	moveq	r3, #0
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00a      	beq.n	8008a42 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	4912      	ldr	r1, [pc, #72]	; (8008a7c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x7c>)
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fc f876 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    return;
 8008a40:	e018      	b.n	8008a74 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x74>
  }
  subgraph_ = (*subgraphs)[0];
 8008a42:	2100      	movs	r1, #0
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7ff fafb 	bl	8008040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	669a      	str	r2, [r3, #104]	; 0x68

  context_.impl_ = static_cast<void*>(&context_helper_);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a08      	ldr	r2, [pc, #32]	; (8008a80 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x80>)
 8008a5e:	625a      	str	r2, [r3, #36]	; 0x24
  context_.recommended_num_threads = 1;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	635a      	str	r2, [r3, #52]	; 0x34
  context_.profiler = profiler;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	645a      	str	r2, [r3, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	080110fc 	.word	0x080110fc
 8008a80:	080088bf 	.word	0x080088bf

08008a84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
 8008a84:	b590      	push	{r4, r7, lr}
 8008a86:	b08f      	sub	sp, #60	; 0x3c
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	6078      	str	r0, [r7, #4]
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6859      	ldr	r1, [r3, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f103 0210 	add.w	r2, r3, #16
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689c      	ldr	r4, [r3, #8]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	4623      	mov	r3, r4
 8008aa4:	f7fe faf8 	bl	8007098 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>
 8008aa8:	4603      	mov	r3, r0
                                      &node_and_registrations_) != kTfLiteOk) {
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bf14      	ite	ne
 8008aae:	2301      	movne	r3, #1
 8008ab0:	2300      	moveq	r3, #0
 8008ab2:	b2db      	uxtb	r3, r3
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00b      	beq.n	8008ad0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	4973      	ldr	r1, [pc, #460]	; (8008c8c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x208>)
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fc f830 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    return kTfLiteError;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e0d9      	b.n	8008c84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
        CorrectTensorEndianness(thisTensor);
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a6f      	ldr	r2, [pc, #444]	; (8008c90 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20c>)
 8008ad4:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	623b      	str	r3, [r7, #32]
 8008ae6:	e03b      	b.n	8008b60 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xdc>
    context_helper_.SetNodeIndex(i);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	336c      	adds	r3, #108	; 0x6c
 8008aec:	6a3a      	ldr	r2, [r7, #32]
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7ff fe45 	bl	8008780 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6819      	ldr	r1, [r3, #0]
 8008afa:	6a3a      	ldr	r2, [r7, #32]
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	440b      	add	r3, r1
 8008b06:	60fb      	str	r3, [r7, #12]
    auto* registration = node_and_registrations_[i].registration;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6819      	ldr	r1, [r3, #0]
 8008b0c:	6a3a      	ldr	r2, [r7, #32]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	00db      	lsls	r3, r3, #3
 8008b16:	440b      	add	r3, r1
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	60bb      	str	r3, [r7, #8]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	2b20      	cmp	r3, #32
 8008b22:	d106      	bne.n	8008b32 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xae>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	62bb      	str	r3, [r7, #40]	; 0x28
      init_data_size = node->custom_initial_data_size;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b30:	e004      	b.n	8008b3c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xb8>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	62bb      	str	r3, [r7, #40]	; 0x28
      init_data_size = 0;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (registration->init) {
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd6>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	f102 0010 	add.w	r0, r2, #16
 8008b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b52:	4798      	blx	r3
 8008b54:	4602      	mov	r2, r0
      node->user_data =
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	623b      	str	r3, [r7, #32]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fd fc5a 	bl	800641e <_ZNK6tflite8SubGraph9operatorsEv>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff f963 	bl	8007e38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008b72:	4602      	mov	r2, r0
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	4293      	cmp	r3, r2
 8008b78:	bf34      	ite	cc
 8008b7a:	2301      	movcc	r3, #1
 8008b7c:	2300      	movcs	r3, #0
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1b1      	bne.n	8008ae8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x64>
    }
  }
  context_helper_.SetNodeIndex(-1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	336c      	adds	r3, #108	; 0x6c
 8008b88:	f04f 31ff 	mov.w	r1, #4294967295
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff fdf7 	bl	8008780 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is available
  // in Prepare stage.
  context_.RequestScratchBufferInArena =
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a3f      	ldr	r2, [pc, #252]	; (8008c94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x210>)
 8008b96:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008b98:	2300      	movs	r3, #0
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b9c:	e03b      	b.n	8008c16 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x192>
    // Set node idx to annotate the lifetime for scratch buffers.
    context_helper_.SetNodeIndex(i);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	336c      	adds	r3, #108	; 0x6c
 8008ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff fdea 	bl	8008780 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6819      	ldr	r1, [r3, #0]
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	440b      	add	r3, r1
 8008bbc:	61bb      	str	r3, [r7, #24]
    auto* registration = node_and_registrations_[i].registration;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6819      	ldr	r1, [r3, #0]
 8008bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	440b      	add	r3, r1
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	617b      	str	r3, [r7, #20]
    if (registration->prepare) {
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d01a      	beq.n	8008c10 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x18c>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	3210      	adds	r2, #16
 8008be2:	69b9      	ldr	r1, [r7, #24]
 8008be4:	4610      	mov	r0, r2
 8008be6:	4798      	blx	r3
 8008be8:	4603      	mov	r3, r0
 8008bea:	74fb      	strb	r3, [r7, #19]
      if (prepare_status != kTfLiteOk) {
 8008bec:	7cfb      	ldrb	r3, [r7, #19]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00e      	beq.n	8008c10 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x18c>
        TF_LITE_REPORT_ERROR(
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68dc      	ldr	r4, [r3, #12]
 8008bf6:	6978      	ldr	r0, [r7, #20]
 8008bf8:	f7ff fe10 	bl	800881c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	7cfb      	ldrb	r3, [r7, #19]
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	4924      	ldr	r1, [pc, #144]	; (8008c98 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x214>)
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7fb ff8c 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e039      	b.n	8008c84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	3301      	adds	r3, #1
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fd fbff 	bl	800641e <_ZNK6tflite8SubGraph9operatorsEv>
 8008c20:	4603      	mov	r3, r0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7ff f908 	bl	8007e38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	bf34      	ite	cc
 8008c30:	2301      	movcc	r3, #1
 8008c32:	2300      	movcs	r3, #0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1b1      	bne.n	8008b9e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
      }
    }
  }
  context_helper_.SetNodeIndex(-1);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	336c      	adds	r3, #108	; 0x6c
 8008c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff fd9c 	bl	8008780 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a11      	ldr	r2, [pc, #68]	; (8008c9c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>)
 8008c58:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_,
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6859      	ldr	r1, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3310      	adds	r3, #16
 8008c66:	461a      	mov	r2, r3
 8008c68:	f7fe fa76 	bl	8007158 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	77fb      	strb	r3, [r7, #31]
 8008c70:	7ffb      	ldrb	r3, [r7, #31]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1f6>
 8008c76:	7ffb      	ldrb	r3, [r7, #31]
 8008c78:	e004      	b.n	8008c84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
                    allocator_.FinishModelAllocation(model_, &context_));
  tensors_allocated_ = true;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  return kTfLiteOk;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3734      	adds	r7, #52	; 0x34
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd90      	pop	{r4, r7, pc}
 8008c8c:	08011128 	.word	0x08011128
 8008c90:	0800884b 	.word	0x0800884b
 8008c94:	08008871 	.word	0x08008871
 8008c98:	0801114c 	.word	0x0801114c
 8008c9c:	0800889d 	.word	0x0800889d

08008ca0 <_ZN6tflite21ScopedOperatorProfileD1Ev>:
class ScopedOperatorProfile : public ScopedProfile {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff fd21 	bl	80086f2 <_ZN6tflite13ScopedProfileD1Ev>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 8008cbc:	b5b0      	push	{r4, r5, r7, lr}
 8008cbe:	b08c      	sub	sp, #48	; 0x30
 8008cc0:	af02      	add	r7, sp, #8
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	2400      	movs	r4, #0
  if (initialization_status_ != kTfLiteOk) {
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d007      	beq.n	8008ce0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	4943      	ldr	r1, [pc, #268]	; (8008de4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>)
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fb ff24 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 8008cdc:	2401      	movs	r4, #1
 8008cde:	e07b      	b.n	8008dd8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11c>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008ce6:	f083 0301 	eor.w	r3, r3, #1
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00c      	beq.n	8008d0a <_ZN6tflite16MicroInterpreter6InvokeEv+0x4e>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7ff fec7 	bl	8008a84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <_ZN6tflite16MicroInterpreter6InvokeEv+0x4e>
 8008d04:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8008d08:	e066      	b.n	8008dd8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11c>
  }

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d0e:	e050      	b.n	8008db2 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf6>
    auto* node = &(node_and_registrations_[i].node);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d16:	4613      	mov	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	440b      	add	r3, r1
 8008d20:	61fb      	str	r3, [r7, #28]
    auto* registration = node_and_registrations_[i].registration;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6819      	ldr	r1, [r3, #0]
 8008d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	00db      	lsls	r3, r3, #3
 8008d30:	440b      	add	r3, r1
 8008d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d34:	61bb      	str	r3, [r7, #24]

    if (registration->invoke) {
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d036      	beq.n	8008dac <_ZN6tflite16MicroInterpreter6InvokeEv+0xf0>
      TfLiteStatus invoke_status;
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by ScopedOperatorProfile.
      tflite::Profiler* profiler =
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d42:	617b      	str	r3, [r7, #20]
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
 8008d44:	69b8      	ldr	r0, [r7, #24]
 8008d46:	f7ff fd69 	bl	800881c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	f107 0008 	add.w	r0, r7, #8
 8008d52:	6979      	ldr	r1, [r7, #20]
 8008d54:	f7ff fce5 	bl	8008722 <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>
#endif
      invoke_status = registration->invoke(&context_, node);
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	3210      	adds	r2, #16
 8008d60:	69f9      	ldr	r1, [r7, #28]
 8008d62:	4610      	mov	r0, r2
 8008d64:	4798      	blx	r3
 8008d66:	4603      	mov	r3, r0
 8008d68:	74fb      	strb	r3, [r7, #19]

      if (invoke_status == kTfLiteError) {
 8008d6a:	7cfb      	ldrb	r3, [r7, #19]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d10f      	bne.n	8008d90 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd4>
        TF_LITE_REPORT_ERROR(
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68dc      	ldr	r4, [r3, #12]
 8008d74:	69b8      	ldr	r0, [r7, #24]
 8008d76:	f7ff fd51 	bl	800881c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	7cfb      	ldrb	r3, [r7, #19]
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	4919      	ldr	r1, [pc, #100]	; (8008de8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x12c>)
 8008d84:	4620      	mov	r0, r4
 8008d86:	f7fb fecd 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %d) failed to invoke with status %d",
            OpNameFromRegistration(registration), i, invoke_status);
        return kTfLiteError;
 8008d8a:	2401      	movs	r4, #1
 8008d8c:	2500      	movs	r5, #0
 8008d8e:	e006      	b.n	8008d9e <_ZN6tflite16MicroInterpreter6InvokeEv+0xe2>
      } else if (invoke_status != kTfLiteOk) {
 8008d90:	7cfb      	ldrb	r3, [r7, #19]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <_ZN6tflite16MicroInterpreter6InvokeEv+0xe0>
        return invoke_status;
 8008d96:	7cfc      	ldrb	r4, [r7, #19]
 8008d98:	2500      	movs	r5, #0
 8008d9a:	e000      	b.n	8008d9e <_ZN6tflite16MicroInterpreter6InvokeEv+0xe2>
      }
    }
 8008d9c:	2501      	movs	r5, #1
 8008d9e:	f107 0308 	add.w	r3, r7, #8
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7ff ff7c 	bl	8008ca0 <_ZN6tflite21ScopedOperatorProfileD1Ev>
 8008da8:	2d01      	cmp	r5, #1
 8008daa:	d115      	bne.n	8008dd8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11c>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	3301      	adds	r3, #1
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fd fb31 	bl	800641e <_ZNK6tflite8SubGraph9operatorsEv>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff f83a 	bl	8007e38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	bf34      	ite	cc
 8008dcc:	2301      	movcc	r3, #1
 8008dce:	2300      	movcs	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d19c      	bne.n	8008d10 <_ZN6tflite16MicroInterpreter6InvokeEv+0x54>
  }
  return kTfLiteOk;
 8008dd6:	2400      	movs	r4, #0
}
 8008dd8:	4623      	mov	r3, r4
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3728      	adds	r7, #40	; 0x28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bdb0      	pop	{r4, r5, r7, pc}
 8008de2:	bf00      	nop
 8008de4:	08011184 	.word	0x08011184
 8008de8:	080111b4 	.word	0x080111b4

08008dec <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff fcd0 	bl	800879c <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8008dfc:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d308      	bcc.n	8008e18 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68d8      	ldr	r0, [r3, #12]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	490b      	ldr	r1, [pc, #44]	; (8008e3c <_ZN6tflite16MicroInterpreter5inputEj+0x50>)
 8008e10:	f7fb fe88 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8008e14:	2300      	movs	r3, #0
 8008e16:	e00c      	b.n	8008e32 <_ZN6tflite16MicroInterpreter5inputEj+0x46>
  }
  return &(context_.tensors[inputs().Get(index)]);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699c      	ldr	r4, [r3, #24]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff fccf 	bl	80087c0 <_ZNK6tflite16MicroInterpreter6inputsEv>
 8008e22:	4603      	mov	r3, r0
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fc f946 	bl	80050b8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	019b      	lsls	r3, r3, #6
 8008e30:	4423      	add	r3, r4
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd90      	pop	{r4, r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	080111e8 	.word	0x080111e8

08008e40 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 8008e40:	b590      	push	{r4, r7, lr}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff fcc6 	bl	80087dc <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8008e50:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d308      	bcc.n	8008e6c <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68d8      	ldr	r0, [r3, #12]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	490b      	ldr	r1, [pc, #44]	; (8008e90 <_ZN6tflite16MicroInterpreter6outputEj+0x50>)
 8008e64:	f7fb fe5e 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e00c      	b.n	8008e86 <_ZN6tflite16MicroInterpreter6outputEj+0x46>
  }
  return &(context_.tensors[outputs().Get(index)]);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699c      	ldr	r4, [r3, #24]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7ff fcc5 	bl	8008800 <_ZNK6tflite16MicroInterpreter7outputsEv>
 8008e76:	4603      	mov	r3, r0
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fc f91c 	bl	80050b8 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008e80:	4603      	mov	r3, r0
 8008e82:	019b      	lsls	r3, r3, #6
 8008e84:	4423      	add	r3, r4
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd90      	pop	{r4, r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	08011214 	.word	0x08011214

08008e94 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 8008ea8:	e00d      	b.n	8008ec6 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x32>
    char tmp = *p1;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	617a      	str	r2, [r7, #20]
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	7812      	ldrb	r2, [r2, #0]
 8008eba:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	1e5a      	subs	r2, r3, #1
 8008ec0:	613a      	str	r2, [r7, #16]
 8008ec2:	7bfa      	ldrb	r2, [r7, #15]
 8008ec4:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d3ed      	bcc.n	8008eaa <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x16>
  }
  return start;
 8008ece:	687b      	ldr	r3, [r7, #4]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	371c      	adds	r7, #28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  char* current = main;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8008eec:	e002      	b.n	8008ef4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x18>
    ++current;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1f8      	bne.n	8008eee <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x12>
  }
  char* current_end = main + (main_max_length - 1);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4413      	add	r3, r2
 8008f04:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 8008f06:	e009      	b.n	8008f1c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x40>
    *current = *to_append;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	781a      	ldrb	r2, [r3, #0]
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	701a      	strb	r2, [r3, #0]
    ++current;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	3301      	adds	r3, #1
 8008f14:	617b      	str	r3, [r7, #20]
    ++to_append;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d3ed      	bcc.n	8008f08 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2c>
  }
  *current = 0;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	701a      	strb	r2, [r3, #0]
  return current;
 8008f32:	697b      	ldr	r3, [r7, #20]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	371c      	adds	r7, #28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f58:	fb01 f202 	mul.w	r2, r1, r2
 8008f5c:	1a9b      	subs	r3, r3, r2
 8008f5e:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2b09      	cmp	r3, #9
 8008f64:	dc04      	bgt.n	8008f70 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	3330      	adds	r3, #48	; 0x30
 8008f6c:	77fb      	strb	r3, [r7, #31]
 8008f6e:	e003      	b.n	8008f78 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	3357      	adds	r3, #87	; 0x57
 8008f76:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	1c5a      	adds	r2, r3, #1
 8008f7c:	60ba      	str	r2, [r7, #8]
 8008f7e:	7ffa      	ldrb	r2, [r7, #31]
 8008f80:	701a      	strb	r2, [r3, #0]
    i /= base;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f8a:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1de      	bne.n	8008f50 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2200      	movs	r2, #0
 8008f96:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 8008f98:	68b9      	ldr	r1, [r7, #8]
 8008f9a:	69b8      	ldr	r0, [r7, #24]
 8008f9c:	f7ff ff7a 	bl	8008e94 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	da07      	bge.n	8008fce <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	1c5a      	adds	r2, r3, #1
 8008fc2:	603a      	str	r2, [r7, #0]
 8008fc4:	222d      	movs	r2, #45	; 0x2d
 8008fc6:	701a      	strb	r2, [r3, #0]
    u = -u;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	425b      	negs	r3, r3
 8008fcc:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 8008fce:	220a      	movs	r2, #10
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f7ff ffb4 	bl	8008f40 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8008fd8:	4603      	mov	r3, r0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b090      	sub	sp, #64	; 0x40
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 8008fee:	f107 0310 	add.w	r3, r7, #16
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff ffd8 	bl	8008faa <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 8008ffa:	f107 0310 	add.w	r3, r7, #16
 8008ffe:	461a      	mov	r2, r3
 8009000:	68b9      	ldr	r1, [r7, #8]
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f7ff ff6a 	bl	8008edc <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8009008:	4603      	mov	r3, r0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3740      	adds	r7, #64	; 0x40
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 8009012:	b580      	push	{r7, lr}
 8009014:	b090      	sub	sp, #64	; 0x40
 8009016:	af00      	add	r7, sp, #0
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	607a      	str	r2, [r7, #4]
 800901e:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 8009020:	f107 0310 	add.w	r3, r7, #16
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff ff89 	bl	8008f40 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800902e:	f107 0310 	add.w	r3, r7, #16
 8009032:	461a      	mov	r2, r3
 8009034:	68b9      	ldr	r1, [r7, #8]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f7ff ff50 	bl	8008edc <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800903c:	4603      	mov	r3, r0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3740      	adds	r7, #64	; 0x40
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 8009048:	b590      	push	{r4, r7, lr}
 800904a:	b095      	sub	sp, #84	; 0x54
 800904c:	af00      	add	r7, sp, #0
 800904e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009052:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	64fb      	str	r3, [r7, #76]	; 0x4c
  char* current_end = buffer + (kFastToBufferSize - 1);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	332f      	adds	r3, #47	; 0x2f
 800905c:	643b      	str	r3, [r7, #64]	; 0x40
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800905e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
  const uint32_t exponent_mask = 0x7f800000;
 8009064:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8009068:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t exponent_shift = 23;
 800906a:	2317      	movs	r3, #23
 800906c:	637b      	str	r3, [r7, #52]	; 0x34
  const int32_t exponent_bias = 127;
 800906e:	237f      	movs	r3, #127	; 0x7f
 8009070:	633b      	str	r3, [r7, #48]	; 0x30
  const uint32_t fraction_mask = 0x007fffff;
 8009072:	4b42      	ldr	r3, [pc, #264]	; (800917c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x134>)
 8009074:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint32_t u = *reinterpret_cast<uint32_t*>(&f);
 8009076:	1d3b      	adds	r3, r7, #4
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	62bb      	str	r3, [r7, #40]	; 0x28
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907e:	0ddb      	lsrs	r3, r3, #23
 8009080:	b2db      	uxtb	r3, r3
 8009082:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 8009084:	627b      	str	r3, [r7, #36]	; 0x24
  const uint32_t fraction = (u & fraction_mask);
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800908c:	623b      	str	r3, [r7, #32]
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009090:	2b00      	cmp	r3, #0
 8009092:	da05      	bge.n	80090a0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x58>
    *current = '-';
 8009094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009096:	222d      	movs	r2, #45	; 0x2d
 8009098:	701a      	strb	r2, [r3, #0]
    current += 1;
 800909a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800909c:	3301      	adds	r3, #1
 800909e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  *current = 0;
 80090a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a2:	2200      	movs	r2, #0
 80090a4:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	2b80      	cmp	r3, #128	; 0x80
 80090aa:	d118      	bne.n	80090de <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
    if (fraction == 0) {
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x80>
      current = StrCatStr(current, (current_end - current), "Inf");
 80090b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	4a31      	ldr	r2, [pc, #196]	; (8009180 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x138>)
 80090ba:	4619      	mov	r1, r3
 80090bc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80090be:	f7ff ff0d 	bl	8008edc <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80090c2:	64f8      	str	r0, [r7, #76]	; 0x4c
      return current;
 80090c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c6:	e054      	b.n	8009172 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x12a>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 80090c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	4a2d      	ldr	r2, [pc, #180]	; (8009184 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x13c>)
 80090d0:	4619      	mov	r1, r3
 80090d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80090d4:	f7ff ff02 	bl	8008edc <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80090d8:	64f8      	str	r0, [r7, #76]	; 0x4c
      return current;
 80090da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090dc:	e049      	b.n	8009172 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x12a>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 80090de:	230d      	movs	r3, #13
 80090e0:	61fb      	str	r3, [r7, #28]
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 80090e2:	4b29      	ldr	r3, [pc, #164]	; (8009188 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x140>)
 80090e4:	f107 040c 	add.w	r4, r7, #12
 80090e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090ea:	c407      	stmia	r4!, {r0, r1, r2}
 80090ec:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < scale_shifts_size; ++i) {
 80090f2:	2300      	movs	r3, #0
 80090f4:	647b      	str	r3, [r7, #68]	; 0x44
 80090f6:	e00e      	b.n	8009116 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xce>
    scaled_fraction += (fraction >> scale_shifts[i]);
 80090f8:	f107 020c 	add.w	r2, r7, #12
 80090fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090fe:	4413      	add	r3, r2
 8009100:	f993 3000 	ldrsb.w	r3, [r3]
 8009104:	461a      	mov	r2, r3
 8009106:	6a3b      	ldr	r3, [r7, #32]
 8009108:	40d3      	lsrs	r3, r2
 800910a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800910c:	4413      	add	r3, r2
 800910e:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < scale_shifts_size; ++i) {
 8009110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009112:	3301      	adds	r3, #1
 8009114:	647b      	str	r3, [r7, #68]	; 0x44
 8009116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009118:	2b0c      	cmp	r3, #12
 800911a:	dded      	ble.n	80090f8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xb0>
  }
  *current = '1';
 800911c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911e:	2231      	movs	r2, #49	; 0x31
 8009120:	701a      	strb	r2, [r3, #0]
  current += 1;
 8009122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009124:	3301      	adds	r3, #1
 8009126:	64fb      	str	r3, [r7, #76]	; 0x4c
  *current = '.';
 8009128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800912a:	222e      	movs	r2, #46	; 0x2e
 800912c:	701a      	strb	r2, [r3, #0]
  current += 1;
 800912e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009130:	3301      	adds	r3, #1
 8009132:	64fb      	str	r3, [r7, #76]	; 0x4c
  *current = 0;
 8009134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009136:	2200      	movs	r2, #0
 8009138:	701a      	strb	r2, [r3, #0]
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800913a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800913c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800913e:	1ad1      	subs	r1, r2, r3
 8009140:	230a      	movs	r3, #10
 8009142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009144:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009146:	f7ff ff64 	bl	8009012 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800914a:	64f8      	str	r0, [r7, #76]	; 0x4c
  current = StrCatStr(current, (current_end - current), "*2^");
 800914c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800914e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	4a0e      	ldr	r2, [pc, #56]	; (800918c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x144>)
 8009154:	4619      	mov	r1, r3
 8009156:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009158:	f7ff fec0 	bl	8008edc <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800915c:	64f8      	str	r0, [r7, #76]	; 0x4c
  current = StrCatInt32(current, (current_end - current), exponent);
 800915e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009166:	4619      	mov	r1, r3
 8009168:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800916a:	f7ff ff3a 	bl	8008fe2 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800916e:	64f8      	str	r0, [r7, #76]	; 0x4c
  return current;
 8009170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009172:	4618      	mov	r0, r3
 8009174:	3754      	adds	r7, #84	; 0x54
 8009176:	46bd      	mov	sp, r7
 8009178:	bd90      	pop	{r4, r7, pc}
 800917a:	bf00      	nop
 800917c:	007fffff 	.word	0x007fffff
 8009180:	08011500 	.word	0x08011500
 8009184:	08011504 	.word	0x08011504
 8009188:	0801150c 	.word	0x0801150c
 800918c:	08011508 	.word	0x08011508

08009190 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800919a:	6879      	ldr	r1, [r7, #4]
 800919c:	6838      	ldr	r0, [r7, #0]
 800919e:	f7ff ff04 	bl	8008faa <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 80091a2:	4602      	mov	r2, r0
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	1ad3      	subs	r3, r2, r3
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 80091ba:	220a      	movs	r2, #10
 80091bc:	6879      	ldr	r1, [r7, #4]
 80091be:	6838      	ldr	r0, [r7, #0]
 80091c0:	f7ff febe 	bl	8008f40 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80091c4:	4602      	mov	r2, r0
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	1ad3      	subs	r3, r2, r3
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 80091dc:	2210      	movs	r2, #16
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	6838      	ldr	r0, [r7, #0]
 80091e2:	f7ff fead 	bl	8008f40 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80091e6:	4602      	mov	r2, r0
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	1ad3      	subs	r3, r2, r3
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	ed97 0a00 	vldr	s0, [r7]
 8009206:	f7ff ff1f 	bl	8009048 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800920a:	4602      	mov	r2, r0
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	1ad3      	subs	r3, r2, r3
}
 8009210:	4618      	mov	r0, r3
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b08b      	sub	sp, #44	; 0x2c
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	3b01      	subs	r3, #1
 8009232:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 8009234:	e12c      	b.n	8009490 <MicroVsnprintf+0x278>
    if (*current == '%') {
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b25      	cmp	r3, #37	; 0x25
 800923c:	f040 811d 	bne.w	800947a <MicroVsnprintf+0x262>
      current++;
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	3301      	adds	r3, #1
 8009244:	623b      	str	r3, [r7, #32]
      switch (*current) {
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b25      	cmp	r3, #37	; 0x25
 800924c:	f000 80e3 	beq.w	8009416 <MicroVsnprintf+0x1fe>
 8009250:	2b25      	cmp	r3, #37	; 0x25
 8009252:	f2c0 811d 	blt.w	8009490 <MicroVsnprintf+0x278>
 8009256:	2b78      	cmp	r3, #120	; 0x78
 8009258:	f300 811a 	bgt.w	8009490 <MicroVsnprintf+0x278>
 800925c:	2b64      	cmp	r3, #100	; 0x64
 800925e:	f2c0 8117 	blt.w	8009490 <MicroVsnprintf+0x278>
 8009262:	3b64      	subs	r3, #100	; 0x64
 8009264:	2b14      	cmp	r3, #20
 8009266:	f200 8113 	bhi.w	8009490 <MicroVsnprintf+0x278>
 800926a:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <MicroVsnprintf+0x58>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	080092c5 	.word	0x080092c5
 8009274:	08009491 	.word	0x08009491
 8009278:	080093ab 	.word	0x080093ab
 800927c:	08009491 	.word	0x08009491
 8009280:	08009491 	.word	0x08009491
 8009284:	08009491 	.word	0x08009491
 8009288:	08009491 	.word	0x08009491
 800928c:	08009491 	.word	0x08009491
 8009290:	08009491 	.word	0x08009491
 8009294:	08009491 	.word	0x08009491
 8009298:	08009491 	.word	0x08009491
 800929c:	08009491 	.word	0x08009491
 80092a0:	08009491 	.word	0x08009491
 80092a4:	08009491 	.word	0x08009491
 80092a8:	08009491 	.word	0x08009491
 80092ac:	0800942f 	.word	0x0800942f
 80092b0:	08009491 	.word	0x08009491
 80092b4:	08009307 	.word	0x08009307
 80092b8:	08009491 	.word	0x08009491
 80092bc:	08009491 	.word	0x08009491
 80092c0:	08009349 	.word	0x08009349
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	2b0a      	cmp	r3, #10
 80092cc:	dc09      	bgt.n	80092e2 <MicroVsnprintf+0xca>
            output[output_index++] = '\0';
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	627a      	str	r2, [r7, #36]	; 0x24
 80092d4:	461a      	mov	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	4413      	add	r3, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]
            return output_index;
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	e0e8      	b.n	80094b4 <MicroVsnprintf+0x29c>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	18d0      	adds	r0, r2, r3
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	1d1a      	adds	r2, r3, #4
 80092ec:	603a      	str	r2, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4619      	mov	r1, r3
 80092f2:	f7ff ff4d 	bl	8009190 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 80092f6:	4602      	mov	r2, r0
          output_index +=
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	4413      	add	r3, r2
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	3301      	adds	r3, #1
 8009302:	623b      	str	r3, [r7, #32]
          break;
 8009304:	e0c4      	b.n	8009490 <MicroVsnprintf+0x278>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	2b0a      	cmp	r3, #10
 800930e:	dc09      	bgt.n	8009324 <MicroVsnprintf+0x10c>
            output[output_index++] = '\0';
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	627a      	str	r2, [r7, #36]	; 0x24
 8009316:	461a      	mov	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4413      	add	r3, r2
 800931c:	2200      	movs	r2, #0
 800931e:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	e0c7      	b.n	80094b4 <MicroVsnprintf+0x29c>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	18d0      	adds	r0, r2, r3
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	1d1a      	adds	r2, r3, #4
 800932e:	603a      	str	r2, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4619      	mov	r1, r3
 8009334:	f7ff ff3c 	bl	80091b0 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 8009338:	4602      	mov	r2, r0
          output_index +=
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	4413      	add	r3, r2
 800933e:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	3301      	adds	r3, #1
 8009344:	623b      	str	r3, [r7, #32]
          break;
 8009346:	e0a3      	b.n	8009490 <MicroVsnprintf+0x278>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	2b09      	cmp	r3, #9
 8009350:	dc09      	bgt.n	8009366 <MicroVsnprintf+0x14e>
            output[output_index++] = '\0';
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	627a      	str	r2, [r7, #36]	; 0x24
 8009358:	461a      	mov	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4413      	add	r3, r2
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009364:	e0a6      	b.n	80094b4 <MicroVsnprintf+0x29c>
          }
          output[output_index++] = '0';
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	627a      	str	r2, [r7, #36]	; 0x24
 800936c:	461a      	mov	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	4413      	add	r3, r2
 8009372:	2230      	movs	r2, #48	; 0x30
 8009374:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	627a      	str	r2, [r7, #36]	; 0x24
 800937c:	461a      	mov	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	4413      	add	r3, r2
 8009382:	2278      	movs	r2, #120	; 0x78
 8009384:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	18d0      	adds	r0, r2, r3
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	1d1a      	adds	r2, r3, #4
 8009390:	603a      	str	r2, [r7, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4619      	mov	r1, r3
 8009396:	f7ff ff1c 	bl	80091d2 <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800939a:	4602      	mov	r2, r0
          output_index +=
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	4413      	add	r3, r2
 80093a0:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	3301      	adds	r3, #1
 80093a6:	623b      	str	r3, [r7, #32]
          break;
 80093a8:	e072      	b.n	8009490 <MicroVsnprintf+0x278>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	ee07 3a90 	vmov	s15, r3
 80093b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093b8:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80093bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093c4:	d509      	bpl.n	80093da <MicroVsnprintf+0x1c2>
            output[output_index++] = '\0';
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	627a      	str	r2, [r7, #36]	; 0x24
 80093cc:	461a      	mov	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4413      	add	r3, r2
 80093d2:	2200      	movs	r2, #0
 80093d4:	701a      	strb	r2, [r3, #0]
            return output_index;
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	e06c      	b.n	80094b4 <MicroVsnprintf+0x29c>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	18d4      	adds	r4, r2, r3
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	3307      	adds	r3, #7
 80093e4:	f023 0307 	bic.w	r3, r3, #7
 80093e8:	f103 0208 	add.w	r2, r3, #8
 80093ec:	603a      	str	r2, [r7, #0]
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	4610      	mov	r0, r2
 80093f4:	4619      	mov	r1, r3
 80093f6:	f7f7 fbf7 	bl	8000be8 <__aeabi_d2f>
 80093fa:	4603      	mov	r3, r0
 80093fc:	ee00 3a10 	vmov	s0, r3
 8009400:	4620      	mov	r0, r4
 8009402:	f7ff fef7 	bl	80091f4 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 8009406:	4602      	mov	r2, r0
          output_index +=
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	4413      	add	r3, r2
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	3301      	adds	r3, #1
 8009412:	623b      	str	r3, [r7, #32]
          break;
 8009414:	e03c      	b.n	8009490 <MicroVsnprintf+0x278>
        case '%':
          output[output_index++] = *current++;
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	623a      	str	r2, [r7, #32]
 800941c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941e:	1c51      	adds	r1, r2, #1
 8009420:	6279      	str	r1, [r7, #36]	; 0x24
 8009422:	4611      	mov	r1, r2
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	440a      	add	r2, r1
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	7013      	strb	r3, [r2, #0]
          break;
 800942c:	e030      	b.n	8009490 <MicroVsnprintf+0x278>
        case 's':
          char* string = va_arg(args, char*);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	1d1a      	adds	r2, r3, #4
 8009432:	603a      	str	r2, [r7, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800943c:	e00d      	b.n	800945a <MicroVsnprintf+0x242>
                 string[string_idx] != '\0') {
            output[output_index++] = string[string_idx++];
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	61fa      	str	r2, [r7, #28]
 8009444:	461a      	mov	r2, r3
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	441a      	add	r2, r3
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	1c59      	adds	r1, r3, #1
 800944e:	6279      	str	r1, [r7, #36]	; 0x24
 8009450:	4619      	mov	r1, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	440b      	add	r3, r1
 8009456:	7812      	ldrb	r2, [r2, #0]
 8009458:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	4413      	add	r3, r2
 8009460:	69ba      	ldr	r2, [r7, #24]
 8009462:	429a      	cmp	r2, r3
 8009464:	dd05      	ble.n	8009472 <MicroVsnprintf+0x25a>
                 string[string_idx] != '\0') {
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	4413      	add	r3, r2
 800946c:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e5      	bne.n	800943e <MicroVsnprintf+0x226>
          }
          current++;
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	3301      	adds	r3, #1
 8009476:	623b      	str	r3, [r7, #32]
 8009478:	e00a      	b.n	8009490 <MicroVsnprintf+0x278>
      }
    } else {
      output[output_index++] = *current++;
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	1c5a      	adds	r2, r3, #1
 800947e:	623a      	str	r2, [r7, #32]
 8009480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009482:	1c51      	adds	r1, r2, #1
 8009484:	6279      	str	r1, [r7, #36]	; 0x24
 8009486:	4611      	mov	r1, r2
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	440a      	add	r2, r1
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d004      	beq.n	80094a2 <MicroVsnprintf+0x28a>
 8009498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	429a      	cmp	r2, r3
 800949e:	f6ff aeca 	blt.w	8009236 <MicroVsnprintf+0x1e>
    }
  }
  output[output_index++] = '\0';
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	627a      	str	r2, [r7, #36]	; 0x24
 80094a8:	461a      	mov	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4413      	add	r3, r2
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
  return output_index;
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	372c      	adds	r7, #44	; 0x2c
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd90      	pop	{r4, r7, pc}

080094bc <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
 80094c6:	4a0f      	ldr	r2, [pc, #60]	; (8009504 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x48>)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	605a      	str	r2, [r3, #4]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	609a      	str	r2, [r3, #8]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	68da      	ldr	r2, [r3, #12]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	60da      	str	r2, [r3, #12]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	691a      	ldr	r2, [r3, #16]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	611a      	str	r2, [r3, #16]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	695a      	ldr	r2, [r3, #20]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	615a      	str	r2, [r3, #20]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4618      	mov	r0, r3
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	08011ccc 	.word	0x08011ccc

08009508 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer_tail)
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail) {}
 8009516:	4a0c      	ldr	r2, [pc, #48]	; (8009548 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x40>)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	601a      	str	r2, [r3, #0]
    : error_reporter_(error_reporter),
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	605a      	str	r2, [r3, #4]
      buffer_head_(buffer_head),
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	609a      	str	r2, [r3, #8]
      buffer_tail_(buffer_tail),
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	60da      	str	r2, [r3, #12]
      head_(buffer_head),
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	611a      	str	r2, [r3, #16]
      tail_(buffer_tail) {}
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	615a      	str	r2, [r3, #20]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	08011ccc 	.word	0x08011ccc

0800954c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	4413      	add	r3, r2
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	68b9      	ldr	r1, [r7, #8]
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7ff ffcf 	bl	8009508 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 8009574:	b590      	push	{r4, r7, lr}
 8009576:	b08d      	sub	sp, #52	; 0x34
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 8009586:	f002 f855 	bl	800b634 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 8009590:	f002 f850 	bl	800b634 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8009594:	f107 0014 	add.w	r0, r7, #20
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	68f9      	ldr	r1, [r7, #12]
 800959e:	f7ff ffd5 	bl	800954c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 80095a2:	f107 0314 	add.w	r3, r7, #20
 80095a6:	2204      	movs	r2, #4
 80095a8:	2118      	movs	r1, #24
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 f868 	bl	8009680 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 80095b0:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	4619      	mov	r1, r3
 80095b6:	2018      	movs	r0, #24
 80095b8:	f7fb fae7 	bl	8004b8a <_ZnwjPv>
 80095bc:	4604      	mov	r4, r0
 80095be:	f107 0314 	add.w	r3, r7, #20
 80095c2:	4619      	mov	r1, r3
 80095c4:	4620      	mov	r0, r4
 80095c6:	f7ff ff79 	bl	80094bc <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
}
 80095ca:	f107 0314 	add.w	r3, r7, #20
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 f806 	bl	80095e0 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 80095d4:	4623      	mov	r3, r4
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3734      	adds	r7, #52	; 0x34
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd90      	pop	{r4, r7, pc}
	...

080095e0 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	4a04      	ldr	r2, [pc, #16]	; (80095fc <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	08011ccc 	.word	0x08011ccc

08009600 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff ffe9 	bl	80095e0 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800960e:	2118      	movs	r1, #24
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 ff3b 	bl	800b48c <_ZdlPvj>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af02      	add	r7, sp, #8
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	4618      	mov	r0, r3
 8009634:	f7fc fd2c 	bl	8006090 <_ZN6tflite14AlignPointerUpEPhj>
 8009638:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	695a      	ldr	r2, [r3, #20]
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	429a      	cmp	r2, r3
 800964a:	d20c      	bcs.n	8009666 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x46>
    TF_LITE_REPORT_ERROR(
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6858      	ldr	r0, [r3, #4]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	4907      	ldr	r1, [pc, #28]	; (800967c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x5c>)
 800965e:	f7fb fa61 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
 8009662:	2300      	movs	r3, #0
 8009664:	e005      	b.n	8009672 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x52>
  }
  head_ = aligned_result + size;
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	441a      	add	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	611a      	str	r2, [r3, #16]
  return aligned_result;
 8009670:	697b      	ldr	r3, [r7, #20]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	08011530 	.word	0x08011530

08009680 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 8009680:	b580      	push	{r7, lr}
 8009682:	b088      	sub	sp, #32
 8009684:	af02      	add	r7, sp, #8
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	695a      	ldr	r2, [r3, #20]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	425b      	negs	r3, r3
 8009694:	4413      	add	r3, r2
 8009696:	6879      	ldr	r1, [r7, #4]
 8009698:	4618      	mov	r0, r3
 800969a:	f7fc fd12 	bl	80060c2 <_ZN6tflite16AlignPointerDownEPhj>
 800969e:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d212      	bcs.n	80096d0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
    const size_t missing_memory = head_ - aligned_result;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	691a      	ldr	r2, [r3, #16]
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6858      	ldr	r0, [r3, #4]
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	1ad2      	subs	r2, r2, r3
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	4613      	mov	r3, r2
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	4906      	ldr	r1, [pc, #24]	; (80096e0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 80096c8:	f7fb fa2c 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
 80096cc:	2300      	movs	r3, #0
 80096ce:	e003      	b.n	80096d8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	615a      	str	r2, [r3, #20]
  return aligned_result;
 80096d6:	697b      	ldr	r3, [r7, #20]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	08011530 	.word	0x08011530

080096e4 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  return tail_ - head_;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	695a      	ldr	r2, [r3, #20]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	1ad3      	subs	r3, r2, r3
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
 8009732:	b480      	push	{r7}
 8009734:	b087      	sub	sp, #28
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
  const int tensor_index = node->inputs->data[index];
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	617b      	str	r3, [r7, #20]
  if (tensor_index < 0) {
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	2b00      	cmp	r3, #0
 8009750:	da01      	bge.n	8009756 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x24>
    return nullptr;
 8009752:	2300      	movs	r3, #0
 8009754:	e004      	b.n	8009760 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
  }
  return &context->tensors[tensor_index];
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	689a      	ldr	r2, [r3, #8]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	019b      	lsls	r3, r3, #6
 800975e:	4413      	add	r3, r2
}
 8009760:	4618      	mov	r0, r3
 8009762:	371c      	adds	r7, #28
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  }
  TfLiteTensor* tensor = &context->tensors[tensor_index];
  return (tensor->is_variable) ? tensor : nullptr;
}
inline TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                               int index) {
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  const int tensor_index = node->outputs->data[index];
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	617b      	str	r3, [r7, #20]
  if (tensor_index < 0) {
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	da01      	bge.n	8009790 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x24>
    return nullptr;
 800978c:	2300      	movs	r3, #0
 800978e:	e004      	b.n	800979a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
  }
  return &context->tensors[tensor_index];
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	019b      	lsls	r3, r3, #6
 8009798:	4413      	add	r3, r2
}
 800979a:	4618      	mov	r0, r3
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 80097a6:	b480      	push	{r7}
 80097a8:	b083      	sub	sp, #12
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 80097b8:	e000      	b.n	80097bc <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d002      	beq.n	80097dc <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	e000      	b.n	80097de <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 80097ea:	b480      	push	{r7}
 80097ec:	b083      	sub	sp, #12
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 8009806:	b580      	push	{r7, lr}
 8009808:	b084      	sub	sp, #16
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 f89e 	bl	800995e <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b05      	cmp	r3, #5
 800983a:	dd08      	ble.n	800984e <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d004      	beq.n	800984e <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	4618      	mov	r0, r3
 800984a:	f001 fe21 	bl	800b490 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4618      	mov	r0, r3
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	da01      	bge.n	8009884 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8009880:	f001 fed8 	bl	800b634 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	429a      	cmp	r2, r3
 800988c:	db01      	blt.n	8009892 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800988e:	f001 fed1 	bl	800b634 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b05      	cmp	r3, #5
 8009898:	dd06      	ble.n	80098a8 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	e004      	b.n	80098b2 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	685b      	ldr	r3, [r3, #4]
  }
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b05      	cmp	r3, #5
 80098c8:	dd02      	ble.n	80098d0 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	e001      	b.n	80098d4 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	3304      	adds	r3, #4
  }
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b05      	cmp	r3, #5
 80098ee:	dd02      	ble.n	80098f6 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	e001      	b.n	80098fa <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3304      	adds	r3, #4
  }
 80098fa:	4618      	mov	r0, r3
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <_ZN6tflite12RuntimeShape6ResizeEi>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8009906:	b580      	push	{r7, lr}
 8009908:	b082      	sub	sp, #8
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b05      	cmp	r3, #5
 8009916:	dd08      	ble.n	800992a <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	4618      	mov	r0, r3
 8009926:	f001 fdb3 	bl	800b490 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	683a      	ldr	r2, [r7, #0]
 800992e:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	2b05      	cmp	r3, #5
 8009934:	dd0f      	ble.n	8009956 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800993c:	4293      	cmp	r3, r2
 800993e:	d201      	bcs.n	8009944 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	e001      	b.n	8009948 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8009944:	f04f 33ff 	mov.w	r3, #4294967295
 8009948:	4618      	mov	r0, r3
 800994a:	f001 fdc3 	bl	800b4d4 <_Znaj>
 800994e:	4603      	mov	r3, r0
 8009950:	461a      	mov	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8009956:	bf00      	nop
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 800995e:	b580      	push	{r7, lr}
 8009960:	b086      	sub	sp, #24
 8009962:	af00      	add	r7, sp, #0
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	60b9      	str	r1, [r7, #8]
 8009968:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7ff ffca 	bl	8009906 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f7ff ffa1 	bl	80098ba <_ZN6tflite12RuntimeShape8DimsDataEv>
 8009978:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	461a      	mov	r2, r3
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	6978      	ldr	r0, [r7, #20]
 8009984:	f002 fe8c 	bl	800c6a0 <memcpy>
  }
 8009988:	bf00      	nop
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d103      	bne.n	80099a8 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff ff22 	bl	80097ea <_ZN6tflite12RuntimeShapeC1Ev>
 80099a6:	e00d      	b.n	80099c4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	3304      	adds	r3, #4
 80099b8:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	6939      	ldr	r1, [r7, #16]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff ff21 	bl	8009806 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 80099de:	e000      	b.n	80099e2 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 80099ee:	b480      	push	{r7}
 80099f0:	b083      	sub	sp, #12
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	e000      	b.n	8009a04 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8009a22:	e000      	b.n	8009a26 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	e000      	b.n	8009a48 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8009a54:	b480      	push	{r7}
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
	...

08009a68 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	4b04      	ldr	r3, [pc, #16]	; (8009a80 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eeb0 0a67 	vmov.f32	s0, s15
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	7f7fffff 	.word	0x7f7fffff

08009a84 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8009a84:	b480      	push	{r7}
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8009a8c:	ee07 3a90 	vmov	s15, r3
 8009a90:	eeb0 0a67 	vmov.f32	s0, s15
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8009a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009aa0:	b092      	sub	sp, #72	; 0x48
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	61f8      	str	r0, [r7, #28]
 8009aa6:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8009aa8:	69fa      	ldr	r2, [r7, #28]
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d107      	bne.n	8009ac0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8009ab0:	f7ff ffd0 	bl	8009a54 <_ZNSt14numeric_limitsIlE3minEv>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d101      	bne.n	8009ac0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8009abc:	2301      	movs	r3, #1
 8009abe:	e000      	b.n	8009ac2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	17da      	asrs	r2, r3, #31
 8009aca:	60bb      	str	r3, [r7, #8]
 8009acc:	60fa      	str	r2, [r7, #12]
 8009ace:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ad2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	17da      	asrs	r2, r3, #31
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	607a      	str	r2, [r7, #4]
 8009ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ae2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 8009ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aea:	fb03 f202 	mul.w	r2, r3, r2
 8009aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009af2:	fb01 f303 	mul.w	r3, r1, r3
 8009af6:	4413      	add	r3, r2
 8009af8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009afc:	fba1 4502 	umull	r4, r5, r1, r2
 8009b00:	442b      	add	r3, r5
 8009b02:	461d      	mov	r5, r3
 8009b04:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8009b08:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009b0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	db02      	blt.n	8009b1a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8009b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b18:	e000      	b.n	8009b1c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 8009b1a:	4b1a      	ldr	r3, [pc, #104]	; (8009b84 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	17da      	asrs	r2, r3, #31
 8009b22:	4698      	mov	r8, r3
 8009b24:	4691      	mov	r9, r2
 8009b26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b2a:	eb18 0102 	adds.w	r1, r8, r2
 8009b2e:	6139      	str	r1, [r7, #16]
 8009b30:	eb49 0303 	adc.w	r3, r9, r3
 8009b34:	617b      	str	r3, [r7, #20]
 8009b36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	da07      	bge.n	8009b4e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 8009b3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b42:	eb12 0a01 	adds.w	sl, r2, r1
 8009b46:	f143 0b00 	adc.w	fp, r3, #0
 8009b4a:	4652      	mov	r2, sl
 8009b4c:	465b      	mov	r3, fp
 8009b4e:	f04f 0000 	mov.w	r0, #0
 8009b52:	f04f 0100 	mov.w	r1, #0
 8009b56:	0fd0      	lsrs	r0, r2, #31
 8009b58:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8009b5c:	17d9      	asrs	r1, r3, #31
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8009b62:	4613      	mov	r3, r2
 8009b64:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8009b66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 8009b6e:	f7fb ff35 	bl	80059dc <_ZNSt14numeric_limitsIlE3maxEv>
 8009b72:	4603      	mov	r3, r0
 8009b74:	e000      	b.n	8009b78 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 8009b76:	6a3b      	ldr	r3, [r7, #32]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3748      	adds	r7, #72	; 0x48
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b82:	bf00      	nop
 8009b84:	c0000001 	.word	0xc0000001

08009b88 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>:
      break;
  }
}

inline float ActivationFunctionWithMinMax(float x, float output_activation_min,
                                          float output_activation_max) {
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009b92:	edc7 0a02 	vstr	s1, [r7, #8]
 8009b96:	ed87 1a01 	vstr	s2, [r7, #4]
  return std::min(std::max(x, output_activation_min), output_activation_max);
 8009b9a:	f107 0208 	add.w	r2, r7, #8
 8009b9e:	f107 030c 	add.w	r3, r7, #12
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7fb ffc8 	bl	8005b3a <_ZSt3maxIfERKT_S2_S2_>
 8009baa:	4602      	mov	r2, r0
 8009bac:	1d3b      	adds	r3, r7, #4
 8009bae:	4619      	mov	r1, r3
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	f7fb ffa9 	bl	8005b08 <_ZSt3minIfERKT_S2_S2_>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	ee07 3a90 	vmov	s15, r3
}
 8009bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8009bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bca:	b089      	sub	sp, #36	; 0x24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	2900      	cmp	r1, #0
 8009bd6:	da06      	bge.n	8009be6 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8009bd8:	4b31      	ldr	r3, [pc, #196]	; (8009ca0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8009bda:	4a32      	ldr	r2, [pc, #200]	; (8009ca4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8009bdc:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8009be0:	4831      	ldr	r0, [pc, #196]	; (8009ca8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8009be2:	f001 fd2f 	bl	800b644 <__assert_func>
  assert(exponent <= 31);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	291f      	cmp	r1, #31
 8009bea:	dd06      	ble.n	8009bfa <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8009bec:	4b2f      	ldr	r3, [pc, #188]	; (8009cac <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8009bee:	4a2d      	ldr	r2, [pc, #180]	; (8009ca4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8009bf0:	f240 1167 	movw	r1, #359	; 0x167
 8009bf4:	482c      	ldr	r0, [pc, #176]	; (8009ca8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8009bf6:	f001 fd25 	bl	800b644 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8009bfa:	f04f 0001 	mov.w	r0, #1
 8009bfe:	f04f 0100 	mov.w	r1, #0
 8009c02:	683c      	ldr	r4, [r7, #0]
 8009c04:	f1a4 0620 	sub.w	r6, r4, #32
 8009c08:	f1c4 0520 	rsb	r5, r4, #32
 8009c0c:	fa01 f304 	lsl.w	r3, r1, r4
 8009c10:	fa00 f606 	lsl.w	r6, r0, r6
 8009c14:	4333      	orrs	r3, r6
 8009c16:	fa20 f505 	lsr.w	r5, r0, r5
 8009c1a:	432b      	orrs	r3, r5
 8009c1c:	fa00 f204 	lsl.w	r2, r0, r4
 8009c20:	4613      	mov	r3, r2
 8009c22:	3b01      	subs	r3, #1
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 f885 	bl	8009d34 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8009c2a:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	f000 f881 	bl	8009d34 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8009c32:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8009c34:	2001      	movs	r0, #1
 8009c36:	f000 f87d 	bl	8009d34 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8009c3a:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8009c3c:	69f9      	ldr	r1, [r7, #28]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f883 	bl	8009d4a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8009c44:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8009c46:	2101      	movs	r1, #1
 8009c48:	69f8      	ldr	r0, [r7, #28]
 8009c4a:	f000 f88c 	bl	8009d66 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8009c4e:	4604      	mov	r4, r0
 8009c50:	69b9      	ldr	r1, [r7, #24]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f896 	bl	8009d84 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	6979      	ldr	r1, [r7, #20]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 f874 	bl	8009d4a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8009c62:	4603      	mov	r3, r0
 8009c64:	4619      	mov	r1, r3
 8009c66:	4620      	mov	r0, r4
 8009c68:	f000 f8a0 	bl	8009dac <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8009c6c:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f878 	bl	8009d66 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8009c76:	4604      	mov	r4, r0
 8009c78:	68f9      	ldr	r1, [r7, #12]
 8009c7a:	6938      	ldr	r0, [r7, #16]
 8009c7c:	f000 f8a4 	bl	8009dc8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8009c80:	4603      	mov	r3, r0
 8009c82:	6979      	ldr	r1, [r7, #20]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 f860 	bl	8009d4a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 f88c 	bl	8009dac <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8009c94:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3724      	adds	r7, #36	; 0x24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	08011590 	.word	0x08011590
 8009ca4:	080115a0 	.word	0x080115a0
 8009ca8:	080115fc 	.word	0x080115fc
 8009cac:	08011678 	.word	0x08011678

08009cb0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d10b      	bne.n	8009cdc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	f04f 0200 	mov.w	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8009ccc:	f7ff fecc 	bl	8009a68 <_ZNSt14numeric_limitsIfE3maxEv>
 8009cd0:	eef0 7a40 	vmov.f32	s15, s0
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8009cda:	e023      	b.n	8009d24 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d107      	bne.n	8009cf2 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f04f 0200 	mov.w	r2, #0
 8009ce8:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a0f      	ldr	r2, [pc, #60]	; (8009d2c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8009cee:	601a      	str	r2, [r3, #0]
}
 8009cf0:	e018      	b.n	8009d24 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d107      	bne.n	8009d08 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	4a0d      	ldr	r2, [pc, #52]	; (8009d30 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8009cfc:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009d04:	601a      	str	r2, [r3, #0]
}
 8009d06:	e00d      	b.n	8009d24 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8009d08:	f7ff febc 	bl	8009a84 <_ZNSt14numeric_limitsIfE6lowestEv>
 8009d0c:	eef0 7a40 	vmov.f32	s15, s0
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8009d16:	f7ff fea7 	bl	8009a68 <_ZNSt14numeric_limitsIfE3maxEv>
 8009d1a:	eef0 7a40 	vmov.f32	s15, s0
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	edc3 7a00 	vstr	s15, [r3]
}
 8009d24:	bf00      	nop
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	40c00000 	.word	0x40c00000
 8009d30:	bf800000 	.word	0xbf800000

08009d34 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  return x;
 8009d3c:	687b      	ldr	r3, [r7, #4]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8009d4a:	b480      	push	{r7}
 8009d4c:	b083      	sub	sp, #12
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
  return a & b;
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	4013      	ands	r3, r2
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	fa42 f303 	asr.w	r3, r2, r3
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	bfb4      	ite	lt
 8009d96:	2301      	movlt	r3, #1
 8009d98:	2300      	movge	r3, #0
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 f827 	bl	8009df0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8009da2:	4603      	mov	r3, r0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  return a + b;
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	4413      	add	r3, r2
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	bfcc      	ite	gt
 8009dda:	2301      	movgt	r3, #1
 8009ddc:	2300      	movle	r3, #0
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 f805 	bl	8009df0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8009de6:	4603      	mov	r3, r0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d004      	beq.n	8009e08 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8009dfe:	2000      	movs	r0, #0
 8009e00:	f000 f807 	bl	8009e12 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8009e04:	4603      	mov	r3, r0
 8009e06:	e000      	b.n	8009e0a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  return ~a;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	43db      	mvns	r3, r3
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d002      	beq.n	8009e3e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8009e3c:	e000      	b.n	8009e40 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8009e4c:	b590      	push	{r4, r7, lr}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009e5a:	68b9      	ldr	r1, [r7, #8]
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f7ff fd07 	bl	8009870 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009e62:	4604      	mov	r4, r0
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7ff fd02 	bl	8009870 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	429c      	cmp	r4, r3
 8009e70:	d001      	beq.n	8009e76 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8009e72:	f001 fbdf 	bl	800b634 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8009e76:	68b9      	ldr	r1, [r7, #8]
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f7ff fcf9 	bl	8009870 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	613b      	str	r3, [r7, #16]
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7ff fcf3 	bl	8009870 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	f107 0214 	add.w	r2, r7, #20
 8009e92:	f107 0310 	add.w	r3, r7, #16
 8009e96:	4611      	mov	r1, r2
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fc f8b3 	bl	8006004 <_ZSt3minIlERKT_S2_S2_>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	681b      	ldr	r3, [r3, #0]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	371c      	adds	r7, #28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd90      	pop	{r4, r7, pc}

08009eaa <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b086      	sub	sp, #24
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	60f8      	str	r0, [r7, #12]
 8009eb2:	60b9      	str	r1, [r7, #8]
 8009eb4:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ebc:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dc02      	bgt.n	8009eca <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	425b      	negs	r3, r3
 8009ec8:	e000      	b.n	8009ecc <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed6:	68b9      	ldr	r1, [r7, #8]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7ff fddf 	bl	8009a9c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	6939      	ldr	r1, [r7, #16]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff fe70 	bl	8009bc8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8009ee8:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:
                                                  int index) {
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	60f8      	str	r0, [r7, #12]
 8009efa:	60b9      	str	r1, [r7, #8]
 8009efc:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	68b9      	ldr	r1, [r7, #8]
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f7ff fc15 	bl	8009732 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8009f08:	4603      	mov	r3, r0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b086      	sub	sp, #24
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff fc9b 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009f22:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	db03      	blt.n	8009f32 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	db01      	blt.n	8009f36 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8009f32:	f001 fb7f 	bl	800b634 <abort>
  const auto* dims_data = shape.DimsData();
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7ff fcd2 	bl	80098e0 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8009f3c:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8009f42:	2300      	movs	r3, #0
 8009f44:	613b      	str	r3, [r7, #16]
 8009f46:	e011      	b.n	8009f6c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d005      	beq.n	8009f5c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	4413      	add	r3, r2
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	e000      	b.n	8009f5e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	fb02 f303 	mul.w	r3, r2, r3
 8009f64:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	613b      	str	r3, [r7, #16]
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	dbe9      	blt.n	8009f48 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 8009f74:	697b      	ldr	r3, [r7, #20]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8009f7e:	b590      	push	{r4, r7, lr}
 8009f80:	b091      	sub	sp, #68	; 0x44
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	60b9      	str	r1, [r7, #8]
 8009f88:	607a      	str	r2, [r7, #4]
 8009f8a:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	69db      	ldr	r3, [r3, #28]
 8009f90:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8009f98:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009f9a:	f7ff fc5d 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009f9e:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8009fa0:	6838      	ldr	r0, [r7, #0]
 8009fa2:	f7ff fc59 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009fa6:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	4619      	mov	r1, r3
 8009fae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009fb0:	f7ff ffaf 	bl	8009f12 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8009fb4:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	1e99      	subs	r1, r3, #2
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fc0:	6838      	ldr	r0, [r7, #0]
 8009fc2:	f7ff ff43 	bl	8009e4c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8009fc6:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6838      	ldr	r0, [r7, #0]
 8009fd0:	f7ff fc4e 	bl	8009870 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009fd4:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fda:	e05e      	b.n	800a09a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8009fdc:	2300      	movs	r3, #0
 8009fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fe0:	e054      	b.n	800a08c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 8009fe2:	f04f 0300 	mov.w	r3, #0
 8009fe6:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8009fe8:	2300      	movs	r3, #0
 8009fea:	633b      	str	r3, [r7, #48]	; 0x30
 8009fec:	e020      	b.n	800a030 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 8009fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	fb03 f202 	mul.w	r2, r3, r2
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	4413      	add	r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	4413      	add	r3, r2
 800a000:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	fb03 f202 	mul.w	r2, r3, r2
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	4413      	add	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a014:	4413      	add	r3, r2
 800a016:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800a01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a01e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a022:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a026:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	3301      	adds	r3, #1
 800a02e:	633b      	str	r3, [r7, #48]	; 0x30
 800a030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	429a      	cmp	r2, r3
 800a036:	dbda      	blt.n	8009fee <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 800a038:	f04f 0300 	mov.w	r3, #0
 800a03c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 800a03e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a040:	2b00      	cmp	r3, #0
 800a042:	d005      	beq.n	800a050 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a04a:	4413      	add	r3, r2
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800a050:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a054:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a060:	fb03 f202 	mul.w	r2, r3, r2
 800a064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a06c:	18d4      	adds	r4, r2, r3
 800a06e:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800a072:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800a076:	eeb0 0a67 	vmov.f32	s0, s15
 800a07a:	f7ff fd85 	bl	8009b88 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 800a07e:	eef0 7a40 	vmov.f32	s15, s0
 800a082:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	3301      	adds	r3, #1
 800a08a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a08c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	429a      	cmp	r2, r3
 800a092:	dba6      	blt.n	8009fe2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 800a094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a096:	3301      	adds	r3, #1
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a09a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	db9c      	blt.n	8009fdc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800a0a2:	bf00      	nop
 800a0a4:	bf00      	nop
 800a0a6:	3744      	adds	r7, #68	; 0x44
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd90      	pop	{r4, r7, pc}

0800a0ac <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b096      	sub	sp, #88	; 0x58
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800a0e4:	6838      	ldr	r0, [r7, #0]
 800a0e6:	f7ff fbb7 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	dc01      	bgt.n	800a0f4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 800a0f0:	f001 faa0 	bl	800b634 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800a0f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a0f6:	f7ff fbaf 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	dc01      	bgt.n	800a104 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 800a100:	f001 fa98 	bl	800b634 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800a104:	69ba      	ldr	r2, [r7, #24]
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	429a      	cmp	r2, r3
 800a10a:	dd01      	ble.n	800a110 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 800a10c:	f001 fa92 	bl	800b634 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800a110:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a112:	f7ff fba1 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a116:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 800a118:	6838      	ldr	r0, [r7, #0]
 800a11a:	f7ff fb9d 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a11e:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800a120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a122:	3b01      	subs	r3, #1
 800a124:	4619      	mov	r1, r3
 800a126:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a128:	f7ff fef3 	bl	8009f12 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800a12c:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a130:	1e99      	subs	r1, r3, #2
 800a132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a134:	3b01      	subs	r3, #1
 800a136:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a138:	6838      	ldr	r0, [r7, #0]
 800a13a:	f7ff fe87 	bl	8009e4c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800a13e:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	3b01      	subs	r3, #1
 800a144:	4619      	mov	r1, r3
 800a146:	6838      	ldr	r0, [r7, #0]
 800a148:	f7ff fb92 	bl	8009870 <_ZNK6tflite12RuntimeShape4DimsEi>
 800a14c:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 800a14e:	2300      	movs	r3, #0
 800a150:	657b      	str	r3, [r7, #84]	; 0x54
 800a152:	e072      	b.n	800a23a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a154:	2300      	movs	r3, #0
 800a156:	653b      	str	r3, [r7, #80]	; 0x50
 800a158:	e068      	b.n	800a22c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x180>
      int32 acc = 0;
 800a15a:	2300      	movs	r3, #0
 800a15c:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800a15e:	2300      	movs	r3, #0
 800a160:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a162:	e023      	b.n	800a1ac <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x100>
        int32 input_val = input_data[b * accum_depth + d];
 800a164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a168:	fb03 f202 	mul.w	r2, r3, r2
 800a16c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a16e:	4413      	add	r3, r2
 800a170:	461a      	mov	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4413      	add	r3, r2
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 800a17a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a17e:	fb03 f202 	mul.w	r2, r3, r2
 800a182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a184:	4413      	add	r3, r2
 800a186:	461a      	mov	r2, r3
 800a188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a18a:	4413      	add	r3, r2
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a194:	4413      	add	r3, r2
 800a196:	6a39      	ldr	r1, [r7, #32]
 800a198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a19a:	440a      	add	r2, r1
 800a19c:	fb03 f202 	mul.w	r2, r3, r2
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800a1a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	dbd7      	blt.n	800a164 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb8>
      }
      if (bias_data) {
 800a1b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d007      	beq.n	800a1ca <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x11e>
        acc += bias_data[out_c];
 800a1ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a1c0:	4413      	add	r3, r2
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff fe6a 	bl	8009eaa <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1de:	4413      	add	r3, r2
 800a1e0:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 800a1e2:	f107 0218 	add.w	r2, r7, #24
 800a1e6:	f107 0310 	add.w	r3, r7, #16
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7fb ff1d 	bl	800602c <_ZSt3maxIlERKT_S2_S2_>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 800a1f8:	f107 0214 	add.w	r2, r7, #20
 800a1fc:	f107 0310 	add.w	r3, r7, #16
 800a200:	4611      	mov	r1, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f7fb fefe 	bl	8006004 <_ZSt3minIlERKT_S2_S2_>
 800a208:	4603      	mov	r3, r0
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 800a20e:	6939      	ldr	r1, [r7, #16]
 800a210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a212:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a214:	fb03 f202 	mul.w	r2, r3, r2
 800a218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a21a:	4413      	add	r3, r2
 800a21c:	461a      	mov	r2, r3
 800a21e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a220:	4413      	add	r3, r2
 800a222:	b2ca      	uxtb	r2, r1
 800a224:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a228:	3301      	adds	r3, #1
 800a22a:	653b      	str	r3, [r7, #80]	; 0x50
 800a22c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a230:	429a      	cmp	r2, r3
 800a232:	db92      	blt.n	800a15a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xae>
  for (int b = 0; b < batches; ++b) {
 800a234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a236:	3301      	adds	r3, #1
 800a238:	657b      	str	r3, [r7, #84]	; 0x54
 800a23a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	429a      	cmp	r2, r3
 800a240:	db88      	blt.n	800a154 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa8>
    }
  }
}
 800a242:	bf00      	nop
 800a244:	bf00      	nop
 800a246:	3758      	adds	r7, #88	; 0x58
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b098      	sub	sp, #96	; 0x60
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 output_multiplier = params.output_multiplier;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	647b      	str	r3, [r7, #68]	; 0x44
  const int output_shift = params.output_shift;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_activation_min = params.quantized_activation_min;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int32 output_activation_max = params.quantized_activation_max;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	63bb      	str	r3, [r7, #56]	; 0x38

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800a284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	429a      	cmp	r2, r3
 800a28a:	dd01      	ble.n	800a290 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 800a28c:	f001 f9d2 	bl	800b634 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 800a290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 800a296:	f001 f9cd 	bl	800b634 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800a29a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a29c:	f7ff fadc 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a2a0:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 800a2a2:	6838      	ldr	r0, [r7, #0]
 800a2a4:	f7ff fad8 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a2a8:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800a2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a2b2:	f7ff fe2e 	bl	8009f12 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800a2b6:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	1e99      	subs	r1, r3, #2
 800a2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a2c2:	6838      	ldr	r0, [r7, #0]
 800a2c4:	f7ff fdc2 	bl	8009e4c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800a2c8:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6838      	ldr	r0, [r7, #0]
 800a2d2:	f7ff facd 	bl	8009870 <_ZNK6tflite12RuntimeShape4DimsEi>
 800a2d6:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 800a2d8:	2300      	movs	r3, #0
 800a2da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2dc:	e07b      	b.n	800a3d6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a2de:	2300      	movs	r3, #0
 800a2e0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2e2:	e071      	b.n	800a3c8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x17c>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 800a2e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a2ea:	4413      	add	r3, r2
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	657b      	str	r3, [r7, #84]	; 0x54
 800a2f4:	e02b      	b.n	800a34e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x102>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 800a2f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2fa:	fb03 f202 	mul.w	r2, r3, r2
 800a2fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a300:	4413      	add	r3, r2
 800a302:	461a      	mov	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4413      	add	r3, r2
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a30e:	b29b      	uxth	r3, r3
 800a310:	4413      	add	r3, r2
 800a312:	b29b      	uxth	r3, r3
 800a314:	847b      	strh	r3, [r7, #34]	; 0x22
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 800a316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a31a:	fb03 f202 	mul.w	r2, r3, r2
 800a31e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a320:	4413      	add	r3, r2
 800a322:	461a      	mov	r2, r3
 800a324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a326:	4413      	add	r3, r2
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a32e:	b29b      	uxth	r3, r3
 800a330:	4413      	add	r3, r2
 800a332:	b29b      	uxth	r3, r3
 800a334:	843b      	strh	r3, [r7, #32]
        accum += filter_val * input_val;
 800a336:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a33a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800a33e:	fb03 f202 	mul.w	r2, r3, r2
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	4413      	add	r3, r2
 800a346:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800a348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a34a:	3301      	adds	r3, #1
 800a34c:	657b      	str	r3, [r7, #84]	; 0x54
 800a34e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	429a      	cmp	r2, r3
 800a354:	dbcf      	blt.n	800a2f6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xaa>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a35a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff fda4 	bl	8009eaa <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800a362:	4603      	mov	r3, r0
      accum =
 800a364:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 800a366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	61bb      	str	r3, [r7, #24]
 800a36e:	f107 0218 	add.w	r2, r7, #24
 800a372:	f107 0314 	add.w	r3, r7, #20
 800a376:	4611      	mov	r1, r2
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fb fe57 	bl	800602c <_ZSt3maxIlERKT_S2_S2_>
 800a37e:	4603      	mov	r3, r0
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 800a384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	61fb      	str	r3, [r7, #28]
 800a38c:	f107 021c 	add.w	r2, r7, #28
 800a390:	f107 0314 	add.w	r3, r7, #20
 800a394:	4611      	mov	r1, r2
 800a396:	4618      	mov	r0, r3
 800a398:	f7fb fe34 	bl	8006004 <_ZSt3minIlERKT_S2_S2_>
 800a39c:	4603      	mov	r3, r0
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3a6:	4413      	add	r3, r2
 800a3a8:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 800a3aa:	6979      	ldr	r1, [r7, #20]
 800a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3b0:	fb03 f202 	mul.w	r2, r3, r2
 800a3b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3b6:	4413      	add	r3, r2
 800a3b8:	005b      	lsls	r3, r3, #1
 800a3ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a3bc:	4413      	add	r3, r2
 800a3be:	b20a      	sxth	r2, r1
 800a3c0:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a3c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	db89      	blt.n	800a2e4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x98>
  for (int b = 0; b < batches; ++b) {
 800a3d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	f6ff af7f 	blt.w	800a2de <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x92>
    }
  }
}
 800a3e0:	bf00      	nop
 800a3e2:	bf00      	nop
 800a3e4:	3760      	adds	r7, #96	; 0x60
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b096      	sub	sp, #88	; 0x58
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	60b9      	str	r1, [r7, #8]
 800a3f4:	607a      	str	r2, [r7, #4]
 800a3f6:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800a422:	6838      	ldr	r0, [r7, #0]
 800a424:	f7ff fa18 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	dc01      	bgt.n	800a432 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 800a42e:	f001 f901 	bl	800b634 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800a432:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a434:	f7ff fa10 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d001      	beq.n	800a442 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 800a43e:	f001 f8f9 	bl	800b634 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800a442:	69fa      	ldr	r2, [r7, #28]
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	429a      	cmp	r2, r3
 800a448:	dd01      	ble.n	800a44e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 800a44a:	f001 f8f3 	bl	800b634 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800a44e:	6838      	ldr	r0, [r7, #0]
 800a450:	f7ff fa02 	bl	8009858 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a454:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 800a456:	2100      	movs	r1, #0
 800a458:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a45a:	f7ff fa09 	bl	8009870 <_ZNK6tflite12RuntimeShape4DimsEi>
 800a45e:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 800a460:	2101      	movs	r1, #1
 800a462:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a464:	f7ff fa04 	bl	8009870 <_ZNK6tflite12RuntimeShape4DimsEi>
 800a468:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800a46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46c:	3b02      	subs	r3, #2
 800a46e:	4619      	mov	r1, r3
 800a470:	6838      	ldr	r0, [r7, #0]
 800a472:	f7ff f9fd 	bl	8009870 <_ZNK6tflite12RuntimeShape4DimsEi>
 800a476:	4602      	mov	r2, r0
 800a478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47a:	4293      	cmp	r3, r2
 800a47c:	dd01      	ble.n	800a482 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 800a47e:	f001 f8d9 	bl	800b634 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800a482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a484:	3b01      	subs	r3, #1
 800a486:	4619      	mov	r1, r3
 800a488:	6838      	ldr	r0, [r7, #0]
 800a48a:	f7ff f9f1 	bl	8009870 <_ZNK6tflite12RuntimeShape4DimsEi>
 800a48e:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 800a490:	2300      	movs	r3, #0
 800a492:	657b      	str	r3, [r7, #84]	; 0x54
 800a494:	e074      	b.n	800a580 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a496:	2300      	movs	r3, #0
 800a498:	653b      	str	r3, [r7, #80]	; 0x50
 800a49a:	e06a      	b.n	800a572 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x188>
      int32 acc = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4a4:	e025      	b.n	800a4f2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x108>
        int32 input_val = input_data[b * accum_depth + d];
 800a4a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4aa:	fb03 f202 	mul.w	r2, r3, r2
 800a4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b0:	4413      	add	r3, r2
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	f993 3000 	ldrsb.w	r3, [r3]
 800a4bc:	627b      	str	r3, [r7, #36]	; 0x24
        int32 filter_val = filter_data[out_c * accum_depth + d];
 800a4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4c2:	fb03 f202 	mul.w	r2, r3, r2
 800a4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c8:	4413      	add	r3, r2
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f993 3000 	ldrsb.w	r3, [r3]
 800a4d4:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800a4d6:	6a3a      	ldr	r2, [r7, #32]
 800a4d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4da:	4413      	add	r3, r2
 800a4dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4e0:	440a      	add	r2, r1
 800a4e2:	fb03 f202 	mul.w	r2, r3, r2
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800a4ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	dbd5      	blt.n	800a4a6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xbc>
      }
      if (bias_data) {
 800a4fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d007      	beq.n	800a510 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x126>
        acc += bias_data[out_c];
 800a500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a506:	4413      	add	r3, r2
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	4413      	add	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fcc7 	bl	8009eaa <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800a51c:	4603      	mov	r3, r0
 800a51e:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a524:	4413      	add	r3, r2
 800a526:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 800a528:	f107 021c 	add.w	r2, r7, #28
 800a52c:	f107 0314 	add.w	r3, r7, #20
 800a530:	4611      	mov	r1, r2
 800a532:	4618      	mov	r0, r3
 800a534:	f7fb fd7a 	bl	800602c <_ZSt3maxIlERKT_S2_S2_>
 800a538:	4603      	mov	r3, r0
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800a53e:	f107 0218 	add.w	r2, r7, #24
 800a542:	f107 0314 	add.w	r3, r7, #20
 800a546:	4611      	mov	r1, r2
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fb fd5b 	bl	8006004 <_ZSt3minIlERKT_S2_S2_>
 800a54e:	4603      	mov	r3, r0
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800a554:	6979      	ldr	r1, [r7, #20]
 800a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a558:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a55a:	fb03 f202 	mul.w	r2, r3, r2
 800a55e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a560:	4413      	add	r3, r2
 800a562:	461a      	mov	r2, r3
 800a564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a566:	4413      	add	r3, r2
 800a568:	b24a      	sxtb	r2, r1
 800a56a:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a56c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a56e:	3301      	adds	r3, #1
 800a570:	653b      	str	r3, [r7, #80]	; 0x50
 800a572:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	429a      	cmp	r2, r3
 800a578:	db90      	blt.n	800a49c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb2>
  for (int b = 0; b < batches; ++b) {
 800a57a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a57c:	3301      	adds	r3, #1
 800a57e:	657b      	str	r3, [r7, #84]	; 0x54
 800a580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	429a      	cmp	r2, r3
 800a586:	db86      	blt.n	800a496 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xac>
    }
  }
}
 800a588:	bf00      	nop
 800a58a:	bf00      	nop
 800a58c:	3758      	adds	r7, #88	; 0x58
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 800a592:	b580      	push	{r7, lr}
 800a594:	b08c      	sub	sp, #48	; 0x30
 800a596:	af02      	add	r7, sp, #8
 800a598:	60f8      	str	r0, [r7, #12]
 800a59a:	607b      	str	r3, [r7, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	72fb      	strb	r3, [r7, #11]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 800a5aa:	7abb      	ldrb	r3, [r7, #10]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d041      	beq.n	800a634 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
    double real_multiplier = 0.0;
 800a5b0:	f04f 0200 	mov.w	r2, #0
 800a5b4:	f04f 0300 	mov.w	r3, #0
 800a5b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800a5bc:	f107 0318 	add.w	r3, r7, #24
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ca:	6879      	ldr	r1, [r7, #4]
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f7fb fb3b 	bl	8005c48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x54>
 800a5e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a5e4:	e028      	b.n	800a638 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 800a5e6:	ed97 7b06 	vldr	d7, [r7, #24]
 800a5ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ec:	f107 0214 	add.w	r2, r7, #20
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	eeb0 0a47 	vmov.f32	s0, s14
 800a5f8:	eef0 0a67 	vmov.f32	s1, s15
 800a5fc:	f7fb f9f8 	bl	80059f0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	425a      	negs	r2, r3
 800a604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a606:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800a608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a60a:	f103 0208 	add.w	r2, r3, #8
 800a60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a610:	330c      	adds	r3, #12
 800a612:	7af9      	ldrb	r1, [r7, #11]
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	4613      	mov	r3, r2
 800a618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f7fb fc9e 	bl	8005f5c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800a620:	4603      	mov	r3, r0
 800a622:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a626:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d002      	beq.n	800a634 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
 800a62e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a632:	e001      	b.n	800a638 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 800a634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3728      	adds	r7, #40	; 0x28
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a650:	2b00      	cmp	r3, #0
 800a652:	d101      	bne.n	800a658 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 800a654:	f000 ffee 	bl	800b634 <abort>
  void* data = nullptr;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a660:	f107 0214 	add.w	r2, r7, #20
 800a664:	2114      	movs	r1, #20
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	4798      	blx	r3
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	bf0c      	ite	eq
 800a670:	2301      	moveq	r3, #1
 800a672:	2300      	movne	r3, #0
 800a674:	b2db      	uxtb	r3, r3
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 800a67a:	2300      	movs	r3, #0
 800a67c:	e000      	b.n	800a680 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 800a67e:	697b      	ldr	r3, [r7, #20]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800a688:	b5b0      	push	{r4, r5, r7, lr}
 800a68a:	b08c      	sub	sp, #48	; 0x30
 800a68c:	af04      	add	r7, sp, #16
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800a69a:	f000 ffcb 	bl	800b634 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800a6a6:	f000 ffc5 	bl	800b634 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	61fb      	str	r3, [r7, #28]
  const auto params =
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f7ff f839 	bl	8009732 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800a6c0:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	6839      	ldr	r1, [r7, #0]
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff f833 	bl	8009732 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800a6cc:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff fc0d 	bl	8009ef2 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 800a6d8:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800a6da:	2200      	movs	r2, #0
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff f844 	bl	800976c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800a6e4:	60b8      	str	r0, [r7, #8]

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	781a      	ldrb	r2, [r3, #0]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d01a      	beq.n	800a728 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa0>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	695c      	ldr	r4, [r3, #20]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fa f9b4 	bl	8004a68 <TfLiteTypeGetName>
 800a700:	4605      	mov	r5, r0
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	4618      	mov	r0, r3
 800a708:	f7fa f9ae 	bl	8004a68 <TfLiteTypeGetName>
 800a70c:	4603      	mov	r3, r0
 800a70e:	9303      	str	r3, [sp, #12]
 800a710:	9502      	str	r5, [sp, #8]
 800a712:	4b17      	ldr	r3, [pc, #92]	; (800a770 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800a714:	9301      	str	r3, [sp, #4]
 800a716:	4b17      	ldr	r3, [pc, #92]	; (800a774 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	2360      	movs	r3, #96	; 0x60
 800a71c:	4a16      	ldr	r2, [pc, #88]	; (800a778 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 800a71e:	4917      	ldr	r1, [pc, #92]	; (800a77c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	47a0      	blx	r4
 800a724:	2301      	movs	r3, #1
 800a726:	e01e      	b.n	800a766 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	781a      	ldrb	r2, [r3, #0]
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	429a      	cmp	r2, r3
 800a732:	d006      	beq.n	800a742 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xba>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	4911      	ldr	r1, [pc, #68]	; (800a780 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	4798      	blx	r3
 800a73e:	2301      	movs	r3, #1
 800a740:	e011      	b.n	800a766 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xde>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	7819      	ldrb	r1, [r3, #0]
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	781a      	ldrb	r2, [r3, #0]
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	9303      	str	r3, [sp, #12]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	9302      	str	r3, [sp, #8]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7ff ff18 	bl	800a592 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 800a762:	4603      	mov	r3, r0
                         filter, bias, output, data);
 800a764:	bf00      	nop
}
 800a766:	4618      	mov	r0, r3
 800a768:	3720      	adds	r7, #32
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bdb0      	pop	{r4, r5, r7, pc}
 800a76e:	bf00      	nop
 800a770:	080116e8 	.word	0x080116e8
 800a774:	080116f8 	.word	0x080116f8
 800a778:	08011688 	.word	0x08011688
 800a77c:	080116cc 	.word	0x080116cc
 800a780:	08011704 	.word	0x08011704

0800a784 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 800a784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a786:	b0ad      	sub	sp, #180	; 0xb4
 800a788:	af06      	add	r7, sp, #24
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -input->params.zero_point;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	425b      	negs	r3, r3
 800a798:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
 800a79a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	425b      	negs	r3, r3
 800a7a2:	617b      	str	r3, [r7, #20]
  op_params.output_offset = output->params.zero_point;
 800a7a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	425b      	negs	r3, r3
 800a7b8:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 800a7c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7ff f8df 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800a7d2:	6838      	ldr	r0, [r7, #0]
 800a7d4:	f7ff f91c 	bl	8009a10 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800a7d8:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 800a7da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a7de:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7ff f8d4 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800a7e8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800a7ec:	f7ff f910 	bl	8009a10 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800a7f0:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 800a7f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a7f6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7ff f8c8 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800a800:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800a804:	f7ff fb11 	bl	8009e2a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800a808:	4605      	mov	r5, r0
      GetTensorShape(output), GetTensorData<int8_t>(output));
 800a80a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a80e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a812:	4618      	mov	r0, r3
 800a814:	f7ff f8bc 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800a818:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800a81c:	f7ff f909 	bl	8009a32 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800a820:	4603      	mov	r3, r0
 800a822:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a826:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a82a:	f107 0010 	add.w	r0, r7, #16
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a834:	9303      	str	r3, [sp, #12]
 800a836:	9502      	str	r5, [sp, #8]
 800a838:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	9400      	str	r4, [sp, #0]
 800a840:	4613      	mov	r3, r2
 800a842:	4632      	mov	r2, r6
 800a844:	f7ff fdd1 	bl	800a3ea <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      GetTensorShape(output), GetTensorData<int8_t>(output));
 800a848:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fe ffed 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 800a852:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe ffe8 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 800a85c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe ffe3 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 800a866:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe ffde 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	379c      	adds	r7, #156	; 0x9c
 800a876:	46bd      	mov	sp, r7
 800a878:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a87c <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 800a87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a87e:	b0c9      	sub	sp, #292	; 0x124
 800a880:	af06      	add	r7, sp, #24
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a888:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800a88c:	6001      	str	r1, [r0, #0]
 800a88e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800a892:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 800a896:	600a      	str	r2, [r1, #0]
 800a898:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800a89c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800a8a0:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 800a8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	425b      	negs	r3, r3
 800a8b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 800a8b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	425b      	negs	r3, r3
 800a8bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 800a8c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 800a8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ce:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 800a8d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a8d4:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 800a8d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8da:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 800a8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 800a8ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	425b      	negs	r3, r3
 800a8f8:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 800a8fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800a908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 800a916:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2b03      	cmp	r3, #3
 800a91e:	d002      	beq.n	800a926 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0xaa>
 800a920:	2b07      	cmp	r3, #7
 800a922:	d05e      	beq.n	800a9e2 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x166>
 800a924:	e0bb      	b.n	800aa9e <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x222>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 800a926:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a92a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a92e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a932:	6819      	ldr	r1, [r3, #0]
 800a934:	4610      	mov	r0, r2
 800a936:	f7ff f82b 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800a93a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a93e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a942:	6818      	ldr	r0, [r3, #0]
 800a944:	f7fe ff2f 	bl	80097a6 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800a948:	4606      	mov	r6, r0
 800a94a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a94e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff f81c 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800a958:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800a95c:	f7fe ff23 	bl	80097a6 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800a960:	4604      	mov	r4, r0
 800a962:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a966:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7ff f810 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800a970:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800a974:	f7ff fa59 	bl	8009e2a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800a978:	4605      	mov	r5, r0
 800a97a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a97e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff f804 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800a988:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a98c:	f7fe ff1c 	bl	80097c8 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800a990:	4603      	mov	r3, r0
 800a992:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800a996:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800a99a:	f107 0014 	add.w	r0, r7, #20
 800a99e:	9304      	str	r3, [sp, #16]
 800a9a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a9a4:	9303      	str	r3, [sp, #12]
 800a9a6:	9502      	str	r5, [sp, #8]
 800a9a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a9ac:	9301      	str	r3, [sp, #4]
 800a9ae:	9400      	str	r4, [sp, #0]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	4632      	mov	r2, r6
 800a9b4:	f7ff fb7a 	bl	800a0ac <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 800a9b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe ff35 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
 800a9c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe ff30 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
 800a9cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fe ff2b 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
 800a9d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe ff26 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800a9e0:	e06e      	b.n	800aac0 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x244>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 800a9e2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800a9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ee:	6819      	ldr	r1, [r3, #0]
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	f7fe ffcd 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800a9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	f7fe fed1 	bl	80097a6 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800aa04:	4606      	mov	r6, r0
 800aa06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800aa0a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe ffbe 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800aa14:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800aa18:	f7fe fec5 	bl	80097a6 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800aa22:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fe ffb2 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800aa2c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800aa30:	f7ff f9fb 	bl	8009e2a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800aa34:	4605      	mov	r5, r0
 800aa36:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800aa3a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe ffa6 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800aa44:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800aa48:	f000 f934 	bl	800acb4 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800aa52:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800aa56:	f107 0014 	add.w	r0, r7, #20
 800aa5a:	9304      	str	r3, [sp, #16]
 800aa5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800aa60:	9303      	str	r3, [sp, #12]
 800aa62:	9502      	str	r5, [sp, #8]
 800aa64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	9400      	str	r4, [sp, #0]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	4632      	mov	r2, r6
 800aa70:	f7ff fbec 	bl	800a24c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 800aa74:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fe fed7 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
 800aa7e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fe fed2 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
 800aa88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe fecd 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
 800aa92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fe fec8 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800aa9c:	e010      	b.n	800aac0 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x244>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	695c      	ldr	r4, [r3, #20]
 800aaa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7f9 ffdd 	bl	8004a68 <TfLiteTypeGetName>
 800aaae:	4602      	mov	r2, r0
 800aab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	4905      	ldr	r1, [pc, #20]	; (800aacc <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x250>)
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e000      	b.n	800aac2 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x246>
  }

  return kTfLiteOk;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aacc:	0801177c 	.word	0x0801177c

0800aad0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 800aad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aad2:	b0af      	sub	sp, #188	; 0xbc
 800aad4:	af06      	add	r7, sp, #24
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	603b      	str	r3, [r7, #0]
 800aadc:	4613      	mov	r3, r2
 800aade:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 800aae0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800aae4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7ff f8e0 	bl	8009cb0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 800aaf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf6:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 800aaf8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe ff46 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800ab04:	6838      	ldr	r0, [r7, #0]
 800ab06:	f7fe ff61 	bl	80099cc <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800ab0a:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 800ab0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ab10:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fe ff3b 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800ab1a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800ab1e:	f7fe ff55 	bl	80099cc <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800ab22:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800ab24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ab28:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fe ff2f 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800ab32:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ab36:	f7fe ff49 	bl	80099cc <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800ab3a:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800ab3c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ab40:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe ff23 	bl	8009990 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800ab4a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800ab4e:	f7fe ff4e 	bl	80099ee <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800ab52:	4603      	mov	r3, r0
 800ab54:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ab58:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ab5c:	f107 0010 	add.w	r0, r7, #16
 800ab60:	9304      	str	r3, [sp, #16]
 800ab62:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ab66:	9303      	str	r3, [sp, #12]
 800ab68:	9502      	str	r5, [sp, #8]
 800ab6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	9400      	str	r4, [sp, #0]
 800ab72:	4613      	mov	r3, r2
 800ab74:	4632      	mov	r2, r6
 800ab76:	f7ff fa02 	bl	8009f7e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800ab7a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe fe54 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
 800ab84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fe fe4f 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 800ab8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe fe4a 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 800ab98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fe fe45 	bl	800982c <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	37a4      	adds	r7, #164	; 0xa4
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800abac:	b590      	push	{r4, r7, lr}
 800abae:	b08d      	sub	sp, #52	; 0x34
 800abb0:	af04      	add	r7, sp, #16
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800abbe:	f000 fd39 	bl	800b634 <abort>
  const auto* params =
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800abc8:	2200      	movs	r2, #0
 800abca:	6839      	ldr	r1, [r7, #0]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7fe fdb0 	bl	8009732 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800abd2:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800abd4:	2201      	movs	r2, #1
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7fe fdaa 	bl	8009732 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800abde:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800abe0:	2202      	movs	r2, #2
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7ff f984 	bl	8009ef2 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 800abea:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800abec:	2200      	movs	r2, #0
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7fe fdbb 	bl	800976c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800abf6:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58>
 800ac00:	f000 fd18 	bl	800b634 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	2b09      	cmp	r3, #9
 800ac10:	d015      	beq.n	800ac3e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x92>
 800ac12:	2b09      	cmp	r3, #9
 800ac14:	dc2f      	bgt.n	800ac76 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d002      	beq.n	800ac20 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x74>
 800ac1a:	2b03      	cmp	r3, #3
 800ac1c:	d01d      	beq.n	800ac5a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xae>
 800ac1e:	e02a      	b.n	800ac76 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	781a      	ldrb	r2, [r3, #0]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	9302      	str	r3, [sp, #8]
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7ff ff4b 	bl	800aad0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 800ac3a:	4603      	mov	r3, r0
                       output);
 800ac3c:	e029      	b.n	800ac92 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	9302      	str	r3, [sp, #8]
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	6839      	ldr	r1, [r7, #0]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff fd97 	bl	800a784 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 800ac56:	4603      	mov	r3, r0
                               output);
 800ac58:	e01b      	b.n	800ac92 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	9302      	str	r3, [sp, #8]
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	6839      	ldr	r1, [r7, #0]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7ff fe05 	bl	800a87c <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 800ac72:	4603      	mov	r3, r0
 800ac74:	e00d      	b.n	800ac92 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	695c      	ldr	r4, [r3, #20]
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7f9 fef2 	bl	8004a68 <TfLiteTypeGetName>
 800ac84:	4602      	mov	r2, r0
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	4904      	ldr	r1, [pc, #16]	; (800ac9c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800ac90:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3724      	adds	r7, #36	; 0x24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd90      	pop	{r4, r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	0801177c 	.word	0x0801177c

0800aca0 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration* Register_FULLY_CONNECTED() {
 800aca0:	b480      	push	{r7}
 800aca2:	af00      	add	r7, sp, #0
                                 /*invoke=*/fully_connected::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 800aca4:	4b02      	ldr	r3, [pc, #8]	; (800acb0 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x10>)
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	20000c60 	.word	0x20000c60

0800acb4 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	e000      	b.n	800acca <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	370c      	adds	r7, #12
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
	...

0800acd8 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	4a04      	ldr	r2, [pc, #16]	; (800acf4 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	601a      	str	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4618      	mov	r0, r3
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	08011d04 	.word	0x08011d04

0800acf8 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	4a04      	ldr	r2, [pc, #16]	; (800ad14 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	601a      	str	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	08011d04 	.word	0x08011d04

0800ad18 <_ZN6tflite13MemoryPlannerD0Ev>:
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff ffe9 	bl	800acf8 <_ZN6tflite13MemoryPlannerD1Ev>
 800ad26:	2104      	movs	r1, #4
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fbaf 	bl	800b48c <_ZdlPvj>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 800ad3e:	2328      	movs	r3, #40	; 0x28
 800ad40:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 800ad42:	2328      	movs	r3, #40	; 0x28
  }
 800ad44:	4618      	mov	r0, r3
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 800ad50:	b480      	push	{r7}
 800ad52:	b089      	sub	sp, #36	; 0x24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800ad60:	2301      	movs	r3, #1
 800ad62:	61bb      	str	r3, [r7, #24]
 800ad64:	e04b      	b.n	800adfe <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
      if (values[i - 1] < values[i]) {
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	4413      	add	r3, r2
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	68f9      	ldr	r1, [r7, #12]
 800ad7c:	440b      	add	r3, r1
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	da39      	bge.n	800adf8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa8>
        const int value_temp = values[i - 1];
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	4413      	add	r3, r2
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	441a      	add	r2, r3
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ada4:	3b01      	subs	r3, #1
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	68f9      	ldr	r1, [r7, #12]
 800adaa:	440b      	add	r3, r1
 800adac:	6812      	ldr	r2, [r2, #0]
 800adae:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	4413      	add	r3, r2
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800adc2:	3b01      	subs	r3, #1
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	4413      	add	r3, r2
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	441a      	add	r2, r3
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800addc:	3b01      	subs	r3, #1
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	68b9      	ldr	r1, [r7, #8]
 800ade2:	440b      	add	r3, r1
 800ade4:	6812      	ldr	r2, [r2, #0]
 800ade6:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	4413      	add	r3, r2
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 800adf4:	2301      	movs	r3, #1
 800adf6:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	3301      	adds	r3, #1
 800adfc:	61bb      	str	r3, [r7, #24]
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	dbaf      	blt.n	800ad66 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x16>
  do {
 800ae06:	7ffb      	ldrb	r3, [r7, #31]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1a7      	bne.n	800ad5c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 800ae0c:	bf00      	nop
 800ae0e:	bf00      	nop
 800ae10:	3724      	adds	r7, #36	; 0x24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
	...

0800ae1c <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 800ae1c:	b590      	push	{r4, r7, lr}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7ff ff54 	bl	800acd8 <_ZN6tflite13MemoryPlannerC1Ev>
 800ae30:	4a22      	ldr	r2, [pc, #136]	; (800aebc <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	609a      	str	r2, [r3, #8]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800ae44:	687c      	ldr	r4, [r7, #4]
 800ae46:	f7ff ff77 	bl	800ad38 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	fbb4 f3f3 	udiv	r3, r4, r3
 800ae50:	461a      	mov	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	011b      	lsls	r3, r3, #4
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	4413      	add	r3, r2
 800ae6a:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	005b      	lsls	r3, r3, #1
 800aea0:	4413      	add	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	461a      	mov	r2, r3
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	4413      	add	r3, r2
 800aeaa:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	371c      	adds	r7, #28
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd90      	pop	{r4, r7, pc}
 800aebc:	08011ce4 	.word	0x08011ce4

0800aec0 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	4a05      	ldr	r2, [pc, #20]	; (800aee0 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7ff ff11 	bl	800acf8 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4618      	mov	r0, r3
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	08011ce4 	.word	0x08011ce4

0800aee4 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
}
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff ffe7 	bl	800aec0 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800aef2:	212c      	movs	r1, #44	; 0x2c
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fac9 	bl	800b48c <_ZdlPvj>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4618      	mov	r0, r3
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	689a      	ldr	r2, [r3, #8]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	db08      	blt.n	800af30 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	461a      	mov	r2, r3
 800af24:	4913      	ldr	r1, [pc, #76]	; (800af74 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 800af26:	68b8      	ldr	r0, [r7, #8]
 800af28:	f7f9 fdfc 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e01d      	b.n	800af6c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	68da      	ldr	r2, [r3, #12]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	011b      	lsls	r3, r3, #4
 800af3a:	4413      	add	r3, r2
 800af3c:	617b      	str	r3, [r7, #20]
  current->size = size;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	6a3a      	ldr	r2, [r7, #32]
 800af4e:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	f04f 32ff 	mov.w	r2, #4294967295
 800af56:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	1c5a      	adds	r2, r3, #1
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	08011890 	.word	0x08011890

0800af78 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 800af78:	b590      	push	{r4, r7, lr}
 800af7a:	b089      	sub	sp, #36	; 0x24
 800af7c:	af02      	add	r7, sp, #8
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	68da      	ldr	r2, [r3, #12]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	011b      	lsls	r3, r3, #4
 800af90:	4413      	add	r3, r2
 800af92:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3308      	adds	r3, #8
 800af9a:	681c      	ldr	r4, [r3, #0]
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	68b9      	ldr	r1, [r7, #8]
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	47a0      	blx	r4
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	bf14      	ite	ne
 800afb0:	2301      	movne	r3, #1
 800afb2:	2300      	moveq	r3, #0
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 800afba:	2301      	movs	r3, #1
 800afbc:	e003      	b.n	800afc6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afc2:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	371c      	adds	r7, #28
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd90      	pop	{r4, r7, pc}

0800afce <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 800afce:	b480      	push	{r7}
 800afd0:	b087      	sub	sp, #28
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
 800afda:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	68da      	ldr	r2, [r3, #12]
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 800afe6:	4413      	add	r3, r2
 800afe8:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	da01      	bge.n	800aff8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 800aff4:	2300      	movs	r3, #0
 800aff6:	e007      	b.n	800b008 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	429a      	cmp	r2, r3
 800b000:	dd01      	ble.n	800b006 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 800b002:	2300      	movs	r3, #0
 800b004:	e000      	b.n	800b008 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 800b006:	2301      	movs	r3, #1
}
 800b008:	4618      	mov	r0, r3
 800b00a:	371c      	adds	r7, #28
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
 800b020:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10b      	bne.n	800b044 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	699a      	ldr	r2, [r3, #24]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6a1b      	ldr	r3, [r3, #32]
 800b034:	4619      	mov	r1, r3
 800b036:	460b      	mov	r3, r1
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	440b      	add	r3, r1
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	4413      	add	r3, r2
 800b040:	613b      	str	r3, [r7, #16]
 800b042:	e011      	b.n	800b068 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04c:	d101      	bne.n	800b052 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 800b04e:	2300      	movs	r3, #0
 800b050:	e029      	b.n	800b0a6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	699a      	ldr	r2, [r3, #24]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	4619      	mov	r1, r3
 800b05c:	460b      	mov	r3, r1
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	440b      	add	r3, r1
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	6939      	ldr	r1, [r7, #16]
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f7ff ffad 	bl	800afce <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d002      	beq.n	800b080 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	617b      	str	r3, [r7, #20]
      break;
 800b07e:	e011      	b.n	800b0a4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b088:	d00b      	beq.n	800b0a2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	699a      	ldr	r2, [r3, #24]
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	4619      	mov	r1, r3
 800b094:	460b      	mov	r3, r1
 800b096:	005b      	lsls	r3, r3, #1
 800b098:	440b      	add	r3, r1
 800b09a:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 800b09c:	4413      	add	r3, r2
 800b09e:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800b0a0:	e7e2      	b.n	800b068 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 800b0a2:	bf00      	nop
  } while (true);
  return result;
 800b0a4:	697b      	ldr	r3, [r7, #20]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3718      	adds	r7, #24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b098      	sub	sp, #96	; 0x60
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0bc:	f083 0301 	eor.w	r3, r3, #1
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f040 8160 	bne.w	800b388 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 815b 	beq.w	800b388 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    return;
  }
  need_to_calculate_offsets_ = false;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	657b      	str	r3, [r7, #84]	; 0x54
 800b0e8:	e04c      	b.n	800b184 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd6>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68da      	ldr	r2, [r3, #12]
 800b0ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f0:	011b      	lsls	r3, r3, #4
 800b0f2:	4413      	add	r3, r2
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fa:	d11e      	bne.n	800b13a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x8c>
      idx_from_tail--;
 800b0fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0fe:	3b01      	subs	r3, #1
 800b100:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	68da      	ldr	r2, [r3, #12]
 800b106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b108:	011b      	lsls	r3, r3, #4
 800b10a:	441a      	add	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6919      	ldr	r1, [r3, #16]
 800b110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	440b      	add	r3, r1
 800b116:	6812      	ldr	r2, [r2, #0]
 800b118:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	695a      	ldr	r2, [r3, #20]
 800b11e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b126:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b12c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	f04f 32ff 	mov.w	r2, #4294967295
 800b136:	601a      	str	r2, [r3, #0]
 800b138:	e021      	b.n	800b17e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd0>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	68da      	ldr	r2, [r3, #12]
 800b13e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b140:	011b      	lsls	r3, r3, #4
 800b142:	441a      	add	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6919      	ldr	r1, [r3, #16]
 800b148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	6812      	ldr	r2, [r2, #0]
 800b150:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	695a      	ldr	r2, [r3, #20]
 800b156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b15e:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68da      	ldr	r2, [r3, #12]
 800b164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b166:	011b      	lsls	r3, r3, #4
 800b168:	441a      	add	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b16e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	440b      	add	r3, r1
 800b174:	6852      	ldr	r2, [r2, #4]
 800b176:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 800b178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b17a:	3301      	adds	r3, #1
 800b17c:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800b17e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b180:	3301      	adds	r3, #1
 800b182:	657b      	str	r3, [r7, #84]	; 0x54
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b18a:	429a      	cmp	r2, r3
 800b18c:	dbad      	blt.n	800b0ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3c>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	691a      	ldr	r2, [r3, #16]
 800b192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	695a      	ldr	r2, [r3, #20]
 800b19c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b19e:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800b1a0:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800b1a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	f7ff fdd0 	bl	800ad50 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	699a      	ldr	r2, [r3, #24]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a1b      	ldr	r3, [r3, #32]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	005b      	lsls	r3, r3, #1
 800b1ca:	440b      	add	r3, r1
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4413      	add	r3, r2
 800b1d0:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800b1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d8:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	695b      	ldr	r3, [r3, #20]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 800b1e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1e6:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ee:	011b      	lsls	r3, r3, #4
 800b1f0:	4413      	add	r3, r2
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f8:	d106      	bne.n	800b208 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b216:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 800b218:	2301      	movs	r3, #1
 800b21a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b21c:	e0ad      	b.n	800b37a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2cc>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	695a      	ldr	r2, [r3, #20]
 800b222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	68da      	ldr	r2, [r3, #12]
 800b230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b232:	011b      	lsls	r3, r3, #4
 800b234:	4413      	add	r3, r2
 800b236:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 800b238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800b23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 800b24a:	2300      	movs	r3, #0
 800b24c:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b256:	d12d      	bne.n	800b2b4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x206>
      ListEntry* prior_entry = nullptr;
 800b258:	2300      	movs	r3, #0
 800b25a:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 800b25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b260:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7ff fed6 	bl	800b014 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 800b268:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 800b26a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d012      	beq.n	800b296 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1e8>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	68da      	ldr	r2, [r3, #12]
 800b274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 800b27a:	4413      	add	r3, r2
 800b27c:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 800b27e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b284:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 800b286:	4413      	add	r3, r2
 800b288:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 800b28a:	6a3a      	ldr	r2, [r7, #32]
 800b28c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b28e:	429a      	cmp	r2, r3
 800b290:	dd01      	ble.n	800b296 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1e8>
            candidate_offset = prior_entry_offset;
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 800b296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00f      	beq.n	800b2bc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x20e>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	da08      	bge.n	800b2c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x212>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	647b      	str	r3, [r7, #68]	; 0x44
      }
 800b2b2:	e7d3      	b.n	800b25c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2ba:	e002      	b.n	800b2c2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
          break;
 800b2bc:	bf00      	nop
 800b2be:	e000      	b.n	800b2c2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
          break;
 800b2c0:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2ce:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	699a      	ldr	r2, [r3, #24]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	460b      	mov	r3, r1
 800b2dc:	005b      	lsls	r3, r3, #1
 800b2de:	440b      	add	r3, r1
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2ea:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2f0:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	69db      	ldr	r3, [r3, #28]
 800b2f6:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	69db      	ldr	r3, [r3, #28]
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 800b302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b308:	429a      	cmp	r2, r3
 800b30a:	da09      	bge.n	800b320 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x272>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a1a      	ldr	r2, [r3, #32]
 800b314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b316:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	621a      	str	r2, [r3, #32]
 800b31e:	e029      	b.n	800b374 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
    } else {
      ListEntry* current_entry = first_entry;
 800b320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b322:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 800b324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b330:	d107      	bne.n	800b342 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x294>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 800b332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	f04f 32ff 	mov.w	r2, #4294967295
 800b33e:	609a      	str	r2, [r3, #8]
          break;
 800b340:	e018      	b.n	800b374 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6999      	ldr	r1, [r3, #24]
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	4613      	mov	r3, r2
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	4413      	add	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	440b      	add	r3, r1
 800b352:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b35a:	429a      	cmp	r2, r3
 800b35c:	da07      	bge.n	800b36e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c0>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 800b35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b360:	689a      	ldr	r2, [r3, #8]
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 800b366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	609a      	str	r2, [r3, #8]
          break;
 800b36c:	e002      	b.n	800b374 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
        }
        current_entry = next_entry;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	643b      	str	r3, [r7, #64]	; 0x40
      }
 800b372:	e7d7      	b.n	800b324 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x276>
  for (int i = 1; i < buffer_count_; ++i) {
 800b374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b376:	3301      	adds	r3, #1
 800b378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b380:	429a      	cmp	r2, r3
 800b382:	f6ff af4c 	blt.w	800b21e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x170>
 800b386:	e000      	b.n	800b38a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2dc>
    return;
 800b388:	bf00      	nop
    }
  }
}
 800b38a:	3760      	adds	r7, #96	; 0x60
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7ff fe88 	bl	800b0ae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e036      	b.n	800b418 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x88>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	699a      	ldr	r2, [r3, #24]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	440b      	add	r3, r1
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	613b      	str	r3, [r7, #16]
  while (entry) {
 800b3c4:	e022      	b.n	800b40c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x7c>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68da      	ldr	r2, [r3, #12]
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 800b3d0:	4413      	add	r3, r2
 800b3d2:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4413      	add	r3, r2
 800b3de:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d901      	bls.n	800b3ec <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5c>
      max_size = current_size;
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f4:	d00e      	beq.n	800b414 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	699a      	ldr	r2, [r3, #24]
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	4619      	mov	r1, r3
 800b400:	460b      	mov	r3, r1
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	440b      	add	r3, r1
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	617b      	str	r3, [r7, #20]
  while (entry) {
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1d9      	bne.n	800b3c6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x36>
 800b412:	e000      	b.n	800b416 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
      break;
 800b414:	bf00      	nop
  }
  return max_size;
 800b416:	693b      	ldr	r3, [r7, #16]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7ff fe31 	bl	800b0ae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	db04      	blt.n	800b45c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	429a      	cmp	r2, r3
 800b45a:	db08      	blt.n	800b46e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	4909      	ldr	r1, [pc, #36]	; (800b488 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 800b464:	68b8      	ldr	r0, [r7, #8]
 800b466:	f7f9 fb5d 	bl	8004b24 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e008      	b.n	800b480 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4413      	add	r3, r2
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	08011920 	.word	0x08011920

0800b48c <_ZdlPvj>:
 800b48c:	f000 b824 	b.w	800b4d8 <_ZdlPv>

0800b490 <_ZdaPv>:
 800b490:	f000 b822 	b.w	800b4d8 <_ZdlPv>

0800b494 <__cxa_guard_acquire>:
 800b494:	6803      	ldr	r3, [r0, #0]
 800b496:	07db      	lsls	r3, r3, #31
 800b498:	d406      	bmi.n	800b4a8 <__cxa_guard_acquire+0x14>
 800b49a:	7843      	ldrb	r3, [r0, #1]
 800b49c:	b103      	cbz	r3, 800b4a0 <__cxa_guard_acquire+0xc>
 800b49e:	deff      	udf	#255	; 0xff
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	7043      	strb	r3, [r0, #1]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	4770      	bx	lr
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	4770      	bx	lr

0800b4ac <__cxa_guard_release>:
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	6003      	str	r3, [r0, #0]
 800b4b0:	4770      	bx	lr

0800b4b2 <_Znwj>:
 800b4b2:	2801      	cmp	r0, #1
 800b4b4:	bf38      	it	cc
 800b4b6:	2001      	movcc	r0, #1
 800b4b8:	b510      	push	{r4, lr}
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f000 f8e5 	bl	800b68c <malloc>
 800b4c2:	b100      	cbz	r0, 800b4c6 <_Znwj+0x14>
 800b4c4:	bd10      	pop	{r4, pc}
 800b4c6:	f000 f809 	bl	800b4dc <_ZSt15get_new_handlerv>
 800b4ca:	b908      	cbnz	r0, 800b4d0 <_Znwj+0x1e>
 800b4cc:	f000 f8b2 	bl	800b634 <abort>
 800b4d0:	4780      	blx	r0
 800b4d2:	e7f3      	b.n	800b4bc <_Znwj+0xa>

0800b4d4 <_Znaj>:
 800b4d4:	f7ff bfed 	b.w	800b4b2 <_Znwj>

0800b4d8 <_ZdlPv>:
 800b4d8:	f000 b8e0 	b.w	800b69c <free>

0800b4dc <_ZSt15get_new_handlerv>:
 800b4dc:	4b02      	ldr	r3, [pc, #8]	; (800b4e8 <_ZSt15get_new_handlerv+0xc>)
 800b4de:	6818      	ldr	r0, [r3, #0]
 800b4e0:	f3bf 8f5b 	dmb	ish
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	2000182c 	.word	0x2000182c

0800b4ec <frexp>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	ec55 4b10 	vmov	r4, r5, d0
 800b4f4:	6001      	str	r1, [r0, #0]
 800b4f6:	4916      	ldr	r1, [pc, #88]	; (800b550 <frexp+0x64>)
 800b4f8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b4fc:	428a      	cmp	r2, r1
 800b4fe:	4606      	mov	r6, r0
 800b500:	462b      	mov	r3, r5
 800b502:	dc22      	bgt.n	800b54a <frexp+0x5e>
 800b504:	ee10 1a10 	vmov	r1, s0
 800b508:	4311      	orrs	r1, r2
 800b50a:	d01e      	beq.n	800b54a <frexp+0x5e>
 800b50c:	4911      	ldr	r1, [pc, #68]	; (800b554 <frexp+0x68>)
 800b50e:	4029      	ands	r1, r5
 800b510:	b969      	cbnz	r1, 800b52e <frexp+0x42>
 800b512:	4b11      	ldr	r3, [pc, #68]	; (800b558 <frexp+0x6c>)
 800b514:	2200      	movs	r2, #0
 800b516:	ee10 0a10 	vmov	r0, s0
 800b51a:	4629      	mov	r1, r5
 800b51c:	f7f5 f88c 	bl	8000638 <__aeabi_dmul>
 800b520:	460b      	mov	r3, r1
 800b522:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b526:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800b52a:	4604      	mov	r4, r0
 800b52c:	6031      	str	r1, [r6, #0]
 800b52e:	6831      	ldr	r1, [r6, #0]
 800b530:	1512      	asrs	r2, r2, #20
 800b532:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b536:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800b53a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b53e:	4411      	add	r1, r2
 800b540:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800b544:	6031      	str	r1, [r6, #0]
 800b546:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800b54a:	ec45 4b10 	vmov	d0, r4, r5
 800b54e:	bd70      	pop	{r4, r5, r6, pc}
 800b550:	7fefffff 	.word	0x7fefffff
 800b554:	7ff00000 	.word	0x7ff00000
 800b558:	43500000 	.word	0x43500000

0800b55c <round>:
 800b55c:	ec53 2b10 	vmov	r2, r3, d0
 800b560:	b570      	push	{r4, r5, r6, lr}
 800b562:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800b566:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800b56a:	2813      	cmp	r0, #19
 800b56c:	ee10 5a10 	vmov	r5, s0
 800b570:	4619      	mov	r1, r3
 800b572:	dc18      	bgt.n	800b5a6 <round+0x4a>
 800b574:	2800      	cmp	r0, #0
 800b576:	da09      	bge.n	800b58c <round+0x30>
 800b578:	3001      	adds	r0, #1
 800b57a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800b57e:	d103      	bne.n	800b588 <round+0x2c>
 800b580:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800b584:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b588:	2300      	movs	r3, #0
 800b58a:	e02a      	b.n	800b5e2 <round+0x86>
 800b58c:	4c16      	ldr	r4, [pc, #88]	; (800b5e8 <round+0x8c>)
 800b58e:	4104      	asrs	r4, r0
 800b590:	ea03 0604 	and.w	r6, r3, r4
 800b594:	4316      	orrs	r6, r2
 800b596:	d011      	beq.n	800b5bc <round+0x60>
 800b598:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b59c:	4103      	asrs	r3, r0
 800b59e:	440b      	add	r3, r1
 800b5a0:	ea23 0104 	bic.w	r1, r3, r4
 800b5a4:	e7f0      	b.n	800b588 <round+0x2c>
 800b5a6:	2833      	cmp	r0, #51	; 0x33
 800b5a8:	dd0b      	ble.n	800b5c2 <round+0x66>
 800b5aa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b5ae:	d105      	bne.n	800b5bc <round+0x60>
 800b5b0:	ee10 0a10 	vmov	r0, s0
 800b5b4:	f7f4 fe8a 	bl	80002cc <__adddf3>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	ec43 2b10 	vmov	d0, r2, r3
 800b5c0:	bd70      	pop	{r4, r5, r6, pc}
 800b5c2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800b5c6:	f04f 34ff 	mov.w	r4, #4294967295
 800b5ca:	40f4      	lsrs	r4, r6
 800b5cc:	4214      	tst	r4, r2
 800b5ce:	d0f5      	beq.n	800b5bc <round+0x60>
 800b5d0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	4083      	lsls	r3, r0
 800b5d8:	195b      	adds	r3, r3, r5
 800b5da:	bf28      	it	cs
 800b5dc:	3101      	addcs	r1, #1
 800b5de:	ea23 0304 	bic.w	r3, r3, r4
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	e7e9      	b.n	800b5bc <round+0x60>
 800b5e8:	000fffff 	.word	0x000fffff

0800b5ec <roundf>:
 800b5ec:	ee10 0a10 	vmov	r0, s0
 800b5f0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b5f4:	3a7f      	subs	r2, #127	; 0x7f
 800b5f6:	2a16      	cmp	r2, #22
 800b5f8:	dc15      	bgt.n	800b626 <roundf+0x3a>
 800b5fa:	2a00      	cmp	r2, #0
 800b5fc:	da08      	bge.n	800b610 <roundf+0x24>
 800b5fe:	3201      	adds	r2, #1
 800b600:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b604:	d101      	bne.n	800b60a <roundf+0x1e>
 800b606:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b60a:	ee00 3a10 	vmov	s0, r3
 800b60e:	4770      	bx	lr
 800b610:	4907      	ldr	r1, [pc, #28]	; (800b630 <roundf+0x44>)
 800b612:	4111      	asrs	r1, r2
 800b614:	4208      	tst	r0, r1
 800b616:	d0fa      	beq.n	800b60e <roundf+0x22>
 800b618:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b61c:	4113      	asrs	r3, r2
 800b61e:	4403      	add	r3, r0
 800b620:	ea23 0301 	bic.w	r3, r3, r1
 800b624:	e7f1      	b.n	800b60a <roundf+0x1e>
 800b626:	2a80      	cmp	r2, #128	; 0x80
 800b628:	d1f1      	bne.n	800b60e <roundf+0x22>
 800b62a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b62e:	4770      	bx	lr
 800b630:	007fffff 	.word	0x007fffff

0800b634 <abort>:
 800b634:	b508      	push	{r3, lr}
 800b636:	2006      	movs	r0, #6
 800b638:	f000 ff90 	bl	800c55c <raise>
 800b63c:	2001      	movs	r0, #1
 800b63e:	f7f6 fb7f 	bl	8001d40 <_exit>
	...

0800b644 <__assert_func>:
 800b644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b646:	4614      	mov	r4, r2
 800b648:	461a      	mov	r2, r3
 800b64a:	4b09      	ldr	r3, [pc, #36]	; (800b670 <__assert_func+0x2c>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4605      	mov	r5, r0
 800b650:	68d8      	ldr	r0, [r3, #12]
 800b652:	b14c      	cbz	r4, 800b668 <__assert_func+0x24>
 800b654:	4b07      	ldr	r3, [pc, #28]	; (800b674 <__assert_func+0x30>)
 800b656:	9100      	str	r1, [sp, #0]
 800b658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b65c:	4906      	ldr	r1, [pc, #24]	; (800b678 <__assert_func+0x34>)
 800b65e:	462b      	mov	r3, r5
 800b660:	f000 fdf8 	bl	800c254 <fiprintf>
 800b664:	f7ff ffe6 	bl	800b634 <abort>
 800b668:	4b04      	ldr	r3, [pc, #16]	; (800b67c <__assert_func+0x38>)
 800b66a:	461c      	mov	r4, r3
 800b66c:	e7f3      	b.n	800b656 <__assert_func+0x12>
 800b66e:	bf00      	nop
 800b670:	20000cd8 	.word	0x20000cd8
 800b674:	08011d1c 	.word	0x08011d1c
 800b678:	08011d29 	.word	0x08011d29
 800b67c:	08011d57 	.word	0x08011d57

0800b680 <atexit>:
 800b680:	2300      	movs	r3, #0
 800b682:	4601      	mov	r1, r0
 800b684:	461a      	mov	r2, r3
 800b686:	4618      	mov	r0, r3
 800b688:	f001 b818 	b.w	800c6bc <__register_exitproc>

0800b68c <malloc>:
 800b68c:	4b02      	ldr	r3, [pc, #8]	; (800b698 <malloc+0xc>)
 800b68e:	4601      	mov	r1, r0
 800b690:	6818      	ldr	r0, [r3, #0]
 800b692:	f000 b82b 	b.w	800b6ec <_malloc_r>
 800b696:	bf00      	nop
 800b698:	20000cd8 	.word	0x20000cd8

0800b69c <free>:
 800b69c:	4b02      	ldr	r3, [pc, #8]	; (800b6a8 <free+0xc>)
 800b69e:	4601      	mov	r1, r0
 800b6a0:	6818      	ldr	r0, [r3, #0]
 800b6a2:	f001 bee3 	b.w	800d46c <_free_r>
 800b6a6:	bf00      	nop
 800b6a8:	20000cd8 	.word	0x20000cd8

0800b6ac <sbrk_aligned>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	4e0e      	ldr	r6, [pc, #56]	; (800b6e8 <sbrk_aligned+0x3c>)
 800b6b0:	460c      	mov	r4, r1
 800b6b2:	6831      	ldr	r1, [r6, #0]
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	b911      	cbnz	r1, 800b6be <sbrk_aligned+0x12>
 800b6b8:	f000 ffa4 	bl	800c604 <_sbrk_r>
 800b6bc:	6030      	str	r0, [r6, #0]
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	f000 ff9f 	bl	800c604 <_sbrk_r>
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	d00a      	beq.n	800b6e0 <sbrk_aligned+0x34>
 800b6ca:	1cc4      	adds	r4, r0, #3
 800b6cc:	f024 0403 	bic.w	r4, r4, #3
 800b6d0:	42a0      	cmp	r0, r4
 800b6d2:	d007      	beq.n	800b6e4 <sbrk_aligned+0x38>
 800b6d4:	1a21      	subs	r1, r4, r0
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f000 ff94 	bl	800c604 <_sbrk_r>
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d101      	bne.n	800b6e4 <sbrk_aligned+0x38>
 800b6e0:	f04f 34ff 	mov.w	r4, #4294967295
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	bd70      	pop	{r4, r5, r6, pc}
 800b6e8:	20001834 	.word	0x20001834

0800b6ec <_malloc_r>:
 800b6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f0:	1ccd      	adds	r5, r1, #3
 800b6f2:	f025 0503 	bic.w	r5, r5, #3
 800b6f6:	3508      	adds	r5, #8
 800b6f8:	2d0c      	cmp	r5, #12
 800b6fa:	bf38      	it	cc
 800b6fc:	250c      	movcc	r5, #12
 800b6fe:	2d00      	cmp	r5, #0
 800b700:	4607      	mov	r7, r0
 800b702:	db01      	blt.n	800b708 <_malloc_r+0x1c>
 800b704:	42a9      	cmp	r1, r5
 800b706:	d905      	bls.n	800b714 <_malloc_r+0x28>
 800b708:	230c      	movs	r3, #12
 800b70a:	603b      	str	r3, [r7, #0]
 800b70c:	2600      	movs	r6, #0
 800b70e:	4630      	mov	r0, r6
 800b710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b714:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b7e8 <_malloc_r+0xfc>
 800b718:	f000 f868 	bl	800b7ec <__malloc_lock>
 800b71c:	f8d8 3000 	ldr.w	r3, [r8]
 800b720:	461c      	mov	r4, r3
 800b722:	bb5c      	cbnz	r4, 800b77c <_malloc_r+0x90>
 800b724:	4629      	mov	r1, r5
 800b726:	4638      	mov	r0, r7
 800b728:	f7ff ffc0 	bl	800b6ac <sbrk_aligned>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	4604      	mov	r4, r0
 800b730:	d155      	bne.n	800b7de <_malloc_r+0xf2>
 800b732:	f8d8 4000 	ldr.w	r4, [r8]
 800b736:	4626      	mov	r6, r4
 800b738:	2e00      	cmp	r6, #0
 800b73a:	d145      	bne.n	800b7c8 <_malloc_r+0xdc>
 800b73c:	2c00      	cmp	r4, #0
 800b73e:	d048      	beq.n	800b7d2 <_malloc_r+0xe6>
 800b740:	6823      	ldr	r3, [r4, #0]
 800b742:	4631      	mov	r1, r6
 800b744:	4638      	mov	r0, r7
 800b746:	eb04 0903 	add.w	r9, r4, r3
 800b74a:	f000 ff5b 	bl	800c604 <_sbrk_r>
 800b74e:	4581      	cmp	r9, r0
 800b750:	d13f      	bne.n	800b7d2 <_malloc_r+0xe6>
 800b752:	6821      	ldr	r1, [r4, #0]
 800b754:	1a6d      	subs	r5, r5, r1
 800b756:	4629      	mov	r1, r5
 800b758:	4638      	mov	r0, r7
 800b75a:	f7ff ffa7 	bl	800b6ac <sbrk_aligned>
 800b75e:	3001      	adds	r0, #1
 800b760:	d037      	beq.n	800b7d2 <_malloc_r+0xe6>
 800b762:	6823      	ldr	r3, [r4, #0]
 800b764:	442b      	add	r3, r5
 800b766:	6023      	str	r3, [r4, #0]
 800b768:	f8d8 3000 	ldr.w	r3, [r8]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d038      	beq.n	800b7e2 <_malloc_r+0xf6>
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	42a2      	cmp	r2, r4
 800b774:	d12b      	bne.n	800b7ce <_malloc_r+0xe2>
 800b776:	2200      	movs	r2, #0
 800b778:	605a      	str	r2, [r3, #4]
 800b77a:	e00f      	b.n	800b79c <_malloc_r+0xb0>
 800b77c:	6822      	ldr	r2, [r4, #0]
 800b77e:	1b52      	subs	r2, r2, r5
 800b780:	d41f      	bmi.n	800b7c2 <_malloc_r+0xd6>
 800b782:	2a0b      	cmp	r2, #11
 800b784:	d917      	bls.n	800b7b6 <_malloc_r+0xca>
 800b786:	1961      	adds	r1, r4, r5
 800b788:	42a3      	cmp	r3, r4
 800b78a:	6025      	str	r5, [r4, #0]
 800b78c:	bf18      	it	ne
 800b78e:	6059      	strne	r1, [r3, #4]
 800b790:	6863      	ldr	r3, [r4, #4]
 800b792:	bf08      	it	eq
 800b794:	f8c8 1000 	streq.w	r1, [r8]
 800b798:	5162      	str	r2, [r4, r5]
 800b79a:	604b      	str	r3, [r1, #4]
 800b79c:	4638      	mov	r0, r7
 800b79e:	f104 060b 	add.w	r6, r4, #11
 800b7a2:	f000 f829 	bl	800b7f8 <__malloc_unlock>
 800b7a6:	f026 0607 	bic.w	r6, r6, #7
 800b7aa:	1d23      	adds	r3, r4, #4
 800b7ac:	1af2      	subs	r2, r6, r3
 800b7ae:	d0ae      	beq.n	800b70e <_malloc_r+0x22>
 800b7b0:	1b9b      	subs	r3, r3, r6
 800b7b2:	50a3      	str	r3, [r4, r2]
 800b7b4:	e7ab      	b.n	800b70e <_malloc_r+0x22>
 800b7b6:	42a3      	cmp	r3, r4
 800b7b8:	6862      	ldr	r2, [r4, #4]
 800b7ba:	d1dd      	bne.n	800b778 <_malloc_r+0x8c>
 800b7bc:	f8c8 2000 	str.w	r2, [r8]
 800b7c0:	e7ec      	b.n	800b79c <_malloc_r+0xb0>
 800b7c2:	4623      	mov	r3, r4
 800b7c4:	6864      	ldr	r4, [r4, #4]
 800b7c6:	e7ac      	b.n	800b722 <_malloc_r+0x36>
 800b7c8:	4634      	mov	r4, r6
 800b7ca:	6876      	ldr	r6, [r6, #4]
 800b7cc:	e7b4      	b.n	800b738 <_malloc_r+0x4c>
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	e7cc      	b.n	800b76c <_malloc_r+0x80>
 800b7d2:	230c      	movs	r3, #12
 800b7d4:	603b      	str	r3, [r7, #0]
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	f000 f80e 	bl	800b7f8 <__malloc_unlock>
 800b7dc:	e797      	b.n	800b70e <_malloc_r+0x22>
 800b7de:	6025      	str	r5, [r4, #0]
 800b7e0:	e7dc      	b.n	800b79c <_malloc_r+0xb0>
 800b7e2:	605b      	str	r3, [r3, #4]
 800b7e4:	deff      	udf	#255	; 0xff
 800b7e6:	bf00      	nop
 800b7e8:	20001830 	.word	0x20001830

0800b7ec <__malloc_lock>:
 800b7ec:	4801      	ldr	r0, [pc, #4]	; (800b7f4 <__malloc_lock+0x8>)
 800b7ee:	f000 bf55 	b.w	800c69c <__retarget_lock_acquire_recursive>
 800b7f2:	bf00      	nop
 800b7f4:	20001979 	.word	0x20001979

0800b7f8 <__malloc_unlock>:
 800b7f8:	4801      	ldr	r0, [pc, #4]	; (800b800 <__malloc_unlock+0x8>)
 800b7fa:	f000 bf50 	b.w	800c69e <__retarget_lock_release_recursive>
 800b7fe:	bf00      	nop
 800b800:	20001979 	.word	0x20001979

0800b804 <_realloc_r>:
 800b804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b808:	4680      	mov	r8, r0
 800b80a:	4614      	mov	r4, r2
 800b80c:	460e      	mov	r6, r1
 800b80e:	b921      	cbnz	r1, 800b81a <_realloc_r+0x16>
 800b810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b814:	4611      	mov	r1, r2
 800b816:	f7ff bf69 	b.w	800b6ec <_malloc_r>
 800b81a:	b92a      	cbnz	r2, 800b828 <_realloc_r+0x24>
 800b81c:	f001 fe26 	bl	800d46c <_free_r>
 800b820:	4625      	mov	r5, r4
 800b822:	4628      	mov	r0, r5
 800b824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b828:	f002 f9e8 	bl	800dbfc <_malloc_usable_size_r>
 800b82c:	4284      	cmp	r4, r0
 800b82e:	4607      	mov	r7, r0
 800b830:	d802      	bhi.n	800b838 <_realloc_r+0x34>
 800b832:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b836:	d812      	bhi.n	800b85e <_realloc_r+0x5a>
 800b838:	4621      	mov	r1, r4
 800b83a:	4640      	mov	r0, r8
 800b83c:	f7ff ff56 	bl	800b6ec <_malloc_r>
 800b840:	4605      	mov	r5, r0
 800b842:	2800      	cmp	r0, #0
 800b844:	d0ed      	beq.n	800b822 <_realloc_r+0x1e>
 800b846:	42bc      	cmp	r4, r7
 800b848:	4622      	mov	r2, r4
 800b84a:	4631      	mov	r1, r6
 800b84c:	bf28      	it	cs
 800b84e:	463a      	movcs	r2, r7
 800b850:	f000 ff26 	bl	800c6a0 <memcpy>
 800b854:	4631      	mov	r1, r6
 800b856:	4640      	mov	r0, r8
 800b858:	f001 fe08 	bl	800d46c <_free_r>
 800b85c:	e7e1      	b.n	800b822 <_realloc_r+0x1e>
 800b85e:	4635      	mov	r5, r6
 800b860:	e7df      	b.n	800b822 <_realloc_r+0x1e>

0800b862 <__cvt>:
 800b862:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b866:	ec55 4b10 	vmov	r4, r5, d0
 800b86a:	2d00      	cmp	r5, #0
 800b86c:	460e      	mov	r6, r1
 800b86e:	4619      	mov	r1, r3
 800b870:	462b      	mov	r3, r5
 800b872:	bfbb      	ittet	lt
 800b874:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b878:	461d      	movlt	r5, r3
 800b87a:	2300      	movge	r3, #0
 800b87c:	232d      	movlt	r3, #45	; 0x2d
 800b87e:	700b      	strb	r3, [r1, #0]
 800b880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b882:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b886:	4691      	mov	r9, r2
 800b888:	f023 0820 	bic.w	r8, r3, #32
 800b88c:	bfbc      	itt	lt
 800b88e:	4622      	movlt	r2, r4
 800b890:	4614      	movlt	r4, r2
 800b892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b896:	d005      	beq.n	800b8a4 <__cvt+0x42>
 800b898:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b89c:	d100      	bne.n	800b8a0 <__cvt+0x3e>
 800b89e:	3601      	adds	r6, #1
 800b8a0:	2102      	movs	r1, #2
 800b8a2:	e000      	b.n	800b8a6 <__cvt+0x44>
 800b8a4:	2103      	movs	r1, #3
 800b8a6:	ab03      	add	r3, sp, #12
 800b8a8:	9301      	str	r3, [sp, #4]
 800b8aa:	ab02      	add	r3, sp, #8
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	ec45 4b10 	vmov	d0, r4, r5
 800b8b2:	4653      	mov	r3, sl
 800b8b4:	4632      	mov	r2, r6
 800b8b6:	f000 ffe7 	bl	800c888 <_dtoa_r>
 800b8ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b8be:	4607      	mov	r7, r0
 800b8c0:	d102      	bne.n	800b8c8 <__cvt+0x66>
 800b8c2:	f019 0f01 	tst.w	r9, #1
 800b8c6:	d022      	beq.n	800b90e <__cvt+0xac>
 800b8c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b8cc:	eb07 0906 	add.w	r9, r7, r6
 800b8d0:	d110      	bne.n	800b8f4 <__cvt+0x92>
 800b8d2:	783b      	ldrb	r3, [r7, #0]
 800b8d4:	2b30      	cmp	r3, #48	; 0x30
 800b8d6:	d10a      	bne.n	800b8ee <__cvt+0x8c>
 800b8d8:	2200      	movs	r2, #0
 800b8da:	2300      	movs	r3, #0
 800b8dc:	4620      	mov	r0, r4
 800b8de:	4629      	mov	r1, r5
 800b8e0:	f7f5 f912 	bl	8000b08 <__aeabi_dcmpeq>
 800b8e4:	b918      	cbnz	r0, 800b8ee <__cvt+0x8c>
 800b8e6:	f1c6 0601 	rsb	r6, r6, #1
 800b8ea:	f8ca 6000 	str.w	r6, [sl]
 800b8ee:	f8da 3000 	ldr.w	r3, [sl]
 800b8f2:	4499      	add	r9, r3
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	f7f5 f904 	bl	8000b08 <__aeabi_dcmpeq>
 800b900:	b108      	cbz	r0, 800b906 <__cvt+0xa4>
 800b902:	f8cd 900c 	str.w	r9, [sp, #12]
 800b906:	2230      	movs	r2, #48	; 0x30
 800b908:	9b03      	ldr	r3, [sp, #12]
 800b90a:	454b      	cmp	r3, r9
 800b90c:	d307      	bcc.n	800b91e <__cvt+0xbc>
 800b90e:	9b03      	ldr	r3, [sp, #12]
 800b910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b912:	1bdb      	subs	r3, r3, r7
 800b914:	4638      	mov	r0, r7
 800b916:	6013      	str	r3, [r2, #0]
 800b918:	b004      	add	sp, #16
 800b91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91e:	1c59      	adds	r1, r3, #1
 800b920:	9103      	str	r1, [sp, #12]
 800b922:	701a      	strb	r2, [r3, #0]
 800b924:	e7f0      	b.n	800b908 <__cvt+0xa6>

0800b926 <__exponent>:
 800b926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b928:	4603      	mov	r3, r0
 800b92a:	2900      	cmp	r1, #0
 800b92c:	bfb8      	it	lt
 800b92e:	4249      	neglt	r1, r1
 800b930:	f803 2b02 	strb.w	r2, [r3], #2
 800b934:	bfb4      	ite	lt
 800b936:	222d      	movlt	r2, #45	; 0x2d
 800b938:	222b      	movge	r2, #43	; 0x2b
 800b93a:	2909      	cmp	r1, #9
 800b93c:	7042      	strb	r2, [r0, #1]
 800b93e:	dd2a      	ble.n	800b996 <__exponent+0x70>
 800b940:	f10d 0207 	add.w	r2, sp, #7
 800b944:	4617      	mov	r7, r2
 800b946:	260a      	movs	r6, #10
 800b948:	4694      	mov	ip, r2
 800b94a:	fb91 f5f6 	sdiv	r5, r1, r6
 800b94e:	fb06 1415 	mls	r4, r6, r5, r1
 800b952:	3430      	adds	r4, #48	; 0x30
 800b954:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b958:	460c      	mov	r4, r1
 800b95a:	2c63      	cmp	r4, #99	; 0x63
 800b95c:	f102 32ff 	add.w	r2, r2, #4294967295
 800b960:	4629      	mov	r1, r5
 800b962:	dcf1      	bgt.n	800b948 <__exponent+0x22>
 800b964:	3130      	adds	r1, #48	; 0x30
 800b966:	f1ac 0402 	sub.w	r4, ip, #2
 800b96a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b96e:	1c41      	adds	r1, r0, #1
 800b970:	4622      	mov	r2, r4
 800b972:	42ba      	cmp	r2, r7
 800b974:	d30a      	bcc.n	800b98c <__exponent+0x66>
 800b976:	f10d 0209 	add.w	r2, sp, #9
 800b97a:	eba2 020c 	sub.w	r2, r2, ip
 800b97e:	42bc      	cmp	r4, r7
 800b980:	bf88      	it	hi
 800b982:	2200      	movhi	r2, #0
 800b984:	4413      	add	r3, r2
 800b986:	1a18      	subs	r0, r3, r0
 800b988:	b003      	add	sp, #12
 800b98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b98c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b990:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b994:	e7ed      	b.n	800b972 <__exponent+0x4c>
 800b996:	2330      	movs	r3, #48	; 0x30
 800b998:	3130      	adds	r1, #48	; 0x30
 800b99a:	7083      	strb	r3, [r0, #2]
 800b99c:	70c1      	strb	r1, [r0, #3]
 800b99e:	1d03      	adds	r3, r0, #4
 800b9a0:	e7f1      	b.n	800b986 <__exponent+0x60>
	...

0800b9a4 <_printf_float>:
 800b9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a8:	ed2d 8b02 	vpush	{d8}
 800b9ac:	b08d      	sub	sp, #52	; 0x34
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b9b4:	4616      	mov	r6, r2
 800b9b6:	461f      	mov	r7, r3
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	f000 fdd7 	bl	800c56c <_localeconv_r>
 800b9be:	f8d0 a000 	ldr.w	sl, [r0]
 800b9c2:	4650      	mov	r0, sl
 800b9c4:	f7f4 fc74 	bl	80002b0 <strlen>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	9305      	str	r3, [sp, #20]
 800b9d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b9d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b9d8:	3307      	adds	r3, #7
 800b9da:	f023 0307 	bic.w	r3, r3, #7
 800b9de:	f103 0208 	add.w	r2, r3, #8
 800b9e2:	f8c8 2000 	str.w	r2, [r8]
 800b9e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b9ee:	9307      	str	r3, [sp, #28]
 800b9f0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b9f4:	ee08 0a10 	vmov	s16, r0
 800b9f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b9fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba00:	4b9e      	ldr	r3, [pc, #632]	; (800bc7c <_printf_float+0x2d8>)
 800ba02:	f04f 32ff 	mov.w	r2, #4294967295
 800ba06:	f7f5 f8b1 	bl	8000b6c <__aeabi_dcmpun>
 800ba0a:	bb88      	cbnz	r0, 800ba70 <_printf_float+0xcc>
 800ba0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba10:	4b9a      	ldr	r3, [pc, #616]	; (800bc7c <_printf_float+0x2d8>)
 800ba12:	f04f 32ff 	mov.w	r2, #4294967295
 800ba16:	f7f5 f88b 	bl	8000b30 <__aeabi_dcmple>
 800ba1a:	bb48      	cbnz	r0, 800ba70 <_printf_float+0xcc>
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2300      	movs	r3, #0
 800ba20:	4640      	mov	r0, r8
 800ba22:	4649      	mov	r1, r9
 800ba24:	f7f5 f87a 	bl	8000b1c <__aeabi_dcmplt>
 800ba28:	b110      	cbz	r0, 800ba30 <_printf_float+0x8c>
 800ba2a:	232d      	movs	r3, #45	; 0x2d
 800ba2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba30:	4a93      	ldr	r2, [pc, #588]	; (800bc80 <_printf_float+0x2dc>)
 800ba32:	4b94      	ldr	r3, [pc, #592]	; (800bc84 <_printf_float+0x2e0>)
 800ba34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ba38:	bf94      	ite	ls
 800ba3a:	4690      	movls	r8, r2
 800ba3c:	4698      	movhi	r8, r3
 800ba3e:	2303      	movs	r3, #3
 800ba40:	6123      	str	r3, [r4, #16]
 800ba42:	9b05      	ldr	r3, [sp, #20]
 800ba44:	f023 0304 	bic.w	r3, r3, #4
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	f04f 0900 	mov.w	r9, #0
 800ba4e:	9700      	str	r7, [sp, #0]
 800ba50:	4633      	mov	r3, r6
 800ba52:	aa0b      	add	r2, sp, #44	; 0x2c
 800ba54:	4621      	mov	r1, r4
 800ba56:	4628      	mov	r0, r5
 800ba58:	f000 f9da 	bl	800be10 <_printf_common>
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	f040 8090 	bne.w	800bb82 <_printf_float+0x1de>
 800ba62:	f04f 30ff 	mov.w	r0, #4294967295
 800ba66:	b00d      	add	sp, #52	; 0x34
 800ba68:	ecbd 8b02 	vpop	{d8}
 800ba6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba70:	4642      	mov	r2, r8
 800ba72:	464b      	mov	r3, r9
 800ba74:	4640      	mov	r0, r8
 800ba76:	4649      	mov	r1, r9
 800ba78:	f7f5 f878 	bl	8000b6c <__aeabi_dcmpun>
 800ba7c:	b140      	cbz	r0, 800ba90 <_printf_float+0xec>
 800ba7e:	464b      	mov	r3, r9
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	bfbc      	itt	lt
 800ba84:	232d      	movlt	r3, #45	; 0x2d
 800ba86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ba8a:	4a7f      	ldr	r2, [pc, #508]	; (800bc88 <_printf_float+0x2e4>)
 800ba8c:	4b7f      	ldr	r3, [pc, #508]	; (800bc8c <_printf_float+0x2e8>)
 800ba8e:	e7d1      	b.n	800ba34 <_printf_float+0x90>
 800ba90:	6863      	ldr	r3, [r4, #4]
 800ba92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ba96:	9206      	str	r2, [sp, #24]
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	d13f      	bne.n	800bb1c <_printf_float+0x178>
 800ba9c:	2306      	movs	r3, #6
 800ba9e:	6063      	str	r3, [r4, #4]
 800baa0:	9b05      	ldr	r3, [sp, #20]
 800baa2:	6861      	ldr	r1, [r4, #4]
 800baa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800baa8:	2300      	movs	r3, #0
 800baaa:	9303      	str	r3, [sp, #12]
 800baac:	ab0a      	add	r3, sp, #40	; 0x28
 800baae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bab2:	ab09      	add	r3, sp, #36	; 0x24
 800bab4:	ec49 8b10 	vmov	d0, r8, r9
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	6022      	str	r2, [r4, #0]
 800babc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bac0:	4628      	mov	r0, r5
 800bac2:	f7ff fece 	bl	800b862 <__cvt>
 800bac6:	9b06      	ldr	r3, [sp, #24]
 800bac8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800baca:	2b47      	cmp	r3, #71	; 0x47
 800bacc:	4680      	mov	r8, r0
 800bace:	d108      	bne.n	800bae2 <_printf_float+0x13e>
 800bad0:	1cc8      	adds	r0, r1, #3
 800bad2:	db02      	blt.n	800bada <_printf_float+0x136>
 800bad4:	6863      	ldr	r3, [r4, #4]
 800bad6:	4299      	cmp	r1, r3
 800bad8:	dd41      	ble.n	800bb5e <_printf_float+0x1ba>
 800bada:	f1ab 0302 	sub.w	r3, fp, #2
 800bade:	fa5f fb83 	uxtb.w	fp, r3
 800bae2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bae6:	d820      	bhi.n	800bb2a <_printf_float+0x186>
 800bae8:	3901      	subs	r1, #1
 800baea:	465a      	mov	r2, fp
 800baec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800baf0:	9109      	str	r1, [sp, #36]	; 0x24
 800baf2:	f7ff ff18 	bl	800b926 <__exponent>
 800baf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800baf8:	1813      	adds	r3, r2, r0
 800bafa:	2a01      	cmp	r2, #1
 800bafc:	4681      	mov	r9, r0
 800bafe:	6123      	str	r3, [r4, #16]
 800bb00:	dc02      	bgt.n	800bb08 <_printf_float+0x164>
 800bb02:	6822      	ldr	r2, [r4, #0]
 800bb04:	07d2      	lsls	r2, r2, #31
 800bb06:	d501      	bpl.n	800bb0c <_printf_float+0x168>
 800bb08:	3301      	adds	r3, #1
 800bb0a:	6123      	str	r3, [r4, #16]
 800bb0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d09c      	beq.n	800ba4e <_printf_float+0xaa>
 800bb14:	232d      	movs	r3, #45	; 0x2d
 800bb16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb1a:	e798      	b.n	800ba4e <_printf_float+0xaa>
 800bb1c:	9a06      	ldr	r2, [sp, #24]
 800bb1e:	2a47      	cmp	r2, #71	; 0x47
 800bb20:	d1be      	bne.n	800baa0 <_printf_float+0xfc>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1bc      	bne.n	800baa0 <_printf_float+0xfc>
 800bb26:	2301      	movs	r3, #1
 800bb28:	e7b9      	b.n	800ba9e <_printf_float+0xfa>
 800bb2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bb2e:	d118      	bne.n	800bb62 <_printf_float+0x1be>
 800bb30:	2900      	cmp	r1, #0
 800bb32:	6863      	ldr	r3, [r4, #4]
 800bb34:	dd0b      	ble.n	800bb4e <_printf_float+0x1aa>
 800bb36:	6121      	str	r1, [r4, #16]
 800bb38:	b913      	cbnz	r3, 800bb40 <_printf_float+0x19c>
 800bb3a:	6822      	ldr	r2, [r4, #0]
 800bb3c:	07d0      	lsls	r0, r2, #31
 800bb3e:	d502      	bpl.n	800bb46 <_printf_float+0x1a2>
 800bb40:	3301      	adds	r3, #1
 800bb42:	440b      	add	r3, r1
 800bb44:	6123      	str	r3, [r4, #16]
 800bb46:	65a1      	str	r1, [r4, #88]	; 0x58
 800bb48:	f04f 0900 	mov.w	r9, #0
 800bb4c:	e7de      	b.n	800bb0c <_printf_float+0x168>
 800bb4e:	b913      	cbnz	r3, 800bb56 <_printf_float+0x1b2>
 800bb50:	6822      	ldr	r2, [r4, #0]
 800bb52:	07d2      	lsls	r2, r2, #31
 800bb54:	d501      	bpl.n	800bb5a <_printf_float+0x1b6>
 800bb56:	3302      	adds	r3, #2
 800bb58:	e7f4      	b.n	800bb44 <_printf_float+0x1a0>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e7f2      	b.n	800bb44 <_printf_float+0x1a0>
 800bb5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb64:	4299      	cmp	r1, r3
 800bb66:	db05      	blt.n	800bb74 <_printf_float+0x1d0>
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	6121      	str	r1, [r4, #16]
 800bb6c:	07d8      	lsls	r0, r3, #31
 800bb6e:	d5ea      	bpl.n	800bb46 <_printf_float+0x1a2>
 800bb70:	1c4b      	adds	r3, r1, #1
 800bb72:	e7e7      	b.n	800bb44 <_printf_float+0x1a0>
 800bb74:	2900      	cmp	r1, #0
 800bb76:	bfd4      	ite	le
 800bb78:	f1c1 0202 	rsble	r2, r1, #2
 800bb7c:	2201      	movgt	r2, #1
 800bb7e:	4413      	add	r3, r2
 800bb80:	e7e0      	b.n	800bb44 <_printf_float+0x1a0>
 800bb82:	6823      	ldr	r3, [r4, #0]
 800bb84:	055a      	lsls	r2, r3, #21
 800bb86:	d407      	bmi.n	800bb98 <_printf_float+0x1f4>
 800bb88:	6923      	ldr	r3, [r4, #16]
 800bb8a:	4642      	mov	r2, r8
 800bb8c:	4631      	mov	r1, r6
 800bb8e:	4628      	mov	r0, r5
 800bb90:	47b8      	blx	r7
 800bb92:	3001      	adds	r0, #1
 800bb94:	d12c      	bne.n	800bbf0 <_printf_float+0x24c>
 800bb96:	e764      	b.n	800ba62 <_printf_float+0xbe>
 800bb98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb9c:	f240 80e0 	bls.w	800bd60 <_printf_float+0x3bc>
 800bba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bba4:	2200      	movs	r2, #0
 800bba6:	2300      	movs	r3, #0
 800bba8:	f7f4 ffae 	bl	8000b08 <__aeabi_dcmpeq>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d034      	beq.n	800bc1a <_printf_float+0x276>
 800bbb0:	4a37      	ldr	r2, [pc, #220]	; (800bc90 <_printf_float+0x2ec>)
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	4631      	mov	r1, r6
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	47b8      	blx	r7
 800bbba:	3001      	adds	r0, #1
 800bbbc:	f43f af51 	beq.w	800ba62 <_printf_float+0xbe>
 800bbc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	db02      	blt.n	800bbce <_printf_float+0x22a>
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	07d8      	lsls	r0, r3, #31
 800bbcc:	d510      	bpl.n	800bbf0 <_printf_float+0x24c>
 800bbce:	ee18 3a10 	vmov	r3, s16
 800bbd2:	4652      	mov	r2, sl
 800bbd4:	4631      	mov	r1, r6
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	47b8      	blx	r7
 800bbda:	3001      	adds	r0, #1
 800bbdc:	f43f af41 	beq.w	800ba62 <_printf_float+0xbe>
 800bbe0:	f04f 0800 	mov.w	r8, #0
 800bbe4:	f104 091a 	add.w	r9, r4, #26
 800bbe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbea:	3b01      	subs	r3, #1
 800bbec:	4543      	cmp	r3, r8
 800bbee:	dc09      	bgt.n	800bc04 <_printf_float+0x260>
 800bbf0:	6823      	ldr	r3, [r4, #0]
 800bbf2:	079b      	lsls	r3, r3, #30
 800bbf4:	f100 8107 	bmi.w	800be06 <_printf_float+0x462>
 800bbf8:	68e0      	ldr	r0, [r4, #12]
 800bbfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbfc:	4298      	cmp	r0, r3
 800bbfe:	bfb8      	it	lt
 800bc00:	4618      	movlt	r0, r3
 800bc02:	e730      	b.n	800ba66 <_printf_float+0xc2>
 800bc04:	2301      	movs	r3, #1
 800bc06:	464a      	mov	r2, r9
 800bc08:	4631      	mov	r1, r6
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	47b8      	blx	r7
 800bc0e:	3001      	adds	r0, #1
 800bc10:	f43f af27 	beq.w	800ba62 <_printf_float+0xbe>
 800bc14:	f108 0801 	add.w	r8, r8, #1
 800bc18:	e7e6      	b.n	800bbe8 <_printf_float+0x244>
 800bc1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	dc39      	bgt.n	800bc94 <_printf_float+0x2f0>
 800bc20:	4a1b      	ldr	r2, [pc, #108]	; (800bc90 <_printf_float+0x2ec>)
 800bc22:	2301      	movs	r3, #1
 800bc24:	4631      	mov	r1, r6
 800bc26:	4628      	mov	r0, r5
 800bc28:	47b8      	blx	r7
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	f43f af19 	beq.w	800ba62 <_printf_float+0xbe>
 800bc30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bc34:	4313      	orrs	r3, r2
 800bc36:	d102      	bne.n	800bc3e <_printf_float+0x29a>
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	07d9      	lsls	r1, r3, #31
 800bc3c:	d5d8      	bpl.n	800bbf0 <_printf_float+0x24c>
 800bc3e:	ee18 3a10 	vmov	r3, s16
 800bc42:	4652      	mov	r2, sl
 800bc44:	4631      	mov	r1, r6
 800bc46:	4628      	mov	r0, r5
 800bc48:	47b8      	blx	r7
 800bc4a:	3001      	adds	r0, #1
 800bc4c:	f43f af09 	beq.w	800ba62 <_printf_float+0xbe>
 800bc50:	f04f 0900 	mov.w	r9, #0
 800bc54:	f104 0a1a 	add.w	sl, r4, #26
 800bc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5a:	425b      	negs	r3, r3
 800bc5c:	454b      	cmp	r3, r9
 800bc5e:	dc01      	bgt.n	800bc64 <_printf_float+0x2c0>
 800bc60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc62:	e792      	b.n	800bb8a <_printf_float+0x1e6>
 800bc64:	2301      	movs	r3, #1
 800bc66:	4652      	mov	r2, sl
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	47b8      	blx	r7
 800bc6e:	3001      	adds	r0, #1
 800bc70:	f43f aef7 	beq.w	800ba62 <_printf_float+0xbe>
 800bc74:	f109 0901 	add.w	r9, r9, #1
 800bc78:	e7ee      	b.n	800bc58 <_printf_float+0x2b4>
 800bc7a:	bf00      	nop
 800bc7c:	7fefffff 	.word	0x7fefffff
 800bc80:	08011d58 	.word	0x08011d58
 800bc84:	08011d5c 	.word	0x08011d5c
 800bc88:	08011d60 	.word	0x08011d60
 800bc8c:	08011d64 	.word	0x08011d64
 800bc90:	08011d68 	.word	0x08011d68
 800bc94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	bfa8      	it	ge
 800bc9c:	461a      	movge	r2, r3
 800bc9e:	2a00      	cmp	r2, #0
 800bca0:	4691      	mov	r9, r2
 800bca2:	dc37      	bgt.n	800bd14 <_printf_float+0x370>
 800bca4:	f04f 0b00 	mov.w	fp, #0
 800bca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcac:	f104 021a 	add.w	r2, r4, #26
 800bcb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bcb2:	9305      	str	r3, [sp, #20]
 800bcb4:	eba3 0309 	sub.w	r3, r3, r9
 800bcb8:	455b      	cmp	r3, fp
 800bcba:	dc33      	bgt.n	800bd24 <_printf_float+0x380>
 800bcbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	db3b      	blt.n	800bd3c <_printf_float+0x398>
 800bcc4:	6823      	ldr	r3, [r4, #0]
 800bcc6:	07da      	lsls	r2, r3, #31
 800bcc8:	d438      	bmi.n	800bd3c <_printf_float+0x398>
 800bcca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bcce:	eba2 0903 	sub.w	r9, r2, r3
 800bcd2:	9b05      	ldr	r3, [sp, #20]
 800bcd4:	1ad2      	subs	r2, r2, r3
 800bcd6:	4591      	cmp	r9, r2
 800bcd8:	bfa8      	it	ge
 800bcda:	4691      	movge	r9, r2
 800bcdc:	f1b9 0f00 	cmp.w	r9, #0
 800bce0:	dc35      	bgt.n	800bd4e <_printf_float+0x3aa>
 800bce2:	f04f 0800 	mov.w	r8, #0
 800bce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcea:	f104 0a1a 	add.w	sl, r4, #26
 800bcee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcf2:	1a9b      	subs	r3, r3, r2
 800bcf4:	eba3 0309 	sub.w	r3, r3, r9
 800bcf8:	4543      	cmp	r3, r8
 800bcfa:	f77f af79 	ble.w	800bbf0 <_printf_float+0x24c>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	4652      	mov	r2, sl
 800bd02:	4631      	mov	r1, r6
 800bd04:	4628      	mov	r0, r5
 800bd06:	47b8      	blx	r7
 800bd08:	3001      	adds	r0, #1
 800bd0a:	f43f aeaa 	beq.w	800ba62 <_printf_float+0xbe>
 800bd0e:	f108 0801 	add.w	r8, r8, #1
 800bd12:	e7ec      	b.n	800bcee <_printf_float+0x34a>
 800bd14:	4613      	mov	r3, r2
 800bd16:	4631      	mov	r1, r6
 800bd18:	4642      	mov	r2, r8
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	47b8      	blx	r7
 800bd1e:	3001      	adds	r0, #1
 800bd20:	d1c0      	bne.n	800bca4 <_printf_float+0x300>
 800bd22:	e69e      	b.n	800ba62 <_printf_float+0xbe>
 800bd24:	2301      	movs	r3, #1
 800bd26:	4631      	mov	r1, r6
 800bd28:	4628      	mov	r0, r5
 800bd2a:	9205      	str	r2, [sp, #20]
 800bd2c:	47b8      	blx	r7
 800bd2e:	3001      	adds	r0, #1
 800bd30:	f43f ae97 	beq.w	800ba62 <_printf_float+0xbe>
 800bd34:	9a05      	ldr	r2, [sp, #20]
 800bd36:	f10b 0b01 	add.w	fp, fp, #1
 800bd3a:	e7b9      	b.n	800bcb0 <_printf_float+0x30c>
 800bd3c:	ee18 3a10 	vmov	r3, s16
 800bd40:	4652      	mov	r2, sl
 800bd42:	4631      	mov	r1, r6
 800bd44:	4628      	mov	r0, r5
 800bd46:	47b8      	blx	r7
 800bd48:	3001      	adds	r0, #1
 800bd4a:	d1be      	bne.n	800bcca <_printf_float+0x326>
 800bd4c:	e689      	b.n	800ba62 <_printf_float+0xbe>
 800bd4e:	9a05      	ldr	r2, [sp, #20]
 800bd50:	464b      	mov	r3, r9
 800bd52:	4442      	add	r2, r8
 800bd54:	4631      	mov	r1, r6
 800bd56:	4628      	mov	r0, r5
 800bd58:	47b8      	blx	r7
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	d1c1      	bne.n	800bce2 <_printf_float+0x33e>
 800bd5e:	e680      	b.n	800ba62 <_printf_float+0xbe>
 800bd60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd62:	2a01      	cmp	r2, #1
 800bd64:	dc01      	bgt.n	800bd6a <_printf_float+0x3c6>
 800bd66:	07db      	lsls	r3, r3, #31
 800bd68:	d53a      	bpl.n	800bde0 <_printf_float+0x43c>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	4642      	mov	r2, r8
 800bd6e:	4631      	mov	r1, r6
 800bd70:	4628      	mov	r0, r5
 800bd72:	47b8      	blx	r7
 800bd74:	3001      	adds	r0, #1
 800bd76:	f43f ae74 	beq.w	800ba62 <_printf_float+0xbe>
 800bd7a:	ee18 3a10 	vmov	r3, s16
 800bd7e:	4652      	mov	r2, sl
 800bd80:	4631      	mov	r1, r6
 800bd82:	4628      	mov	r0, r5
 800bd84:	47b8      	blx	r7
 800bd86:	3001      	adds	r0, #1
 800bd88:	f43f ae6b 	beq.w	800ba62 <_printf_float+0xbe>
 800bd8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd90:	2200      	movs	r2, #0
 800bd92:	2300      	movs	r3, #0
 800bd94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bd98:	f7f4 feb6 	bl	8000b08 <__aeabi_dcmpeq>
 800bd9c:	b9d8      	cbnz	r0, 800bdd6 <_printf_float+0x432>
 800bd9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bda2:	f108 0201 	add.w	r2, r8, #1
 800bda6:	4631      	mov	r1, r6
 800bda8:	4628      	mov	r0, r5
 800bdaa:	47b8      	blx	r7
 800bdac:	3001      	adds	r0, #1
 800bdae:	d10e      	bne.n	800bdce <_printf_float+0x42a>
 800bdb0:	e657      	b.n	800ba62 <_printf_float+0xbe>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4628      	mov	r0, r5
 800bdba:	47b8      	blx	r7
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	f43f ae50 	beq.w	800ba62 <_printf_float+0xbe>
 800bdc2:	f108 0801 	add.w	r8, r8, #1
 800bdc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	4543      	cmp	r3, r8
 800bdcc:	dcf1      	bgt.n	800bdb2 <_printf_float+0x40e>
 800bdce:	464b      	mov	r3, r9
 800bdd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bdd4:	e6da      	b.n	800bb8c <_printf_float+0x1e8>
 800bdd6:	f04f 0800 	mov.w	r8, #0
 800bdda:	f104 0a1a 	add.w	sl, r4, #26
 800bdde:	e7f2      	b.n	800bdc6 <_printf_float+0x422>
 800bde0:	2301      	movs	r3, #1
 800bde2:	4642      	mov	r2, r8
 800bde4:	e7df      	b.n	800bda6 <_printf_float+0x402>
 800bde6:	2301      	movs	r3, #1
 800bde8:	464a      	mov	r2, r9
 800bdea:	4631      	mov	r1, r6
 800bdec:	4628      	mov	r0, r5
 800bdee:	47b8      	blx	r7
 800bdf0:	3001      	adds	r0, #1
 800bdf2:	f43f ae36 	beq.w	800ba62 <_printf_float+0xbe>
 800bdf6:	f108 0801 	add.w	r8, r8, #1
 800bdfa:	68e3      	ldr	r3, [r4, #12]
 800bdfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdfe:	1a5b      	subs	r3, r3, r1
 800be00:	4543      	cmp	r3, r8
 800be02:	dcf0      	bgt.n	800bde6 <_printf_float+0x442>
 800be04:	e6f8      	b.n	800bbf8 <_printf_float+0x254>
 800be06:	f04f 0800 	mov.w	r8, #0
 800be0a:	f104 0919 	add.w	r9, r4, #25
 800be0e:	e7f4      	b.n	800bdfa <_printf_float+0x456>

0800be10 <_printf_common>:
 800be10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be14:	4616      	mov	r6, r2
 800be16:	4699      	mov	r9, r3
 800be18:	688a      	ldr	r2, [r1, #8]
 800be1a:	690b      	ldr	r3, [r1, #16]
 800be1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be20:	4293      	cmp	r3, r2
 800be22:	bfb8      	it	lt
 800be24:	4613      	movlt	r3, r2
 800be26:	6033      	str	r3, [r6, #0]
 800be28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be2c:	4607      	mov	r7, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	b10a      	cbz	r2, 800be36 <_printf_common+0x26>
 800be32:	3301      	adds	r3, #1
 800be34:	6033      	str	r3, [r6, #0]
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	0699      	lsls	r1, r3, #26
 800be3a:	bf42      	ittt	mi
 800be3c:	6833      	ldrmi	r3, [r6, #0]
 800be3e:	3302      	addmi	r3, #2
 800be40:	6033      	strmi	r3, [r6, #0]
 800be42:	6825      	ldr	r5, [r4, #0]
 800be44:	f015 0506 	ands.w	r5, r5, #6
 800be48:	d106      	bne.n	800be58 <_printf_common+0x48>
 800be4a:	f104 0a19 	add.w	sl, r4, #25
 800be4e:	68e3      	ldr	r3, [r4, #12]
 800be50:	6832      	ldr	r2, [r6, #0]
 800be52:	1a9b      	subs	r3, r3, r2
 800be54:	42ab      	cmp	r3, r5
 800be56:	dc26      	bgt.n	800bea6 <_printf_common+0x96>
 800be58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be5c:	1e13      	subs	r3, r2, #0
 800be5e:	6822      	ldr	r2, [r4, #0]
 800be60:	bf18      	it	ne
 800be62:	2301      	movne	r3, #1
 800be64:	0692      	lsls	r2, r2, #26
 800be66:	d42b      	bmi.n	800bec0 <_printf_common+0xb0>
 800be68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be6c:	4649      	mov	r1, r9
 800be6e:	4638      	mov	r0, r7
 800be70:	47c0      	blx	r8
 800be72:	3001      	adds	r0, #1
 800be74:	d01e      	beq.n	800beb4 <_printf_common+0xa4>
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	6922      	ldr	r2, [r4, #16]
 800be7a:	f003 0306 	and.w	r3, r3, #6
 800be7e:	2b04      	cmp	r3, #4
 800be80:	bf02      	ittt	eq
 800be82:	68e5      	ldreq	r5, [r4, #12]
 800be84:	6833      	ldreq	r3, [r6, #0]
 800be86:	1aed      	subeq	r5, r5, r3
 800be88:	68a3      	ldr	r3, [r4, #8]
 800be8a:	bf0c      	ite	eq
 800be8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be90:	2500      	movne	r5, #0
 800be92:	4293      	cmp	r3, r2
 800be94:	bfc4      	itt	gt
 800be96:	1a9b      	subgt	r3, r3, r2
 800be98:	18ed      	addgt	r5, r5, r3
 800be9a:	2600      	movs	r6, #0
 800be9c:	341a      	adds	r4, #26
 800be9e:	42b5      	cmp	r5, r6
 800bea0:	d11a      	bne.n	800bed8 <_printf_common+0xc8>
 800bea2:	2000      	movs	r0, #0
 800bea4:	e008      	b.n	800beb8 <_printf_common+0xa8>
 800bea6:	2301      	movs	r3, #1
 800bea8:	4652      	mov	r2, sl
 800beaa:	4649      	mov	r1, r9
 800beac:	4638      	mov	r0, r7
 800beae:	47c0      	blx	r8
 800beb0:	3001      	adds	r0, #1
 800beb2:	d103      	bne.n	800bebc <_printf_common+0xac>
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295
 800beb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bebc:	3501      	adds	r5, #1
 800bebe:	e7c6      	b.n	800be4e <_printf_common+0x3e>
 800bec0:	18e1      	adds	r1, r4, r3
 800bec2:	1c5a      	adds	r2, r3, #1
 800bec4:	2030      	movs	r0, #48	; 0x30
 800bec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800beca:	4422      	add	r2, r4
 800becc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bed4:	3302      	adds	r3, #2
 800bed6:	e7c7      	b.n	800be68 <_printf_common+0x58>
 800bed8:	2301      	movs	r3, #1
 800beda:	4622      	mov	r2, r4
 800bedc:	4649      	mov	r1, r9
 800bede:	4638      	mov	r0, r7
 800bee0:	47c0      	blx	r8
 800bee2:	3001      	adds	r0, #1
 800bee4:	d0e6      	beq.n	800beb4 <_printf_common+0xa4>
 800bee6:	3601      	adds	r6, #1
 800bee8:	e7d9      	b.n	800be9e <_printf_common+0x8e>
	...

0800beec <_printf_i>:
 800beec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bef0:	7e0f      	ldrb	r7, [r1, #24]
 800bef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bef4:	2f78      	cmp	r7, #120	; 0x78
 800bef6:	4691      	mov	r9, r2
 800bef8:	4680      	mov	r8, r0
 800befa:	460c      	mov	r4, r1
 800befc:	469a      	mov	sl, r3
 800befe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf02:	d807      	bhi.n	800bf14 <_printf_i+0x28>
 800bf04:	2f62      	cmp	r7, #98	; 0x62
 800bf06:	d80a      	bhi.n	800bf1e <_printf_i+0x32>
 800bf08:	2f00      	cmp	r7, #0
 800bf0a:	f000 80d4 	beq.w	800c0b6 <_printf_i+0x1ca>
 800bf0e:	2f58      	cmp	r7, #88	; 0x58
 800bf10:	f000 80c0 	beq.w	800c094 <_printf_i+0x1a8>
 800bf14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf1c:	e03a      	b.n	800bf94 <_printf_i+0xa8>
 800bf1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf22:	2b15      	cmp	r3, #21
 800bf24:	d8f6      	bhi.n	800bf14 <_printf_i+0x28>
 800bf26:	a101      	add	r1, pc, #4	; (adr r1, 800bf2c <_printf_i+0x40>)
 800bf28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf2c:	0800bf85 	.word	0x0800bf85
 800bf30:	0800bf99 	.word	0x0800bf99
 800bf34:	0800bf15 	.word	0x0800bf15
 800bf38:	0800bf15 	.word	0x0800bf15
 800bf3c:	0800bf15 	.word	0x0800bf15
 800bf40:	0800bf15 	.word	0x0800bf15
 800bf44:	0800bf99 	.word	0x0800bf99
 800bf48:	0800bf15 	.word	0x0800bf15
 800bf4c:	0800bf15 	.word	0x0800bf15
 800bf50:	0800bf15 	.word	0x0800bf15
 800bf54:	0800bf15 	.word	0x0800bf15
 800bf58:	0800c09d 	.word	0x0800c09d
 800bf5c:	0800bfc5 	.word	0x0800bfc5
 800bf60:	0800c057 	.word	0x0800c057
 800bf64:	0800bf15 	.word	0x0800bf15
 800bf68:	0800bf15 	.word	0x0800bf15
 800bf6c:	0800c0bf 	.word	0x0800c0bf
 800bf70:	0800bf15 	.word	0x0800bf15
 800bf74:	0800bfc5 	.word	0x0800bfc5
 800bf78:	0800bf15 	.word	0x0800bf15
 800bf7c:	0800bf15 	.word	0x0800bf15
 800bf80:	0800c05f 	.word	0x0800c05f
 800bf84:	682b      	ldr	r3, [r5, #0]
 800bf86:	1d1a      	adds	r2, r3, #4
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	602a      	str	r2, [r5, #0]
 800bf8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf94:	2301      	movs	r3, #1
 800bf96:	e09f      	b.n	800c0d8 <_printf_i+0x1ec>
 800bf98:	6820      	ldr	r0, [r4, #0]
 800bf9a:	682b      	ldr	r3, [r5, #0]
 800bf9c:	0607      	lsls	r7, r0, #24
 800bf9e:	f103 0104 	add.w	r1, r3, #4
 800bfa2:	6029      	str	r1, [r5, #0]
 800bfa4:	d501      	bpl.n	800bfaa <_printf_i+0xbe>
 800bfa6:	681e      	ldr	r6, [r3, #0]
 800bfa8:	e003      	b.n	800bfb2 <_printf_i+0xc6>
 800bfaa:	0646      	lsls	r6, r0, #25
 800bfac:	d5fb      	bpl.n	800bfa6 <_printf_i+0xba>
 800bfae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bfb2:	2e00      	cmp	r6, #0
 800bfb4:	da03      	bge.n	800bfbe <_printf_i+0xd2>
 800bfb6:	232d      	movs	r3, #45	; 0x2d
 800bfb8:	4276      	negs	r6, r6
 800bfba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfbe:	485a      	ldr	r0, [pc, #360]	; (800c128 <_printf_i+0x23c>)
 800bfc0:	230a      	movs	r3, #10
 800bfc2:	e012      	b.n	800bfea <_printf_i+0xfe>
 800bfc4:	682b      	ldr	r3, [r5, #0]
 800bfc6:	6820      	ldr	r0, [r4, #0]
 800bfc8:	1d19      	adds	r1, r3, #4
 800bfca:	6029      	str	r1, [r5, #0]
 800bfcc:	0605      	lsls	r5, r0, #24
 800bfce:	d501      	bpl.n	800bfd4 <_printf_i+0xe8>
 800bfd0:	681e      	ldr	r6, [r3, #0]
 800bfd2:	e002      	b.n	800bfda <_printf_i+0xee>
 800bfd4:	0641      	lsls	r1, r0, #25
 800bfd6:	d5fb      	bpl.n	800bfd0 <_printf_i+0xe4>
 800bfd8:	881e      	ldrh	r6, [r3, #0]
 800bfda:	4853      	ldr	r0, [pc, #332]	; (800c128 <_printf_i+0x23c>)
 800bfdc:	2f6f      	cmp	r7, #111	; 0x6f
 800bfde:	bf0c      	ite	eq
 800bfe0:	2308      	moveq	r3, #8
 800bfe2:	230a      	movne	r3, #10
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfea:	6865      	ldr	r5, [r4, #4]
 800bfec:	60a5      	str	r5, [r4, #8]
 800bfee:	2d00      	cmp	r5, #0
 800bff0:	bfa2      	ittt	ge
 800bff2:	6821      	ldrge	r1, [r4, #0]
 800bff4:	f021 0104 	bicge.w	r1, r1, #4
 800bff8:	6021      	strge	r1, [r4, #0]
 800bffa:	b90e      	cbnz	r6, 800c000 <_printf_i+0x114>
 800bffc:	2d00      	cmp	r5, #0
 800bffe:	d04b      	beq.n	800c098 <_printf_i+0x1ac>
 800c000:	4615      	mov	r5, r2
 800c002:	fbb6 f1f3 	udiv	r1, r6, r3
 800c006:	fb03 6711 	mls	r7, r3, r1, r6
 800c00a:	5dc7      	ldrb	r7, [r0, r7]
 800c00c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c010:	4637      	mov	r7, r6
 800c012:	42bb      	cmp	r3, r7
 800c014:	460e      	mov	r6, r1
 800c016:	d9f4      	bls.n	800c002 <_printf_i+0x116>
 800c018:	2b08      	cmp	r3, #8
 800c01a:	d10b      	bne.n	800c034 <_printf_i+0x148>
 800c01c:	6823      	ldr	r3, [r4, #0]
 800c01e:	07de      	lsls	r6, r3, #31
 800c020:	d508      	bpl.n	800c034 <_printf_i+0x148>
 800c022:	6923      	ldr	r3, [r4, #16]
 800c024:	6861      	ldr	r1, [r4, #4]
 800c026:	4299      	cmp	r1, r3
 800c028:	bfde      	ittt	le
 800c02a:	2330      	movle	r3, #48	; 0x30
 800c02c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c030:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c034:	1b52      	subs	r2, r2, r5
 800c036:	6122      	str	r2, [r4, #16]
 800c038:	f8cd a000 	str.w	sl, [sp]
 800c03c:	464b      	mov	r3, r9
 800c03e:	aa03      	add	r2, sp, #12
 800c040:	4621      	mov	r1, r4
 800c042:	4640      	mov	r0, r8
 800c044:	f7ff fee4 	bl	800be10 <_printf_common>
 800c048:	3001      	adds	r0, #1
 800c04a:	d14a      	bne.n	800c0e2 <_printf_i+0x1f6>
 800c04c:	f04f 30ff 	mov.w	r0, #4294967295
 800c050:	b004      	add	sp, #16
 800c052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c056:	6823      	ldr	r3, [r4, #0]
 800c058:	f043 0320 	orr.w	r3, r3, #32
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	4833      	ldr	r0, [pc, #204]	; (800c12c <_printf_i+0x240>)
 800c060:	2778      	movs	r7, #120	; 0x78
 800c062:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c066:	6823      	ldr	r3, [r4, #0]
 800c068:	6829      	ldr	r1, [r5, #0]
 800c06a:	061f      	lsls	r7, r3, #24
 800c06c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c070:	d402      	bmi.n	800c078 <_printf_i+0x18c>
 800c072:	065f      	lsls	r7, r3, #25
 800c074:	bf48      	it	mi
 800c076:	b2b6      	uxthmi	r6, r6
 800c078:	07df      	lsls	r7, r3, #31
 800c07a:	bf48      	it	mi
 800c07c:	f043 0320 	orrmi.w	r3, r3, #32
 800c080:	6029      	str	r1, [r5, #0]
 800c082:	bf48      	it	mi
 800c084:	6023      	strmi	r3, [r4, #0]
 800c086:	b91e      	cbnz	r6, 800c090 <_printf_i+0x1a4>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	f023 0320 	bic.w	r3, r3, #32
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	2310      	movs	r3, #16
 800c092:	e7a7      	b.n	800bfe4 <_printf_i+0xf8>
 800c094:	4824      	ldr	r0, [pc, #144]	; (800c128 <_printf_i+0x23c>)
 800c096:	e7e4      	b.n	800c062 <_printf_i+0x176>
 800c098:	4615      	mov	r5, r2
 800c09a:	e7bd      	b.n	800c018 <_printf_i+0x12c>
 800c09c:	682b      	ldr	r3, [r5, #0]
 800c09e:	6826      	ldr	r6, [r4, #0]
 800c0a0:	6961      	ldr	r1, [r4, #20]
 800c0a2:	1d18      	adds	r0, r3, #4
 800c0a4:	6028      	str	r0, [r5, #0]
 800c0a6:	0635      	lsls	r5, r6, #24
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	d501      	bpl.n	800c0b0 <_printf_i+0x1c4>
 800c0ac:	6019      	str	r1, [r3, #0]
 800c0ae:	e002      	b.n	800c0b6 <_printf_i+0x1ca>
 800c0b0:	0670      	lsls	r0, r6, #25
 800c0b2:	d5fb      	bpl.n	800c0ac <_printf_i+0x1c0>
 800c0b4:	8019      	strh	r1, [r3, #0]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	6123      	str	r3, [r4, #16]
 800c0ba:	4615      	mov	r5, r2
 800c0bc:	e7bc      	b.n	800c038 <_printf_i+0x14c>
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	1d1a      	adds	r2, r3, #4
 800c0c2:	602a      	str	r2, [r5, #0]
 800c0c4:	681d      	ldr	r5, [r3, #0]
 800c0c6:	6862      	ldr	r2, [r4, #4]
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	f7f4 f8a0 	bl	8000210 <memchr>
 800c0d0:	b108      	cbz	r0, 800c0d6 <_printf_i+0x1ea>
 800c0d2:	1b40      	subs	r0, r0, r5
 800c0d4:	6060      	str	r0, [r4, #4]
 800c0d6:	6863      	ldr	r3, [r4, #4]
 800c0d8:	6123      	str	r3, [r4, #16]
 800c0da:	2300      	movs	r3, #0
 800c0dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0e0:	e7aa      	b.n	800c038 <_printf_i+0x14c>
 800c0e2:	6923      	ldr	r3, [r4, #16]
 800c0e4:	462a      	mov	r2, r5
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	4640      	mov	r0, r8
 800c0ea:	47d0      	blx	sl
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	d0ad      	beq.n	800c04c <_printf_i+0x160>
 800c0f0:	6823      	ldr	r3, [r4, #0]
 800c0f2:	079b      	lsls	r3, r3, #30
 800c0f4:	d413      	bmi.n	800c11e <_printf_i+0x232>
 800c0f6:	68e0      	ldr	r0, [r4, #12]
 800c0f8:	9b03      	ldr	r3, [sp, #12]
 800c0fa:	4298      	cmp	r0, r3
 800c0fc:	bfb8      	it	lt
 800c0fe:	4618      	movlt	r0, r3
 800c100:	e7a6      	b.n	800c050 <_printf_i+0x164>
 800c102:	2301      	movs	r3, #1
 800c104:	4632      	mov	r2, r6
 800c106:	4649      	mov	r1, r9
 800c108:	4640      	mov	r0, r8
 800c10a:	47d0      	blx	sl
 800c10c:	3001      	adds	r0, #1
 800c10e:	d09d      	beq.n	800c04c <_printf_i+0x160>
 800c110:	3501      	adds	r5, #1
 800c112:	68e3      	ldr	r3, [r4, #12]
 800c114:	9903      	ldr	r1, [sp, #12]
 800c116:	1a5b      	subs	r3, r3, r1
 800c118:	42ab      	cmp	r3, r5
 800c11a:	dcf2      	bgt.n	800c102 <_printf_i+0x216>
 800c11c:	e7eb      	b.n	800c0f6 <_printf_i+0x20a>
 800c11e:	2500      	movs	r5, #0
 800c120:	f104 0619 	add.w	r6, r4, #25
 800c124:	e7f5      	b.n	800c112 <_printf_i+0x226>
 800c126:	bf00      	nop
 800c128:	08011d6a 	.word	0x08011d6a
 800c12c:	08011d7b 	.word	0x08011d7b

0800c130 <std>:
 800c130:	2300      	movs	r3, #0
 800c132:	b510      	push	{r4, lr}
 800c134:	4604      	mov	r4, r0
 800c136:	e9c0 3300 	strd	r3, r3, [r0]
 800c13a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c13e:	6083      	str	r3, [r0, #8]
 800c140:	8181      	strh	r1, [r0, #12]
 800c142:	6643      	str	r3, [r0, #100]	; 0x64
 800c144:	81c2      	strh	r2, [r0, #14]
 800c146:	6183      	str	r3, [r0, #24]
 800c148:	4619      	mov	r1, r3
 800c14a:	2208      	movs	r2, #8
 800c14c:	305c      	adds	r0, #92	; 0x5c
 800c14e:	f000 f9c3 	bl	800c4d8 <memset>
 800c152:	4b05      	ldr	r3, [pc, #20]	; (800c168 <std+0x38>)
 800c154:	6263      	str	r3, [r4, #36]	; 0x24
 800c156:	4b05      	ldr	r3, [pc, #20]	; (800c16c <std+0x3c>)
 800c158:	62a3      	str	r3, [r4, #40]	; 0x28
 800c15a:	4b05      	ldr	r3, [pc, #20]	; (800c170 <std+0x40>)
 800c15c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c15e:	4b05      	ldr	r3, [pc, #20]	; (800c174 <std+0x44>)
 800c160:	6224      	str	r4, [r4, #32]
 800c162:	6323      	str	r3, [r4, #48]	; 0x30
 800c164:	bd10      	pop	{r4, pc}
 800c166:	bf00      	nop
 800c168:	0800c2f5 	.word	0x0800c2f5
 800c16c:	0800c317 	.word	0x0800c317
 800c170:	0800c34f 	.word	0x0800c34f
 800c174:	0800c373 	.word	0x0800c373

0800c178 <stdio_exit_handler>:
 800c178:	4a02      	ldr	r2, [pc, #8]	; (800c184 <stdio_exit_handler+0xc>)
 800c17a:	4903      	ldr	r1, [pc, #12]	; (800c188 <stdio_exit_handler+0x10>)
 800c17c:	4803      	ldr	r0, [pc, #12]	; (800c18c <stdio_exit_handler+0x14>)
 800c17e:	f000 b87b 	b.w	800c278 <_fwalk_sglue>
 800c182:	bf00      	nop
 800c184:	20000c80 	.word	0x20000c80
 800c188:	0800e251 	.word	0x0800e251
 800c18c:	20000c8c 	.word	0x20000c8c

0800c190 <cleanup_stdio>:
 800c190:	6841      	ldr	r1, [r0, #4]
 800c192:	4b0c      	ldr	r3, [pc, #48]	; (800c1c4 <cleanup_stdio+0x34>)
 800c194:	4299      	cmp	r1, r3
 800c196:	b510      	push	{r4, lr}
 800c198:	4604      	mov	r4, r0
 800c19a:	d001      	beq.n	800c1a0 <cleanup_stdio+0x10>
 800c19c:	f002 f858 	bl	800e250 <_fflush_r>
 800c1a0:	68a1      	ldr	r1, [r4, #8]
 800c1a2:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <cleanup_stdio+0x38>)
 800c1a4:	4299      	cmp	r1, r3
 800c1a6:	d002      	beq.n	800c1ae <cleanup_stdio+0x1e>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f002 f851 	bl	800e250 <_fflush_r>
 800c1ae:	68e1      	ldr	r1, [r4, #12]
 800c1b0:	4b06      	ldr	r3, [pc, #24]	; (800c1cc <cleanup_stdio+0x3c>)
 800c1b2:	4299      	cmp	r1, r3
 800c1b4:	d004      	beq.n	800c1c0 <cleanup_stdio+0x30>
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1bc:	f002 b848 	b.w	800e250 <_fflush_r>
 800c1c0:	bd10      	pop	{r4, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20001838 	.word	0x20001838
 800c1c8:	200018a0 	.word	0x200018a0
 800c1cc:	20001908 	.word	0x20001908

0800c1d0 <global_stdio_init.part.0>:
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	4b0b      	ldr	r3, [pc, #44]	; (800c200 <global_stdio_init.part.0+0x30>)
 800c1d4:	4c0b      	ldr	r4, [pc, #44]	; (800c204 <global_stdio_init.part.0+0x34>)
 800c1d6:	4a0c      	ldr	r2, [pc, #48]	; (800c208 <global_stdio_init.part.0+0x38>)
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	4620      	mov	r0, r4
 800c1dc:	2200      	movs	r2, #0
 800c1de:	2104      	movs	r1, #4
 800c1e0:	f7ff ffa6 	bl	800c130 <std>
 800c1e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	2109      	movs	r1, #9
 800c1ec:	f7ff ffa0 	bl	800c130 <std>
 800c1f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1fa:	2112      	movs	r1, #18
 800c1fc:	f7ff bf98 	b.w	800c130 <std>
 800c200:	20001970 	.word	0x20001970
 800c204:	20001838 	.word	0x20001838
 800c208:	0800c179 	.word	0x0800c179

0800c20c <__sfp_lock_acquire>:
 800c20c:	4801      	ldr	r0, [pc, #4]	; (800c214 <__sfp_lock_acquire+0x8>)
 800c20e:	f000 ba45 	b.w	800c69c <__retarget_lock_acquire_recursive>
 800c212:	bf00      	nop
 800c214:	2000197a 	.word	0x2000197a

0800c218 <__sfp_lock_release>:
 800c218:	4801      	ldr	r0, [pc, #4]	; (800c220 <__sfp_lock_release+0x8>)
 800c21a:	f000 ba40 	b.w	800c69e <__retarget_lock_release_recursive>
 800c21e:	bf00      	nop
 800c220:	2000197a 	.word	0x2000197a

0800c224 <__sinit>:
 800c224:	b510      	push	{r4, lr}
 800c226:	4604      	mov	r4, r0
 800c228:	f7ff fff0 	bl	800c20c <__sfp_lock_acquire>
 800c22c:	6a23      	ldr	r3, [r4, #32]
 800c22e:	b11b      	cbz	r3, 800c238 <__sinit+0x14>
 800c230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c234:	f7ff bff0 	b.w	800c218 <__sfp_lock_release>
 800c238:	4b04      	ldr	r3, [pc, #16]	; (800c24c <__sinit+0x28>)
 800c23a:	6223      	str	r3, [r4, #32]
 800c23c:	4b04      	ldr	r3, [pc, #16]	; (800c250 <__sinit+0x2c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1f5      	bne.n	800c230 <__sinit+0xc>
 800c244:	f7ff ffc4 	bl	800c1d0 <global_stdio_init.part.0>
 800c248:	e7f2      	b.n	800c230 <__sinit+0xc>
 800c24a:	bf00      	nop
 800c24c:	0800c191 	.word	0x0800c191
 800c250:	20001970 	.word	0x20001970

0800c254 <fiprintf>:
 800c254:	b40e      	push	{r1, r2, r3}
 800c256:	b503      	push	{r0, r1, lr}
 800c258:	4601      	mov	r1, r0
 800c25a:	ab03      	add	r3, sp, #12
 800c25c:	4805      	ldr	r0, [pc, #20]	; (800c274 <fiprintf+0x20>)
 800c25e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c262:	6800      	ldr	r0, [r0, #0]
 800c264:	9301      	str	r3, [sp, #4]
 800c266:	f001 fe53 	bl	800df10 <_vfiprintf_r>
 800c26a:	b002      	add	sp, #8
 800c26c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c270:	b003      	add	sp, #12
 800c272:	4770      	bx	lr
 800c274:	20000cd8 	.word	0x20000cd8

0800c278 <_fwalk_sglue>:
 800c278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c27c:	4607      	mov	r7, r0
 800c27e:	4688      	mov	r8, r1
 800c280:	4614      	mov	r4, r2
 800c282:	2600      	movs	r6, #0
 800c284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c288:	f1b9 0901 	subs.w	r9, r9, #1
 800c28c:	d505      	bpl.n	800c29a <_fwalk_sglue+0x22>
 800c28e:	6824      	ldr	r4, [r4, #0]
 800c290:	2c00      	cmp	r4, #0
 800c292:	d1f7      	bne.n	800c284 <_fwalk_sglue+0xc>
 800c294:	4630      	mov	r0, r6
 800c296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c29a:	89ab      	ldrh	r3, [r5, #12]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d907      	bls.n	800c2b0 <_fwalk_sglue+0x38>
 800c2a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	d003      	beq.n	800c2b0 <_fwalk_sglue+0x38>
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	4638      	mov	r0, r7
 800c2ac:	47c0      	blx	r8
 800c2ae:	4306      	orrs	r6, r0
 800c2b0:	3568      	adds	r5, #104	; 0x68
 800c2b2:	e7e9      	b.n	800c288 <_fwalk_sglue+0x10>

0800c2b4 <siprintf>:
 800c2b4:	b40e      	push	{r1, r2, r3}
 800c2b6:	b500      	push	{lr}
 800c2b8:	b09c      	sub	sp, #112	; 0x70
 800c2ba:	ab1d      	add	r3, sp, #116	; 0x74
 800c2bc:	9002      	str	r0, [sp, #8]
 800c2be:	9006      	str	r0, [sp, #24]
 800c2c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2c4:	4809      	ldr	r0, [pc, #36]	; (800c2ec <siprintf+0x38>)
 800c2c6:	9107      	str	r1, [sp, #28]
 800c2c8:	9104      	str	r1, [sp, #16]
 800c2ca:	4909      	ldr	r1, [pc, #36]	; (800c2f0 <siprintf+0x3c>)
 800c2cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d0:	9105      	str	r1, [sp, #20]
 800c2d2:	6800      	ldr	r0, [r0, #0]
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	a902      	add	r1, sp, #8
 800c2d8:	f001 fcf2 	bl	800dcc0 <_svfiprintf_r>
 800c2dc:	9b02      	ldr	r3, [sp, #8]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	701a      	strb	r2, [r3, #0]
 800c2e2:	b01c      	add	sp, #112	; 0x70
 800c2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2e8:	b003      	add	sp, #12
 800c2ea:	4770      	bx	lr
 800c2ec:	20000cd8 	.word	0x20000cd8
 800c2f0:	ffff0208 	.word	0xffff0208

0800c2f4 <__sread>:
 800c2f4:	b510      	push	{r4, lr}
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2fc:	f000 f95c 	bl	800c5b8 <_read_r>
 800c300:	2800      	cmp	r0, #0
 800c302:	bfab      	itete	ge
 800c304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c306:	89a3      	ldrhlt	r3, [r4, #12]
 800c308:	181b      	addge	r3, r3, r0
 800c30a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c30e:	bfac      	ite	ge
 800c310:	6563      	strge	r3, [r4, #84]	; 0x54
 800c312:	81a3      	strhlt	r3, [r4, #12]
 800c314:	bd10      	pop	{r4, pc}

0800c316 <__swrite>:
 800c316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c31a:	461f      	mov	r7, r3
 800c31c:	898b      	ldrh	r3, [r1, #12]
 800c31e:	05db      	lsls	r3, r3, #23
 800c320:	4605      	mov	r5, r0
 800c322:	460c      	mov	r4, r1
 800c324:	4616      	mov	r6, r2
 800c326:	d505      	bpl.n	800c334 <__swrite+0x1e>
 800c328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c32c:	2302      	movs	r3, #2
 800c32e:	2200      	movs	r2, #0
 800c330:	f000 f930 	bl	800c594 <_lseek_r>
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c33a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c33e:	81a3      	strh	r3, [r4, #12]
 800c340:	4632      	mov	r2, r6
 800c342:	463b      	mov	r3, r7
 800c344:	4628      	mov	r0, r5
 800c346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c34a:	f000 b96b 	b.w	800c624 <_write_r>

0800c34e <__sseek>:
 800c34e:	b510      	push	{r4, lr}
 800c350:	460c      	mov	r4, r1
 800c352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c356:	f000 f91d 	bl	800c594 <_lseek_r>
 800c35a:	1c43      	adds	r3, r0, #1
 800c35c:	89a3      	ldrh	r3, [r4, #12]
 800c35e:	bf15      	itete	ne
 800c360:	6560      	strne	r0, [r4, #84]	; 0x54
 800c362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c36a:	81a3      	strheq	r3, [r4, #12]
 800c36c:	bf18      	it	ne
 800c36e:	81a3      	strhne	r3, [r4, #12]
 800c370:	bd10      	pop	{r4, pc}

0800c372 <__sclose>:
 800c372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c376:	f000 b8fd 	b.w	800c574 <_close_r>

0800c37a <__swbuf_r>:
 800c37a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c37c:	460e      	mov	r6, r1
 800c37e:	4614      	mov	r4, r2
 800c380:	4605      	mov	r5, r0
 800c382:	b118      	cbz	r0, 800c38c <__swbuf_r+0x12>
 800c384:	6a03      	ldr	r3, [r0, #32]
 800c386:	b90b      	cbnz	r3, 800c38c <__swbuf_r+0x12>
 800c388:	f7ff ff4c 	bl	800c224 <__sinit>
 800c38c:	69a3      	ldr	r3, [r4, #24]
 800c38e:	60a3      	str	r3, [r4, #8]
 800c390:	89a3      	ldrh	r3, [r4, #12]
 800c392:	071a      	lsls	r2, r3, #28
 800c394:	d525      	bpl.n	800c3e2 <__swbuf_r+0x68>
 800c396:	6923      	ldr	r3, [r4, #16]
 800c398:	b31b      	cbz	r3, 800c3e2 <__swbuf_r+0x68>
 800c39a:	6823      	ldr	r3, [r4, #0]
 800c39c:	6922      	ldr	r2, [r4, #16]
 800c39e:	1a98      	subs	r0, r3, r2
 800c3a0:	6963      	ldr	r3, [r4, #20]
 800c3a2:	b2f6      	uxtb	r6, r6
 800c3a4:	4283      	cmp	r3, r0
 800c3a6:	4637      	mov	r7, r6
 800c3a8:	dc04      	bgt.n	800c3b4 <__swbuf_r+0x3a>
 800c3aa:	4621      	mov	r1, r4
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f001 ff4f 	bl	800e250 <_fflush_r>
 800c3b2:	b9e0      	cbnz	r0, 800c3ee <__swbuf_r+0x74>
 800c3b4:	68a3      	ldr	r3, [r4, #8]
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	60a3      	str	r3, [r4, #8]
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	1c5a      	adds	r2, r3, #1
 800c3be:	6022      	str	r2, [r4, #0]
 800c3c0:	701e      	strb	r6, [r3, #0]
 800c3c2:	6962      	ldr	r2, [r4, #20]
 800c3c4:	1c43      	adds	r3, r0, #1
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d004      	beq.n	800c3d4 <__swbuf_r+0x5a>
 800c3ca:	89a3      	ldrh	r3, [r4, #12]
 800c3cc:	07db      	lsls	r3, r3, #31
 800c3ce:	d506      	bpl.n	800c3de <__swbuf_r+0x64>
 800c3d0:	2e0a      	cmp	r6, #10
 800c3d2:	d104      	bne.n	800c3de <__swbuf_r+0x64>
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f001 ff3a 	bl	800e250 <_fflush_r>
 800c3dc:	b938      	cbnz	r0, 800c3ee <__swbuf_r+0x74>
 800c3de:	4638      	mov	r0, r7
 800c3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f000 f805 	bl	800c3f4 <__swsetup_r>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d0d5      	beq.n	800c39a <__swbuf_r+0x20>
 800c3ee:	f04f 37ff 	mov.w	r7, #4294967295
 800c3f2:	e7f4      	b.n	800c3de <__swbuf_r+0x64>

0800c3f4 <__swsetup_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	4b2a      	ldr	r3, [pc, #168]	; (800c4a0 <__swsetup_r+0xac>)
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	6818      	ldr	r0, [r3, #0]
 800c3fc:	460c      	mov	r4, r1
 800c3fe:	b118      	cbz	r0, 800c408 <__swsetup_r+0x14>
 800c400:	6a03      	ldr	r3, [r0, #32]
 800c402:	b90b      	cbnz	r3, 800c408 <__swsetup_r+0x14>
 800c404:	f7ff ff0e 	bl	800c224 <__sinit>
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c40e:	0718      	lsls	r0, r3, #28
 800c410:	d422      	bmi.n	800c458 <__swsetup_r+0x64>
 800c412:	06d9      	lsls	r1, r3, #27
 800c414:	d407      	bmi.n	800c426 <__swsetup_r+0x32>
 800c416:	2309      	movs	r3, #9
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c41e:	81a3      	strh	r3, [r4, #12]
 800c420:	f04f 30ff 	mov.w	r0, #4294967295
 800c424:	e034      	b.n	800c490 <__swsetup_r+0x9c>
 800c426:	0758      	lsls	r0, r3, #29
 800c428:	d512      	bpl.n	800c450 <__swsetup_r+0x5c>
 800c42a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c42c:	b141      	cbz	r1, 800c440 <__swsetup_r+0x4c>
 800c42e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c432:	4299      	cmp	r1, r3
 800c434:	d002      	beq.n	800c43c <__swsetup_r+0x48>
 800c436:	4628      	mov	r0, r5
 800c438:	f001 f818 	bl	800d46c <_free_r>
 800c43c:	2300      	movs	r3, #0
 800c43e:	6363      	str	r3, [r4, #52]	; 0x34
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c446:	81a3      	strh	r3, [r4, #12]
 800c448:	2300      	movs	r3, #0
 800c44a:	6063      	str	r3, [r4, #4]
 800c44c:	6923      	ldr	r3, [r4, #16]
 800c44e:	6023      	str	r3, [r4, #0]
 800c450:	89a3      	ldrh	r3, [r4, #12]
 800c452:	f043 0308 	orr.w	r3, r3, #8
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	6923      	ldr	r3, [r4, #16]
 800c45a:	b94b      	cbnz	r3, 800c470 <__swsetup_r+0x7c>
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c466:	d003      	beq.n	800c470 <__swsetup_r+0x7c>
 800c468:	4621      	mov	r1, r4
 800c46a:	4628      	mov	r0, r5
 800c46c:	f001 ff3e 	bl	800e2ec <__smakebuf_r>
 800c470:	89a0      	ldrh	r0, [r4, #12]
 800c472:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c476:	f010 0301 	ands.w	r3, r0, #1
 800c47a:	d00a      	beq.n	800c492 <__swsetup_r+0x9e>
 800c47c:	2300      	movs	r3, #0
 800c47e:	60a3      	str	r3, [r4, #8]
 800c480:	6963      	ldr	r3, [r4, #20]
 800c482:	425b      	negs	r3, r3
 800c484:	61a3      	str	r3, [r4, #24]
 800c486:	6923      	ldr	r3, [r4, #16]
 800c488:	b943      	cbnz	r3, 800c49c <__swsetup_r+0xa8>
 800c48a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c48e:	d1c4      	bne.n	800c41a <__swsetup_r+0x26>
 800c490:	bd38      	pop	{r3, r4, r5, pc}
 800c492:	0781      	lsls	r1, r0, #30
 800c494:	bf58      	it	pl
 800c496:	6963      	ldrpl	r3, [r4, #20]
 800c498:	60a3      	str	r3, [r4, #8]
 800c49a:	e7f4      	b.n	800c486 <__swsetup_r+0x92>
 800c49c:	2000      	movs	r0, #0
 800c49e:	e7f7      	b.n	800c490 <__swsetup_r+0x9c>
 800c4a0:	20000cd8 	.word	0x20000cd8

0800c4a4 <memmove>:
 800c4a4:	4288      	cmp	r0, r1
 800c4a6:	b510      	push	{r4, lr}
 800c4a8:	eb01 0402 	add.w	r4, r1, r2
 800c4ac:	d902      	bls.n	800c4b4 <memmove+0x10>
 800c4ae:	4284      	cmp	r4, r0
 800c4b0:	4623      	mov	r3, r4
 800c4b2:	d807      	bhi.n	800c4c4 <memmove+0x20>
 800c4b4:	1e43      	subs	r3, r0, #1
 800c4b6:	42a1      	cmp	r1, r4
 800c4b8:	d008      	beq.n	800c4cc <memmove+0x28>
 800c4ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4c2:	e7f8      	b.n	800c4b6 <memmove+0x12>
 800c4c4:	4402      	add	r2, r0
 800c4c6:	4601      	mov	r1, r0
 800c4c8:	428a      	cmp	r2, r1
 800c4ca:	d100      	bne.n	800c4ce <memmove+0x2a>
 800c4cc:	bd10      	pop	{r4, pc}
 800c4ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4d6:	e7f7      	b.n	800c4c8 <memmove+0x24>

0800c4d8 <memset>:
 800c4d8:	4402      	add	r2, r0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d100      	bne.n	800c4e2 <memset+0xa>
 800c4e0:	4770      	bx	lr
 800c4e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4e6:	e7f9      	b.n	800c4dc <memset+0x4>

0800c4e8 <strncmp>:
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	b16a      	cbz	r2, 800c508 <strncmp+0x20>
 800c4ec:	3901      	subs	r1, #1
 800c4ee:	1884      	adds	r4, r0, r2
 800c4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d103      	bne.n	800c504 <strncmp+0x1c>
 800c4fc:	42a0      	cmp	r0, r4
 800c4fe:	d001      	beq.n	800c504 <strncmp+0x1c>
 800c500:	2a00      	cmp	r2, #0
 800c502:	d1f5      	bne.n	800c4f0 <strncmp+0x8>
 800c504:	1ad0      	subs	r0, r2, r3
 800c506:	bd10      	pop	{r4, pc}
 800c508:	4610      	mov	r0, r2
 800c50a:	e7fc      	b.n	800c506 <strncmp+0x1e>

0800c50c <_raise_r>:
 800c50c:	291f      	cmp	r1, #31
 800c50e:	b538      	push	{r3, r4, r5, lr}
 800c510:	4604      	mov	r4, r0
 800c512:	460d      	mov	r5, r1
 800c514:	d904      	bls.n	800c520 <_raise_r+0x14>
 800c516:	2316      	movs	r3, #22
 800c518:	6003      	str	r3, [r0, #0]
 800c51a:	f04f 30ff 	mov.w	r0, #4294967295
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c522:	b112      	cbz	r2, 800c52a <_raise_r+0x1e>
 800c524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c528:	b94b      	cbnz	r3, 800c53e <_raise_r+0x32>
 800c52a:	4620      	mov	r0, r4
 800c52c:	f000 f868 	bl	800c600 <_getpid_r>
 800c530:	462a      	mov	r2, r5
 800c532:	4601      	mov	r1, r0
 800c534:	4620      	mov	r0, r4
 800c536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c53a:	f000 b84f 	b.w	800c5dc <_kill_r>
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d00a      	beq.n	800c558 <_raise_r+0x4c>
 800c542:	1c59      	adds	r1, r3, #1
 800c544:	d103      	bne.n	800c54e <_raise_r+0x42>
 800c546:	2316      	movs	r3, #22
 800c548:	6003      	str	r3, [r0, #0]
 800c54a:	2001      	movs	r0, #1
 800c54c:	e7e7      	b.n	800c51e <_raise_r+0x12>
 800c54e:	2400      	movs	r4, #0
 800c550:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c554:	4628      	mov	r0, r5
 800c556:	4798      	blx	r3
 800c558:	2000      	movs	r0, #0
 800c55a:	e7e0      	b.n	800c51e <_raise_r+0x12>

0800c55c <raise>:
 800c55c:	4b02      	ldr	r3, [pc, #8]	; (800c568 <raise+0xc>)
 800c55e:	4601      	mov	r1, r0
 800c560:	6818      	ldr	r0, [r3, #0]
 800c562:	f7ff bfd3 	b.w	800c50c <_raise_r>
 800c566:	bf00      	nop
 800c568:	20000cd8 	.word	0x20000cd8

0800c56c <_localeconv_r>:
 800c56c:	4800      	ldr	r0, [pc, #0]	; (800c570 <_localeconv_r+0x4>)
 800c56e:	4770      	bx	lr
 800c570:	20000dd0 	.word	0x20000dd0

0800c574 <_close_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	4d06      	ldr	r5, [pc, #24]	; (800c590 <_close_r+0x1c>)
 800c578:	2300      	movs	r3, #0
 800c57a:	4604      	mov	r4, r0
 800c57c:	4608      	mov	r0, r1
 800c57e:	602b      	str	r3, [r5, #0]
 800c580:	f7f5 fc21 	bl	8001dc6 <_close>
 800c584:	1c43      	adds	r3, r0, #1
 800c586:	d102      	bne.n	800c58e <_close_r+0x1a>
 800c588:	682b      	ldr	r3, [r5, #0]
 800c58a:	b103      	cbz	r3, 800c58e <_close_r+0x1a>
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	20001974 	.word	0x20001974

0800c594 <_lseek_r>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	4d07      	ldr	r5, [pc, #28]	; (800c5b4 <_lseek_r+0x20>)
 800c598:	4604      	mov	r4, r0
 800c59a:	4608      	mov	r0, r1
 800c59c:	4611      	mov	r1, r2
 800c59e:	2200      	movs	r2, #0
 800c5a0:	602a      	str	r2, [r5, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	f7f5 fc36 	bl	8001e14 <_lseek>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d102      	bne.n	800c5b2 <_lseek_r+0x1e>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	b103      	cbz	r3, 800c5b2 <_lseek_r+0x1e>
 800c5b0:	6023      	str	r3, [r4, #0]
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	20001974 	.word	0x20001974

0800c5b8 <_read_r>:
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	4d07      	ldr	r5, [pc, #28]	; (800c5d8 <_read_r+0x20>)
 800c5bc:	4604      	mov	r4, r0
 800c5be:	4608      	mov	r0, r1
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	602a      	str	r2, [r5, #0]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	f7f5 fbc4 	bl	8001d54 <_read>
 800c5cc:	1c43      	adds	r3, r0, #1
 800c5ce:	d102      	bne.n	800c5d6 <_read_r+0x1e>
 800c5d0:	682b      	ldr	r3, [r5, #0]
 800c5d2:	b103      	cbz	r3, 800c5d6 <_read_r+0x1e>
 800c5d4:	6023      	str	r3, [r4, #0]
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
 800c5d8:	20001974 	.word	0x20001974

0800c5dc <_kill_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4d07      	ldr	r5, [pc, #28]	; (800c5fc <_kill_r+0x20>)
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	4608      	mov	r0, r1
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	602b      	str	r3, [r5, #0]
 800c5ea:	f7f5 fb99 	bl	8001d20 <_kill>
 800c5ee:	1c43      	adds	r3, r0, #1
 800c5f0:	d102      	bne.n	800c5f8 <_kill_r+0x1c>
 800c5f2:	682b      	ldr	r3, [r5, #0]
 800c5f4:	b103      	cbz	r3, 800c5f8 <_kill_r+0x1c>
 800c5f6:	6023      	str	r3, [r4, #0]
 800c5f8:	bd38      	pop	{r3, r4, r5, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20001974 	.word	0x20001974

0800c600 <_getpid_r>:
 800c600:	f7f5 bb86 	b.w	8001d10 <_getpid>

0800c604 <_sbrk_r>:
 800c604:	b538      	push	{r3, r4, r5, lr}
 800c606:	4d06      	ldr	r5, [pc, #24]	; (800c620 <_sbrk_r+0x1c>)
 800c608:	2300      	movs	r3, #0
 800c60a:	4604      	mov	r4, r0
 800c60c:	4608      	mov	r0, r1
 800c60e:	602b      	str	r3, [r5, #0]
 800c610:	f7f5 fc0e 	bl	8001e30 <_sbrk>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d102      	bne.n	800c61e <_sbrk_r+0x1a>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	b103      	cbz	r3, 800c61e <_sbrk_r+0x1a>
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	20001974 	.word	0x20001974

0800c624 <_write_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	4d07      	ldr	r5, [pc, #28]	; (800c644 <_write_r+0x20>)
 800c628:	4604      	mov	r4, r0
 800c62a:	4608      	mov	r0, r1
 800c62c:	4611      	mov	r1, r2
 800c62e:	2200      	movs	r2, #0
 800c630:	602a      	str	r2, [r5, #0]
 800c632:	461a      	mov	r2, r3
 800c634:	f7f5 fbab 	bl	8001d8e <_write>
 800c638:	1c43      	adds	r3, r0, #1
 800c63a:	d102      	bne.n	800c642 <_write_r+0x1e>
 800c63c:	682b      	ldr	r3, [r5, #0]
 800c63e:	b103      	cbz	r3, 800c642 <_write_r+0x1e>
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	bd38      	pop	{r3, r4, r5, pc}
 800c644:	20001974 	.word	0x20001974

0800c648 <__errno>:
 800c648:	4b01      	ldr	r3, [pc, #4]	; (800c650 <__errno+0x8>)
 800c64a:	6818      	ldr	r0, [r3, #0]
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	20000cd8 	.word	0x20000cd8

0800c654 <__libc_init_array>:
 800c654:	b570      	push	{r4, r5, r6, lr}
 800c656:	4d0d      	ldr	r5, [pc, #52]	; (800c68c <__libc_init_array+0x38>)
 800c658:	4c0d      	ldr	r4, [pc, #52]	; (800c690 <__libc_init_array+0x3c>)
 800c65a:	1b64      	subs	r4, r4, r5
 800c65c:	10a4      	asrs	r4, r4, #2
 800c65e:	2600      	movs	r6, #0
 800c660:	42a6      	cmp	r6, r4
 800c662:	d109      	bne.n	800c678 <__libc_init_array+0x24>
 800c664:	4d0b      	ldr	r5, [pc, #44]	; (800c694 <__libc_init_array+0x40>)
 800c666:	4c0c      	ldr	r4, [pc, #48]	; (800c698 <__libc_init_array+0x44>)
 800c668:	f001 fed4 	bl	800e414 <_init>
 800c66c:	1b64      	subs	r4, r4, r5
 800c66e:	10a4      	asrs	r4, r4, #2
 800c670:	2600      	movs	r6, #0
 800c672:	42a6      	cmp	r6, r4
 800c674:	d105      	bne.n	800c682 <__libc_init_array+0x2e>
 800c676:	bd70      	pop	{r4, r5, r6, pc}
 800c678:	f855 3b04 	ldr.w	r3, [r5], #4
 800c67c:	4798      	blx	r3
 800c67e:	3601      	adds	r6, #1
 800c680:	e7ee      	b.n	800c660 <__libc_init_array+0xc>
 800c682:	f855 3b04 	ldr.w	r3, [r5], #4
 800c686:	4798      	blx	r3
 800c688:	3601      	adds	r6, #1
 800c68a:	e7f2      	b.n	800c672 <__libc_init_array+0x1e>
 800c68c:	08012098 	.word	0x08012098
 800c690:	08012098 	.word	0x08012098
 800c694:	08012098 	.word	0x08012098
 800c698:	0801209c 	.word	0x0801209c

0800c69c <__retarget_lock_acquire_recursive>:
 800c69c:	4770      	bx	lr

0800c69e <__retarget_lock_release_recursive>:
 800c69e:	4770      	bx	lr

0800c6a0 <memcpy>:
 800c6a0:	440a      	add	r2, r1
 800c6a2:	4291      	cmp	r1, r2
 800c6a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6a8:	d100      	bne.n	800c6ac <memcpy+0xc>
 800c6aa:	4770      	bx	lr
 800c6ac:	b510      	push	{r4, lr}
 800c6ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6b6:	4291      	cmp	r1, r2
 800c6b8:	d1f9      	bne.n	800c6ae <memcpy+0xe>
 800c6ba:	bd10      	pop	{r4, pc}

0800c6bc <__register_exitproc>:
 800c6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800c774 <__register_exitproc+0xb8>
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	f8d8 0000 	ldr.w	r0, [r8]
 800c6ca:	461f      	mov	r7, r3
 800c6cc:	460d      	mov	r5, r1
 800c6ce:	4691      	mov	r9, r2
 800c6d0:	f7ff ffe4 	bl	800c69c <__retarget_lock_acquire_recursive>
 800c6d4:	4b23      	ldr	r3, [pc, #140]	; (800c764 <__register_exitproc+0xa8>)
 800c6d6:	681c      	ldr	r4, [r3, #0]
 800c6d8:	b934      	cbnz	r4, 800c6e8 <__register_exitproc+0x2c>
 800c6da:	4c23      	ldr	r4, [pc, #140]	; (800c768 <__register_exitproc+0xac>)
 800c6dc:	601c      	str	r4, [r3, #0]
 800c6de:	4b23      	ldr	r3, [pc, #140]	; (800c76c <__register_exitproc+0xb0>)
 800c6e0:	b113      	cbz	r3, 800c6e8 <__register_exitproc+0x2c>
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c6e8:	6863      	ldr	r3, [r4, #4]
 800c6ea:	2b1f      	cmp	r3, #31
 800c6ec:	dd07      	ble.n	800c6fe <__register_exitproc+0x42>
 800c6ee:	f8d8 0000 	ldr.w	r0, [r8]
 800c6f2:	f7ff ffd4 	bl	800c69e <__retarget_lock_release_recursive>
 800c6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6fe:	b32e      	cbz	r6, 800c74c <__register_exitproc+0x90>
 800c700:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c704:	b968      	cbnz	r0, 800c722 <__register_exitproc+0x66>
 800c706:	4b1a      	ldr	r3, [pc, #104]	; (800c770 <__register_exitproc+0xb4>)
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d0f0      	beq.n	800c6ee <__register_exitproc+0x32>
 800c70c:	f44f 7084 	mov.w	r0, #264	; 0x108
 800c710:	f7fe ffbc 	bl	800b68c <malloc>
 800c714:	2800      	cmp	r0, #0
 800c716:	d0ea      	beq.n	800c6ee <__register_exitproc+0x32>
 800c718:	2300      	movs	r3, #0
 800c71a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800c71e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800c722:	6863      	ldr	r3, [r4, #4]
 800c724:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800c728:	2201      	movs	r2, #1
 800c72a:	409a      	lsls	r2, r3
 800c72c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800c730:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800c734:	4313      	orrs	r3, r2
 800c736:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800c73a:	2e02      	cmp	r6, #2
 800c73c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800c740:	bf02      	ittt	eq
 800c742:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800c746:	4313      	orreq	r3, r2
 800c748:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800c74c:	6863      	ldr	r3, [r4, #4]
 800c74e:	f8d8 0000 	ldr.w	r0, [r8]
 800c752:	1c5a      	adds	r2, r3, #1
 800c754:	3302      	adds	r3, #2
 800c756:	6062      	str	r2, [r4, #4]
 800c758:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800c75c:	f7ff ff9f 	bl	800c69e <__retarget_lock_release_recursive>
 800c760:	2000      	movs	r0, #0
 800c762:	e7ca      	b.n	800c6fa <__register_exitproc+0x3e>
 800c764:	20001a08 	.word	0x20001a08
 800c768:	2000197c 	.word	0x2000197c
 800c76c:	00000000 	.word	0x00000000
 800c770:	0800b68d 	.word	0x0800b68d
 800c774:	20000cdc 	.word	0x20000cdc

0800c778 <quorem>:
 800c778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	6903      	ldr	r3, [r0, #16]
 800c77e:	690c      	ldr	r4, [r1, #16]
 800c780:	42a3      	cmp	r3, r4
 800c782:	4607      	mov	r7, r0
 800c784:	db7e      	blt.n	800c884 <quorem+0x10c>
 800c786:	3c01      	subs	r4, #1
 800c788:	f101 0814 	add.w	r8, r1, #20
 800c78c:	f100 0514 	add.w	r5, r0, #20
 800c790:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c79a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c7a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c7aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800c7ae:	d331      	bcc.n	800c814 <quorem+0x9c>
 800c7b0:	f04f 0e00 	mov.w	lr, #0
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	46ac      	mov	ip, r5
 800c7b8:	46f2      	mov	sl, lr
 800c7ba:	f850 2b04 	ldr.w	r2, [r0], #4
 800c7be:	b293      	uxth	r3, r2
 800c7c0:	fb06 e303 	mla	r3, r6, r3, lr
 800c7c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c7c8:	0c1a      	lsrs	r2, r3, #16
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	ebaa 0303 	sub.w	r3, sl, r3
 800c7d0:	f8dc a000 	ldr.w	sl, [ip]
 800c7d4:	fa13 f38a 	uxtah	r3, r3, sl
 800c7d8:	fb06 220e 	mla	r2, r6, lr, r2
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	9b00      	ldr	r3, [sp, #0]
 800c7e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c7e4:	b292      	uxth	r2, r2
 800c7e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c7ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c7ee:	f8bd 3000 	ldrh.w	r3, [sp]
 800c7f2:	4581      	cmp	r9, r0
 800c7f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7f8:	f84c 3b04 	str.w	r3, [ip], #4
 800c7fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c800:	d2db      	bcs.n	800c7ba <quorem+0x42>
 800c802:	f855 300b 	ldr.w	r3, [r5, fp]
 800c806:	b92b      	cbnz	r3, 800c814 <quorem+0x9c>
 800c808:	9b01      	ldr	r3, [sp, #4]
 800c80a:	3b04      	subs	r3, #4
 800c80c:	429d      	cmp	r5, r3
 800c80e:	461a      	mov	r2, r3
 800c810:	d32c      	bcc.n	800c86c <quorem+0xf4>
 800c812:	613c      	str	r4, [r7, #16]
 800c814:	4638      	mov	r0, r7
 800c816:	f001 f8f1 	bl	800d9fc <__mcmp>
 800c81a:	2800      	cmp	r0, #0
 800c81c:	db22      	blt.n	800c864 <quorem+0xec>
 800c81e:	3601      	adds	r6, #1
 800c820:	4629      	mov	r1, r5
 800c822:	2000      	movs	r0, #0
 800c824:	f858 2b04 	ldr.w	r2, [r8], #4
 800c828:	f8d1 c000 	ldr.w	ip, [r1]
 800c82c:	b293      	uxth	r3, r2
 800c82e:	1ac3      	subs	r3, r0, r3
 800c830:	0c12      	lsrs	r2, r2, #16
 800c832:	fa13 f38c 	uxtah	r3, r3, ip
 800c836:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c83a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c83e:	b29b      	uxth	r3, r3
 800c840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c844:	45c1      	cmp	r9, r8
 800c846:	f841 3b04 	str.w	r3, [r1], #4
 800c84a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c84e:	d2e9      	bcs.n	800c824 <quorem+0xac>
 800c850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c854:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c858:	b922      	cbnz	r2, 800c864 <quorem+0xec>
 800c85a:	3b04      	subs	r3, #4
 800c85c:	429d      	cmp	r5, r3
 800c85e:	461a      	mov	r2, r3
 800c860:	d30a      	bcc.n	800c878 <quorem+0x100>
 800c862:	613c      	str	r4, [r7, #16]
 800c864:	4630      	mov	r0, r6
 800c866:	b003      	add	sp, #12
 800c868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c86c:	6812      	ldr	r2, [r2, #0]
 800c86e:	3b04      	subs	r3, #4
 800c870:	2a00      	cmp	r2, #0
 800c872:	d1ce      	bne.n	800c812 <quorem+0x9a>
 800c874:	3c01      	subs	r4, #1
 800c876:	e7c9      	b.n	800c80c <quorem+0x94>
 800c878:	6812      	ldr	r2, [r2, #0]
 800c87a:	3b04      	subs	r3, #4
 800c87c:	2a00      	cmp	r2, #0
 800c87e:	d1f0      	bne.n	800c862 <quorem+0xea>
 800c880:	3c01      	subs	r4, #1
 800c882:	e7eb      	b.n	800c85c <quorem+0xe4>
 800c884:	2000      	movs	r0, #0
 800c886:	e7ee      	b.n	800c866 <quorem+0xee>

0800c888 <_dtoa_r>:
 800c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c88c:	ed2d 8b04 	vpush	{d8-d9}
 800c890:	69c5      	ldr	r5, [r0, #28]
 800c892:	b093      	sub	sp, #76	; 0x4c
 800c894:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c898:	ec57 6b10 	vmov	r6, r7, d0
 800c89c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c8a0:	9107      	str	r1, [sp, #28]
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	920a      	str	r2, [sp, #40]	; 0x28
 800c8a6:	930d      	str	r3, [sp, #52]	; 0x34
 800c8a8:	b975      	cbnz	r5, 800c8c8 <_dtoa_r+0x40>
 800c8aa:	2010      	movs	r0, #16
 800c8ac:	f7fe feee 	bl	800b68c <malloc>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	61e0      	str	r0, [r4, #28]
 800c8b4:	b920      	cbnz	r0, 800c8c0 <_dtoa_r+0x38>
 800c8b6:	4bae      	ldr	r3, [pc, #696]	; (800cb70 <_dtoa_r+0x2e8>)
 800c8b8:	21ef      	movs	r1, #239	; 0xef
 800c8ba:	48ae      	ldr	r0, [pc, #696]	; (800cb74 <_dtoa_r+0x2ec>)
 800c8bc:	f7fe fec2 	bl	800b644 <__assert_func>
 800c8c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c8c4:	6005      	str	r5, [r0, #0]
 800c8c6:	60c5      	str	r5, [r0, #12]
 800c8c8:	69e3      	ldr	r3, [r4, #28]
 800c8ca:	6819      	ldr	r1, [r3, #0]
 800c8cc:	b151      	cbz	r1, 800c8e4 <_dtoa_r+0x5c>
 800c8ce:	685a      	ldr	r2, [r3, #4]
 800c8d0:	604a      	str	r2, [r1, #4]
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	4093      	lsls	r3, r2
 800c8d6:	608b      	str	r3, [r1, #8]
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f000 fe53 	bl	800d584 <_Bfree>
 800c8de:	69e3      	ldr	r3, [r4, #28]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	601a      	str	r2, [r3, #0]
 800c8e4:	1e3b      	subs	r3, r7, #0
 800c8e6:	bfbb      	ittet	lt
 800c8e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c8ec:	9303      	strlt	r3, [sp, #12]
 800c8ee:	2300      	movge	r3, #0
 800c8f0:	2201      	movlt	r2, #1
 800c8f2:	bfac      	ite	ge
 800c8f4:	f8c8 3000 	strge.w	r3, [r8]
 800c8f8:	f8c8 2000 	strlt.w	r2, [r8]
 800c8fc:	4b9e      	ldr	r3, [pc, #632]	; (800cb78 <_dtoa_r+0x2f0>)
 800c8fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c902:	ea33 0308 	bics.w	r3, r3, r8
 800c906:	d11b      	bne.n	800c940 <_dtoa_r+0xb8>
 800c908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c90a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c90e:	6013      	str	r3, [r2, #0]
 800c910:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c914:	4333      	orrs	r3, r6
 800c916:	f000 8593 	beq.w	800d440 <_dtoa_r+0xbb8>
 800c91a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c91c:	b963      	cbnz	r3, 800c938 <_dtoa_r+0xb0>
 800c91e:	4b97      	ldr	r3, [pc, #604]	; (800cb7c <_dtoa_r+0x2f4>)
 800c920:	e027      	b.n	800c972 <_dtoa_r+0xea>
 800c922:	4b97      	ldr	r3, [pc, #604]	; (800cb80 <_dtoa_r+0x2f8>)
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	3308      	adds	r3, #8
 800c928:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c92a:	6013      	str	r3, [r2, #0]
 800c92c:	9800      	ldr	r0, [sp, #0]
 800c92e:	b013      	add	sp, #76	; 0x4c
 800c930:	ecbd 8b04 	vpop	{d8-d9}
 800c934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c938:	4b90      	ldr	r3, [pc, #576]	; (800cb7c <_dtoa_r+0x2f4>)
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	3303      	adds	r3, #3
 800c93e:	e7f3      	b.n	800c928 <_dtoa_r+0xa0>
 800c940:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c944:	2200      	movs	r2, #0
 800c946:	ec51 0b17 	vmov	r0, r1, d7
 800c94a:	eeb0 8a47 	vmov.f32	s16, s14
 800c94e:	eef0 8a67 	vmov.f32	s17, s15
 800c952:	2300      	movs	r3, #0
 800c954:	f7f4 f8d8 	bl	8000b08 <__aeabi_dcmpeq>
 800c958:	4681      	mov	r9, r0
 800c95a:	b160      	cbz	r0, 800c976 <_dtoa_r+0xee>
 800c95c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c95e:	2301      	movs	r3, #1
 800c960:	6013      	str	r3, [r2, #0]
 800c962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 8568 	beq.w	800d43a <_dtoa_r+0xbb2>
 800c96a:	4b86      	ldr	r3, [pc, #536]	; (800cb84 <_dtoa_r+0x2fc>)
 800c96c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	3b01      	subs	r3, #1
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	e7da      	b.n	800c92c <_dtoa_r+0xa4>
 800c976:	aa10      	add	r2, sp, #64	; 0x40
 800c978:	a911      	add	r1, sp, #68	; 0x44
 800c97a:	4620      	mov	r0, r4
 800c97c:	eeb0 0a48 	vmov.f32	s0, s16
 800c980:	eef0 0a68 	vmov.f32	s1, s17
 800c984:	f001 f8e0 	bl	800db48 <__d2b>
 800c988:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c98c:	4682      	mov	sl, r0
 800c98e:	2d00      	cmp	r5, #0
 800c990:	d07f      	beq.n	800ca92 <_dtoa_r+0x20a>
 800c992:	ee18 3a90 	vmov	r3, s17
 800c996:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c99a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c99e:	ec51 0b18 	vmov	r0, r1, d8
 800c9a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c9a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c9aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	4b75      	ldr	r3, [pc, #468]	; (800cb88 <_dtoa_r+0x300>)
 800c9b4:	f7f3 fc88 	bl	80002c8 <__aeabi_dsub>
 800c9b8:	a367      	add	r3, pc, #412	; (adr r3, 800cb58 <_dtoa_r+0x2d0>)
 800c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9be:	f7f3 fe3b 	bl	8000638 <__aeabi_dmul>
 800c9c2:	a367      	add	r3, pc, #412	; (adr r3, 800cb60 <_dtoa_r+0x2d8>)
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	f7f3 fc80 	bl	80002cc <__adddf3>
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	460f      	mov	r7, r1
 800c9d2:	f7f3 fdc7 	bl	8000564 <__aeabi_i2d>
 800c9d6:	a364      	add	r3, pc, #400	; (adr r3, 800cb68 <_dtoa_r+0x2e0>)
 800c9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9dc:	f7f3 fe2c 	bl	8000638 <__aeabi_dmul>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	4639      	mov	r1, r7
 800c9e8:	f7f3 fc70 	bl	80002cc <__adddf3>
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	460f      	mov	r7, r1
 800c9f0:	f7f4 f8d2 	bl	8000b98 <__aeabi_d2iz>
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4683      	mov	fp, r0
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	4639      	mov	r1, r7
 800c9fe:	f7f4 f88d 	bl	8000b1c <__aeabi_dcmplt>
 800ca02:	b148      	cbz	r0, 800ca18 <_dtoa_r+0x190>
 800ca04:	4658      	mov	r0, fp
 800ca06:	f7f3 fdad 	bl	8000564 <__aeabi_i2d>
 800ca0a:	4632      	mov	r2, r6
 800ca0c:	463b      	mov	r3, r7
 800ca0e:	f7f4 f87b 	bl	8000b08 <__aeabi_dcmpeq>
 800ca12:	b908      	cbnz	r0, 800ca18 <_dtoa_r+0x190>
 800ca14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca18:	f1bb 0f16 	cmp.w	fp, #22
 800ca1c:	d857      	bhi.n	800cace <_dtoa_r+0x246>
 800ca1e:	4b5b      	ldr	r3, [pc, #364]	; (800cb8c <_dtoa_r+0x304>)
 800ca20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	ec51 0b18 	vmov	r0, r1, d8
 800ca2c:	f7f4 f876 	bl	8000b1c <__aeabi_dcmplt>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d04e      	beq.n	800cad2 <_dtoa_r+0x24a>
 800ca34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca38:	2300      	movs	r3, #0
 800ca3a:	930c      	str	r3, [sp, #48]	; 0x30
 800ca3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca3e:	1b5b      	subs	r3, r3, r5
 800ca40:	1e5a      	subs	r2, r3, #1
 800ca42:	bf45      	ittet	mi
 800ca44:	f1c3 0301 	rsbmi	r3, r3, #1
 800ca48:	9305      	strmi	r3, [sp, #20]
 800ca4a:	2300      	movpl	r3, #0
 800ca4c:	2300      	movmi	r3, #0
 800ca4e:	9206      	str	r2, [sp, #24]
 800ca50:	bf54      	ite	pl
 800ca52:	9305      	strpl	r3, [sp, #20]
 800ca54:	9306      	strmi	r3, [sp, #24]
 800ca56:	f1bb 0f00 	cmp.w	fp, #0
 800ca5a:	db3c      	blt.n	800cad6 <_dtoa_r+0x24e>
 800ca5c:	9b06      	ldr	r3, [sp, #24]
 800ca5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ca62:	445b      	add	r3, fp
 800ca64:	9306      	str	r3, [sp, #24]
 800ca66:	2300      	movs	r3, #0
 800ca68:	9308      	str	r3, [sp, #32]
 800ca6a:	9b07      	ldr	r3, [sp, #28]
 800ca6c:	2b09      	cmp	r3, #9
 800ca6e:	d868      	bhi.n	800cb42 <_dtoa_r+0x2ba>
 800ca70:	2b05      	cmp	r3, #5
 800ca72:	bfc4      	itt	gt
 800ca74:	3b04      	subgt	r3, #4
 800ca76:	9307      	strgt	r3, [sp, #28]
 800ca78:	9b07      	ldr	r3, [sp, #28]
 800ca7a:	f1a3 0302 	sub.w	r3, r3, #2
 800ca7e:	bfcc      	ite	gt
 800ca80:	2500      	movgt	r5, #0
 800ca82:	2501      	movle	r5, #1
 800ca84:	2b03      	cmp	r3, #3
 800ca86:	f200 8085 	bhi.w	800cb94 <_dtoa_r+0x30c>
 800ca8a:	e8df f003 	tbb	[pc, r3]
 800ca8e:	3b2e      	.short	0x3b2e
 800ca90:	5839      	.short	0x5839
 800ca92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ca96:	441d      	add	r5, r3
 800ca98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ca9c:	2b20      	cmp	r3, #32
 800ca9e:	bfc1      	itttt	gt
 800caa0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800caa4:	fa08 f803 	lslgt.w	r8, r8, r3
 800caa8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800caac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cab0:	bfd6      	itet	le
 800cab2:	f1c3 0320 	rsble	r3, r3, #32
 800cab6:	ea48 0003 	orrgt.w	r0, r8, r3
 800caba:	fa06 f003 	lslle.w	r0, r6, r3
 800cabe:	f7f3 fd41 	bl	8000544 <__aeabi_ui2d>
 800cac2:	2201      	movs	r2, #1
 800cac4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cac8:	3d01      	subs	r5, #1
 800caca:	920e      	str	r2, [sp, #56]	; 0x38
 800cacc:	e76f      	b.n	800c9ae <_dtoa_r+0x126>
 800cace:	2301      	movs	r3, #1
 800cad0:	e7b3      	b.n	800ca3a <_dtoa_r+0x1b2>
 800cad2:	900c      	str	r0, [sp, #48]	; 0x30
 800cad4:	e7b2      	b.n	800ca3c <_dtoa_r+0x1b4>
 800cad6:	9b05      	ldr	r3, [sp, #20]
 800cad8:	eba3 030b 	sub.w	r3, r3, fp
 800cadc:	9305      	str	r3, [sp, #20]
 800cade:	f1cb 0300 	rsb	r3, fp, #0
 800cae2:	9308      	str	r3, [sp, #32]
 800cae4:	2300      	movs	r3, #0
 800cae6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cae8:	e7bf      	b.n	800ca6a <_dtoa_r+0x1e2>
 800caea:	2300      	movs	r3, #0
 800caec:	9309      	str	r3, [sp, #36]	; 0x24
 800caee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dc52      	bgt.n	800cb9a <_dtoa_r+0x312>
 800caf4:	2301      	movs	r3, #1
 800caf6:	9301      	str	r3, [sp, #4]
 800caf8:	9304      	str	r3, [sp, #16]
 800cafa:	461a      	mov	r2, r3
 800cafc:	920a      	str	r2, [sp, #40]	; 0x28
 800cafe:	e00b      	b.n	800cb18 <_dtoa_r+0x290>
 800cb00:	2301      	movs	r3, #1
 800cb02:	e7f3      	b.n	800caec <_dtoa_r+0x264>
 800cb04:	2300      	movs	r3, #0
 800cb06:	9309      	str	r3, [sp, #36]	; 0x24
 800cb08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb0a:	445b      	add	r3, fp
 800cb0c:	9301      	str	r3, [sp, #4]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	9304      	str	r3, [sp, #16]
 800cb14:	bfb8      	it	lt
 800cb16:	2301      	movlt	r3, #1
 800cb18:	69e0      	ldr	r0, [r4, #28]
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	2204      	movs	r2, #4
 800cb1e:	f102 0614 	add.w	r6, r2, #20
 800cb22:	429e      	cmp	r6, r3
 800cb24:	d93d      	bls.n	800cba2 <_dtoa_r+0x31a>
 800cb26:	6041      	str	r1, [r0, #4]
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f000 fceb 	bl	800d504 <_Balloc>
 800cb2e:	9000      	str	r0, [sp, #0]
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d139      	bne.n	800cba8 <_dtoa_r+0x320>
 800cb34:	4b16      	ldr	r3, [pc, #88]	; (800cb90 <_dtoa_r+0x308>)
 800cb36:	4602      	mov	r2, r0
 800cb38:	f240 11af 	movw	r1, #431	; 0x1af
 800cb3c:	e6bd      	b.n	800c8ba <_dtoa_r+0x32>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e7e1      	b.n	800cb06 <_dtoa_r+0x27e>
 800cb42:	2501      	movs	r5, #1
 800cb44:	2300      	movs	r3, #0
 800cb46:	9307      	str	r3, [sp, #28]
 800cb48:	9509      	str	r5, [sp, #36]	; 0x24
 800cb4a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	9304      	str	r3, [sp, #16]
 800cb52:	2200      	movs	r2, #0
 800cb54:	2312      	movs	r3, #18
 800cb56:	e7d1      	b.n	800cafc <_dtoa_r+0x274>
 800cb58:	636f4361 	.word	0x636f4361
 800cb5c:	3fd287a7 	.word	0x3fd287a7
 800cb60:	8b60c8b3 	.word	0x8b60c8b3
 800cb64:	3fc68a28 	.word	0x3fc68a28
 800cb68:	509f79fb 	.word	0x509f79fb
 800cb6c:	3fd34413 	.word	0x3fd34413
 800cb70:	08011d99 	.word	0x08011d99
 800cb74:	08011db0 	.word	0x08011db0
 800cb78:	7ff00000 	.word	0x7ff00000
 800cb7c:	08011d95 	.word	0x08011d95
 800cb80:	08011d8c 	.word	0x08011d8c
 800cb84:	08011d69 	.word	0x08011d69
 800cb88:	3ff80000 	.word	0x3ff80000
 800cb8c:	08011ea0 	.word	0x08011ea0
 800cb90:	08011e08 	.word	0x08011e08
 800cb94:	2301      	movs	r3, #1
 800cb96:	9309      	str	r3, [sp, #36]	; 0x24
 800cb98:	e7d7      	b.n	800cb4a <_dtoa_r+0x2c2>
 800cb9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	9304      	str	r3, [sp, #16]
 800cba0:	e7ba      	b.n	800cb18 <_dtoa_r+0x290>
 800cba2:	3101      	adds	r1, #1
 800cba4:	0052      	lsls	r2, r2, #1
 800cba6:	e7ba      	b.n	800cb1e <_dtoa_r+0x296>
 800cba8:	69e3      	ldr	r3, [r4, #28]
 800cbaa:	9a00      	ldr	r2, [sp, #0]
 800cbac:	601a      	str	r2, [r3, #0]
 800cbae:	9b04      	ldr	r3, [sp, #16]
 800cbb0:	2b0e      	cmp	r3, #14
 800cbb2:	f200 80a8 	bhi.w	800cd06 <_dtoa_r+0x47e>
 800cbb6:	2d00      	cmp	r5, #0
 800cbb8:	f000 80a5 	beq.w	800cd06 <_dtoa_r+0x47e>
 800cbbc:	f1bb 0f00 	cmp.w	fp, #0
 800cbc0:	dd38      	ble.n	800cc34 <_dtoa_r+0x3ac>
 800cbc2:	4bc0      	ldr	r3, [pc, #768]	; (800cec4 <_dtoa_r+0x63c>)
 800cbc4:	f00b 020f 	and.w	r2, fp, #15
 800cbc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbcc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cbd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cbd4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cbd8:	d019      	beq.n	800cc0e <_dtoa_r+0x386>
 800cbda:	4bbb      	ldr	r3, [pc, #748]	; (800cec8 <_dtoa_r+0x640>)
 800cbdc:	ec51 0b18 	vmov	r0, r1, d8
 800cbe0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cbe4:	f7f3 fe52 	bl	800088c <__aeabi_ddiv>
 800cbe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbec:	f008 080f 	and.w	r8, r8, #15
 800cbf0:	2503      	movs	r5, #3
 800cbf2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cec8 <_dtoa_r+0x640>
 800cbf6:	f1b8 0f00 	cmp.w	r8, #0
 800cbfa:	d10a      	bne.n	800cc12 <_dtoa_r+0x38a>
 800cbfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc00:	4632      	mov	r2, r6
 800cc02:	463b      	mov	r3, r7
 800cc04:	f7f3 fe42 	bl	800088c <__aeabi_ddiv>
 800cc08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc0c:	e02b      	b.n	800cc66 <_dtoa_r+0x3de>
 800cc0e:	2502      	movs	r5, #2
 800cc10:	e7ef      	b.n	800cbf2 <_dtoa_r+0x36a>
 800cc12:	f018 0f01 	tst.w	r8, #1
 800cc16:	d008      	beq.n	800cc2a <_dtoa_r+0x3a2>
 800cc18:	4630      	mov	r0, r6
 800cc1a:	4639      	mov	r1, r7
 800cc1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cc20:	f7f3 fd0a 	bl	8000638 <__aeabi_dmul>
 800cc24:	3501      	adds	r5, #1
 800cc26:	4606      	mov	r6, r0
 800cc28:	460f      	mov	r7, r1
 800cc2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cc2e:	f109 0908 	add.w	r9, r9, #8
 800cc32:	e7e0      	b.n	800cbf6 <_dtoa_r+0x36e>
 800cc34:	f000 809f 	beq.w	800cd76 <_dtoa_r+0x4ee>
 800cc38:	f1cb 0600 	rsb	r6, fp, #0
 800cc3c:	4ba1      	ldr	r3, [pc, #644]	; (800cec4 <_dtoa_r+0x63c>)
 800cc3e:	4fa2      	ldr	r7, [pc, #648]	; (800cec8 <_dtoa_r+0x640>)
 800cc40:	f006 020f 	and.w	r2, r6, #15
 800cc44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	ec51 0b18 	vmov	r0, r1, d8
 800cc50:	f7f3 fcf2 	bl	8000638 <__aeabi_dmul>
 800cc54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc58:	1136      	asrs	r6, r6, #4
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	2502      	movs	r5, #2
 800cc5e:	2e00      	cmp	r6, #0
 800cc60:	d17e      	bne.n	800cd60 <_dtoa_r+0x4d8>
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d1d0      	bne.n	800cc08 <_dtoa_r+0x380>
 800cc66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	f000 8084 	beq.w	800cd7a <_dtoa_r+0x4f2>
 800cc72:	4b96      	ldr	r3, [pc, #600]	; (800cecc <_dtoa_r+0x644>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	4640      	mov	r0, r8
 800cc78:	4649      	mov	r1, r9
 800cc7a:	f7f3 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d07b      	beq.n	800cd7a <_dtoa_r+0x4f2>
 800cc82:	9b04      	ldr	r3, [sp, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d078      	beq.n	800cd7a <_dtoa_r+0x4f2>
 800cc88:	9b01      	ldr	r3, [sp, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dd39      	ble.n	800cd02 <_dtoa_r+0x47a>
 800cc8e:	4b90      	ldr	r3, [pc, #576]	; (800ced0 <_dtoa_r+0x648>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	4640      	mov	r0, r8
 800cc94:	4649      	mov	r1, r9
 800cc96:	f7f3 fccf 	bl	8000638 <__aeabi_dmul>
 800cc9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc9e:	9e01      	ldr	r6, [sp, #4]
 800cca0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cca4:	3501      	adds	r5, #1
 800cca6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ccaa:	4628      	mov	r0, r5
 800ccac:	f7f3 fc5a 	bl	8000564 <__aeabi_i2d>
 800ccb0:	4642      	mov	r2, r8
 800ccb2:	464b      	mov	r3, r9
 800ccb4:	f7f3 fcc0 	bl	8000638 <__aeabi_dmul>
 800ccb8:	4b86      	ldr	r3, [pc, #536]	; (800ced4 <_dtoa_r+0x64c>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f7f3 fb06 	bl	80002cc <__adddf3>
 800ccc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ccc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccc8:	9303      	str	r3, [sp, #12]
 800ccca:	2e00      	cmp	r6, #0
 800cccc:	d158      	bne.n	800cd80 <_dtoa_r+0x4f8>
 800ccce:	4b82      	ldr	r3, [pc, #520]	; (800ced8 <_dtoa_r+0x650>)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	4640      	mov	r0, r8
 800ccd4:	4649      	mov	r1, r9
 800ccd6:	f7f3 faf7 	bl	80002c8 <__aeabi_dsub>
 800ccda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccde:	4680      	mov	r8, r0
 800cce0:	4689      	mov	r9, r1
 800cce2:	f7f3 ff39 	bl	8000b58 <__aeabi_dcmpgt>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	f040 8296 	bne.w	800d218 <_dtoa_r+0x990>
 800ccec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ccf0:	4640      	mov	r0, r8
 800ccf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccf6:	4649      	mov	r1, r9
 800ccf8:	f7f3 ff10 	bl	8000b1c <__aeabi_dcmplt>
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	f040 8289 	bne.w	800d214 <_dtoa_r+0x98c>
 800cd02:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cd06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f2c0 814e 	blt.w	800cfaa <_dtoa_r+0x722>
 800cd0e:	f1bb 0f0e 	cmp.w	fp, #14
 800cd12:	f300 814a 	bgt.w	800cfaa <_dtoa_r+0x722>
 800cd16:	4b6b      	ldr	r3, [pc, #428]	; (800cec4 <_dtoa_r+0x63c>)
 800cd18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f280 80dc 	bge.w	800cee0 <_dtoa_r+0x658>
 800cd28:	9b04      	ldr	r3, [sp, #16]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f300 80d8 	bgt.w	800cee0 <_dtoa_r+0x658>
 800cd30:	f040 826f 	bne.w	800d212 <_dtoa_r+0x98a>
 800cd34:	4b68      	ldr	r3, [pc, #416]	; (800ced8 <_dtoa_r+0x650>)
 800cd36:	2200      	movs	r2, #0
 800cd38:	4640      	mov	r0, r8
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	f7f3 fc7c 	bl	8000638 <__aeabi_dmul>
 800cd40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd44:	f7f3 fefe 	bl	8000b44 <__aeabi_dcmpge>
 800cd48:	9e04      	ldr	r6, [sp, #16]
 800cd4a:	4637      	mov	r7, r6
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	f040 8245 	bne.w	800d1dc <_dtoa_r+0x954>
 800cd52:	9d00      	ldr	r5, [sp, #0]
 800cd54:	2331      	movs	r3, #49	; 0x31
 800cd56:	f805 3b01 	strb.w	r3, [r5], #1
 800cd5a:	f10b 0b01 	add.w	fp, fp, #1
 800cd5e:	e241      	b.n	800d1e4 <_dtoa_r+0x95c>
 800cd60:	07f2      	lsls	r2, r6, #31
 800cd62:	d505      	bpl.n	800cd70 <_dtoa_r+0x4e8>
 800cd64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd68:	f7f3 fc66 	bl	8000638 <__aeabi_dmul>
 800cd6c:	3501      	adds	r5, #1
 800cd6e:	2301      	movs	r3, #1
 800cd70:	1076      	asrs	r6, r6, #1
 800cd72:	3708      	adds	r7, #8
 800cd74:	e773      	b.n	800cc5e <_dtoa_r+0x3d6>
 800cd76:	2502      	movs	r5, #2
 800cd78:	e775      	b.n	800cc66 <_dtoa_r+0x3de>
 800cd7a:	9e04      	ldr	r6, [sp, #16]
 800cd7c:	465f      	mov	r7, fp
 800cd7e:	e792      	b.n	800cca6 <_dtoa_r+0x41e>
 800cd80:	9900      	ldr	r1, [sp, #0]
 800cd82:	4b50      	ldr	r3, [pc, #320]	; (800cec4 <_dtoa_r+0x63c>)
 800cd84:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd88:	4431      	add	r1, r6
 800cd8a:	9102      	str	r1, [sp, #8]
 800cd8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd8e:	eeb0 9a47 	vmov.f32	s18, s14
 800cd92:	eef0 9a67 	vmov.f32	s19, s15
 800cd96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cd9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd9e:	2900      	cmp	r1, #0
 800cda0:	d044      	beq.n	800ce2c <_dtoa_r+0x5a4>
 800cda2:	494e      	ldr	r1, [pc, #312]	; (800cedc <_dtoa_r+0x654>)
 800cda4:	2000      	movs	r0, #0
 800cda6:	f7f3 fd71 	bl	800088c <__aeabi_ddiv>
 800cdaa:	ec53 2b19 	vmov	r2, r3, d9
 800cdae:	f7f3 fa8b 	bl	80002c8 <__aeabi_dsub>
 800cdb2:	9d00      	ldr	r5, [sp, #0]
 800cdb4:	ec41 0b19 	vmov	d9, r0, r1
 800cdb8:	4649      	mov	r1, r9
 800cdba:	4640      	mov	r0, r8
 800cdbc:	f7f3 feec 	bl	8000b98 <__aeabi_d2iz>
 800cdc0:	4606      	mov	r6, r0
 800cdc2:	f7f3 fbcf 	bl	8000564 <__aeabi_i2d>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	4640      	mov	r0, r8
 800cdcc:	4649      	mov	r1, r9
 800cdce:	f7f3 fa7b 	bl	80002c8 <__aeabi_dsub>
 800cdd2:	3630      	adds	r6, #48	; 0x30
 800cdd4:	f805 6b01 	strb.w	r6, [r5], #1
 800cdd8:	ec53 2b19 	vmov	r2, r3, d9
 800cddc:	4680      	mov	r8, r0
 800cdde:	4689      	mov	r9, r1
 800cde0:	f7f3 fe9c 	bl	8000b1c <__aeabi_dcmplt>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	d164      	bne.n	800ceb2 <_dtoa_r+0x62a>
 800cde8:	4642      	mov	r2, r8
 800cdea:	464b      	mov	r3, r9
 800cdec:	4937      	ldr	r1, [pc, #220]	; (800cecc <_dtoa_r+0x644>)
 800cdee:	2000      	movs	r0, #0
 800cdf0:	f7f3 fa6a 	bl	80002c8 <__aeabi_dsub>
 800cdf4:	ec53 2b19 	vmov	r2, r3, d9
 800cdf8:	f7f3 fe90 	bl	8000b1c <__aeabi_dcmplt>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	f040 80b6 	bne.w	800cf6e <_dtoa_r+0x6e6>
 800ce02:	9b02      	ldr	r3, [sp, #8]
 800ce04:	429d      	cmp	r5, r3
 800ce06:	f43f af7c 	beq.w	800cd02 <_dtoa_r+0x47a>
 800ce0a:	4b31      	ldr	r3, [pc, #196]	; (800ced0 <_dtoa_r+0x648>)
 800ce0c:	ec51 0b19 	vmov	r0, r1, d9
 800ce10:	2200      	movs	r2, #0
 800ce12:	f7f3 fc11 	bl	8000638 <__aeabi_dmul>
 800ce16:	4b2e      	ldr	r3, [pc, #184]	; (800ced0 <_dtoa_r+0x648>)
 800ce18:	ec41 0b19 	vmov	d9, r0, r1
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	4640      	mov	r0, r8
 800ce20:	4649      	mov	r1, r9
 800ce22:	f7f3 fc09 	bl	8000638 <__aeabi_dmul>
 800ce26:	4680      	mov	r8, r0
 800ce28:	4689      	mov	r9, r1
 800ce2a:	e7c5      	b.n	800cdb8 <_dtoa_r+0x530>
 800ce2c:	ec51 0b17 	vmov	r0, r1, d7
 800ce30:	f7f3 fc02 	bl	8000638 <__aeabi_dmul>
 800ce34:	9b02      	ldr	r3, [sp, #8]
 800ce36:	9d00      	ldr	r5, [sp, #0]
 800ce38:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce3a:	ec41 0b19 	vmov	d9, r0, r1
 800ce3e:	4649      	mov	r1, r9
 800ce40:	4640      	mov	r0, r8
 800ce42:	f7f3 fea9 	bl	8000b98 <__aeabi_d2iz>
 800ce46:	4606      	mov	r6, r0
 800ce48:	f7f3 fb8c 	bl	8000564 <__aeabi_i2d>
 800ce4c:	3630      	adds	r6, #48	; 0x30
 800ce4e:	4602      	mov	r2, r0
 800ce50:	460b      	mov	r3, r1
 800ce52:	4640      	mov	r0, r8
 800ce54:	4649      	mov	r1, r9
 800ce56:	f7f3 fa37 	bl	80002c8 <__aeabi_dsub>
 800ce5a:	f805 6b01 	strb.w	r6, [r5], #1
 800ce5e:	9b02      	ldr	r3, [sp, #8]
 800ce60:	429d      	cmp	r5, r3
 800ce62:	4680      	mov	r8, r0
 800ce64:	4689      	mov	r9, r1
 800ce66:	f04f 0200 	mov.w	r2, #0
 800ce6a:	d124      	bne.n	800ceb6 <_dtoa_r+0x62e>
 800ce6c:	4b1b      	ldr	r3, [pc, #108]	; (800cedc <_dtoa_r+0x654>)
 800ce6e:	ec51 0b19 	vmov	r0, r1, d9
 800ce72:	f7f3 fa2b 	bl	80002cc <__adddf3>
 800ce76:	4602      	mov	r2, r0
 800ce78:	460b      	mov	r3, r1
 800ce7a:	4640      	mov	r0, r8
 800ce7c:	4649      	mov	r1, r9
 800ce7e:	f7f3 fe6b 	bl	8000b58 <__aeabi_dcmpgt>
 800ce82:	2800      	cmp	r0, #0
 800ce84:	d173      	bne.n	800cf6e <_dtoa_r+0x6e6>
 800ce86:	ec53 2b19 	vmov	r2, r3, d9
 800ce8a:	4914      	ldr	r1, [pc, #80]	; (800cedc <_dtoa_r+0x654>)
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	f7f3 fa1b 	bl	80002c8 <__aeabi_dsub>
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	4640      	mov	r0, r8
 800ce98:	4649      	mov	r1, r9
 800ce9a:	f7f3 fe3f 	bl	8000b1c <__aeabi_dcmplt>
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	f43f af2f 	beq.w	800cd02 <_dtoa_r+0x47a>
 800cea4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cea6:	1e6b      	subs	r3, r5, #1
 800cea8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ceaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ceae:	2b30      	cmp	r3, #48	; 0x30
 800ceb0:	d0f8      	beq.n	800cea4 <_dtoa_r+0x61c>
 800ceb2:	46bb      	mov	fp, r7
 800ceb4:	e04a      	b.n	800cf4c <_dtoa_r+0x6c4>
 800ceb6:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <_dtoa_r+0x648>)
 800ceb8:	f7f3 fbbe 	bl	8000638 <__aeabi_dmul>
 800cebc:	4680      	mov	r8, r0
 800cebe:	4689      	mov	r9, r1
 800cec0:	e7bd      	b.n	800ce3e <_dtoa_r+0x5b6>
 800cec2:	bf00      	nop
 800cec4:	08011ea0 	.word	0x08011ea0
 800cec8:	08011e78 	.word	0x08011e78
 800cecc:	3ff00000 	.word	0x3ff00000
 800ced0:	40240000 	.word	0x40240000
 800ced4:	401c0000 	.word	0x401c0000
 800ced8:	40140000 	.word	0x40140000
 800cedc:	3fe00000 	.word	0x3fe00000
 800cee0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cee4:	9d00      	ldr	r5, [sp, #0]
 800cee6:	4642      	mov	r2, r8
 800cee8:	464b      	mov	r3, r9
 800ceea:	4630      	mov	r0, r6
 800ceec:	4639      	mov	r1, r7
 800ceee:	f7f3 fccd 	bl	800088c <__aeabi_ddiv>
 800cef2:	f7f3 fe51 	bl	8000b98 <__aeabi_d2iz>
 800cef6:	9001      	str	r0, [sp, #4]
 800cef8:	f7f3 fb34 	bl	8000564 <__aeabi_i2d>
 800cefc:	4642      	mov	r2, r8
 800cefe:	464b      	mov	r3, r9
 800cf00:	f7f3 fb9a 	bl	8000638 <__aeabi_dmul>
 800cf04:	4602      	mov	r2, r0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4630      	mov	r0, r6
 800cf0a:	4639      	mov	r1, r7
 800cf0c:	f7f3 f9dc 	bl	80002c8 <__aeabi_dsub>
 800cf10:	9e01      	ldr	r6, [sp, #4]
 800cf12:	9f04      	ldr	r7, [sp, #16]
 800cf14:	3630      	adds	r6, #48	; 0x30
 800cf16:	f805 6b01 	strb.w	r6, [r5], #1
 800cf1a:	9e00      	ldr	r6, [sp, #0]
 800cf1c:	1bae      	subs	r6, r5, r6
 800cf1e:	42b7      	cmp	r7, r6
 800cf20:	4602      	mov	r2, r0
 800cf22:	460b      	mov	r3, r1
 800cf24:	d134      	bne.n	800cf90 <_dtoa_r+0x708>
 800cf26:	f7f3 f9d1 	bl	80002cc <__adddf3>
 800cf2a:	4642      	mov	r2, r8
 800cf2c:	464b      	mov	r3, r9
 800cf2e:	4606      	mov	r6, r0
 800cf30:	460f      	mov	r7, r1
 800cf32:	f7f3 fe11 	bl	8000b58 <__aeabi_dcmpgt>
 800cf36:	b9c8      	cbnz	r0, 800cf6c <_dtoa_r+0x6e4>
 800cf38:	4642      	mov	r2, r8
 800cf3a:	464b      	mov	r3, r9
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	4639      	mov	r1, r7
 800cf40:	f7f3 fde2 	bl	8000b08 <__aeabi_dcmpeq>
 800cf44:	b110      	cbz	r0, 800cf4c <_dtoa_r+0x6c4>
 800cf46:	9b01      	ldr	r3, [sp, #4]
 800cf48:	07db      	lsls	r3, r3, #31
 800cf4a:	d40f      	bmi.n	800cf6c <_dtoa_r+0x6e4>
 800cf4c:	4651      	mov	r1, sl
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f000 fb18 	bl	800d584 <_Bfree>
 800cf54:	2300      	movs	r3, #0
 800cf56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf58:	702b      	strb	r3, [r5, #0]
 800cf5a:	f10b 0301 	add.w	r3, fp, #1
 800cf5e:	6013      	str	r3, [r2, #0]
 800cf60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f43f ace2 	beq.w	800c92c <_dtoa_r+0xa4>
 800cf68:	601d      	str	r5, [r3, #0]
 800cf6a:	e4df      	b.n	800c92c <_dtoa_r+0xa4>
 800cf6c:	465f      	mov	r7, fp
 800cf6e:	462b      	mov	r3, r5
 800cf70:	461d      	mov	r5, r3
 800cf72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf76:	2a39      	cmp	r2, #57	; 0x39
 800cf78:	d106      	bne.n	800cf88 <_dtoa_r+0x700>
 800cf7a:	9a00      	ldr	r2, [sp, #0]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d1f7      	bne.n	800cf70 <_dtoa_r+0x6e8>
 800cf80:	9900      	ldr	r1, [sp, #0]
 800cf82:	2230      	movs	r2, #48	; 0x30
 800cf84:	3701      	adds	r7, #1
 800cf86:	700a      	strb	r2, [r1, #0]
 800cf88:	781a      	ldrb	r2, [r3, #0]
 800cf8a:	3201      	adds	r2, #1
 800cf8c:	701a      	strb	r2, [r3, #0]
 800cf8e:	e790      	b.n	800ceb2 <_dtoa_r+0x62a>
 800cf90:	4ba3      	ldr	r3, [pc, #652]	; (800d220 <_dtoa_r+0x998>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	f7f3 fb50 	bl	8000638 <__aeabi_dmul>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	460f      	mov	r7, r1
 800cfa0:	f7f3 fdb2 	bl	8000b08 <__aeabi_dcmpeq>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d09e      	beq.n	800cee6 <_dtoa_r+0x65e>
 800cfa8:	e7d0      	b.n	800cf4c <_dtoa_r+0x6c4>
 800cfaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfac:	2a00      	cmp	r2, #0
 800cfae:	f000 80ca 	beq.w	800d146 <_dtoa_r+0x8be>
 800cfb2:	9a07      	ldr	r2, [sp, #28]
 800cfb4:	2a01      	cmp	r2, #1
 800cfb6:	f300 80ad 	bgt.w	800d114 <_dtoa_r+0x88c>
 800cfba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfbc:	2a00      	cmp	r2, #0
 800cfbe:	f000 80a5 	beq.w	800d10c <_dtoa_r+0x884>
 800cfc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cfc6:	9e08      	ldr	r6, [sp, #32]
 800cfc8:	9d05      	ldr	r5, [sp, #20]
 800cfca:	9a05      	ldr	r2, [sp, #20]
 800cfcc:	441a      	add	r2, r3
 800cfce:	9205      	str	r2, [sp, #20]
 800cfd0:	9a06      	ldr	r2, [sp, #24]
 800cfd2:	2101      	movs	r1, #1
 800cfd4:	441a      	add	r2, r3
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	9206      	str	r2, [sp, #24]
 800cfda:	f000 fb89 	bl	800d6f0 <__i2b>
 800cfde:	4607      	mov	r7, r0
 800cfe0:	b165      	cbz	r5, 800cffc <_dtoa_r+0x774>
 800cfe2:	9b06      	ldr	r3, [sp, #24]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dd09      	ble.n	800cffc <_dtoa_r+0x774>
 800cfe8:	42ab      	cmp	r3, r5
 800cfea:	9a05      	ldr	r2, [sp, #20]
 800cfec:	bfa8      	it	ge
 800cfee:	462b      	movge	r3, r5
 800cff0:	1ad2      	subs	r2, r2, r3
 800cff2:	9205      	str	r2, [sp, #20]
 800cff4:	9a06      	ldr	r2, [sp, #24]
 800cff6:	1aed      	subs	r5, r5, r3
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	9306      	str	r3, [sp, #24]
 800cffc:	9b08      	ldr	r3, [sp, #32]
 800cffe:	b1f3      	cbz	r3, 800d03e <_dtoa_r+0x7b6>
 800d000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 80a3 	beq.w	800d14e <_dtoa_r+0x8c6>
 800d008:	2e00      	cmp	r6, #0
 800d00a:	dd10      	ble.n	800d02e <_dtoa_r+0x7a6>
 800d00c:	4639      	mov	r1, r7
 800d00e:	4632      	mov	r2, r6
 800d010:	4620      	mov	r0, r4
 800d012:	f000 fc2d 	bl	800d870 <__pow5mult>
 800d016:	4652      	mov	r2, sl
 800d018:	4601      	mov	r1, r0
 800d01a:	4607      	mov	r7, r0
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 fb7d 	bl	800d71c <__multiply>
 800d022:	4651      	mov	r1, sl
 800d024:	4680      	mov	r8, r0
 800d026:	4620      	mov	r0, r4
 800d028:	f000 faac 	bl	800d584 <_Bfree>
 800d02c:	46c2      	mov	sl, r8
 800d02e:	9b08      	ldr	r3, [sp, #32]
 800d030:	1b9a      	subs	r2, r3, r6
 800d032:	d004      	beq.n	800d03e <_dtoa_r+0x7b6>
 800d034:	4651      	mov	r1, sl
 800d036:	4620      	mov	r0, r4
 800d038:	f000 fc1a 	bl	800d870 <__pow5mult>
 800d03c:	4682      	mov	sl, r0
 800d03e:	2101      	movs	r1, #1
 800d040:	4620      	mov	r0, r4
 800d042:	f000 fb55 	bl	800d6f0 <__i2b>
 800d046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d048:	2b00      	cmp	r3, #0
 800d04a:	4606      	mov	r6, r0
 800d04c:	f340 8081 	ble.w	800d152 <_dtoa_r+0x8ca>
 800d050:	461a      	mov	r2, r3
 800d052:	4601      	mov	r1, r0
 800d054:	4620      	mov	r0, r4
 800d056:	f000 fc0b 	bl	800d870 <__pow5mult>
 800d05a:	9b07      	ldr	r3, [sp, #28]
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	4606      	mov	r6, r0
 800d060:	dd7a      	ble.n	800d158 <_dtoa_r+0x8d0>
 800d062:	f04f 0800 	mov.w	r8, #0
 800d066:	6933      	ldr	r3, [r6, #16]
 800d068:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d06c:	6918      	ldr	r0, [r3, #16]
 800d06e:	f000 faf1 	bl	800d654 <__hi0bits>
 800d072:	f1c0 0020 	rsb	r0, r0, #32
 800d076:	9b06      	ldr	r3, [sp, #24]
 800d078:	4418      	add	r0, r3
 800d07a:	f010 001f 	ands.w	r0, r0, #31
 800d07e:	f000 8094 	beq.w	800d1aa <_dtoa_r+0x922>
 800d082:	f1c0 0320 	rsb	r3, r0, #32
 800d086:	2b04      	cmp	r3, #4
 800d088:	f340 8085 	ble.w	800d196 <_dtoa_r+0x90e>
 800d08c:	9b05      	ldr	r3, [sp, #20]
 800d08e:	f1c0 001c 	rsb	r0, r0, #28
 800d092:	4403      	add	r3, r0
 800d094:	9305      	str	r3, [sp, #20]
 800d096:	9b06      	ldr	r3, [sp, #24]
 800d098:	4403      	add	r3, r0
 800d09a:	4405      	add	r5, r0
 800d09c:	9306      	str	r3, [sp, #24]
 800d09e:	9b05      	ldr	r3, [sp, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	dd05      	ble.n	800d0b0 <_dtoa_r+0x828>
 800d0a4:	4651      	mov	r1, sl
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 fc3b 	bl	800d924 <__lshift>
 800d0ae:	4682      	mov	sl, r0
 800d0b0:	9b06      	ldr	r3, [sp, #24]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	dd05      	ble.n	800d0c2 <_dtoa_r+0x83a>
 800d0b6:	4631      	mov	r1, r6
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f000 fc32 	bl	800d924 <__lshift>
 800d0c0:	4606      	mov	r6, r0
 800d0c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d072      	beq.n	800d1ae <_dtoa_r+0x926>
 800d0c8:	4631      	mov	r1, r6
 800d0ca:	4650      	mov	r0, sl
 800d0cc:	f000 fc96 	bl	800d9fc <__mcmp>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	da6c      	bge.n	800d1ae <_dtoa_r+0x926>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	4651      	mov	r1, sl
 800d0d8:	220a      	movs	r2, #10
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f000 fa74 	bl	800d5c8 <__multadd>
 800d0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d0e6:	4682      	mov	sl, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f000 81b0 	beq.w	800d44e <_dtoa_r+0xbc6>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	220a      	movs	r2, #10
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	f000 fa67 	bl	800d5c8 <__multadd>
 800d0fa:	9b01      	ldr	r3, [sp, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	4607      	mov	r7, r0
 800d100:	f300 8096 	bgt.w	800d230 <_dtoa_r+0x9a8>
 800d104:	9b07      	ldr	r3, [sp, #28]
 800d106:	2b02      	cmp	r3, #2
 800d108:	dc59      	bgt.n	800d1be <_dtoa_r+0x936>
 800d10a:	e091      	b.n	800d230 <_dtoa_r+0x9a8>
 800d10c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d10e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d112:	e758      	b.n	800cfc6 <_dtoa_r+0x73e>
 800d114:	9b04      	ldr	r3, [sp, #16]
 800d116:	1e5e      	subs	r6, r3, #1
 800d118:	9b08      	ldr	r3, [sp, #32]
 800d11a:	42b3      	cmp	r3, r6
 800d11c:	bfbf      	itttt	lt
 800d11e:	9b08      	ldrlt	r3, [sp, #32]
 800d120:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d122:	9608      	strlt	r6, [sp, #32]
 800d124:	1af3      	sublt	r3, r6, r3
 800d126:	bfb4      	ite	lt
 800d128:	18d2      	addlt	r2, r2, r3
 800d12a:	1b9e      	subge	r6, r3, r6
 800d12c:	9b04      	ldr	r3, [sp, #16]
 800d12e:	bfbc      	itt	lt
 800d130:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d132:	2600      	movlt	r6, #0
 800d134:	2b00      	cmp	r3, #0
 800d136:	bfb7      	itett	lt
 800d138:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d13c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d140:	1a9d      	sublt	r5, r3, r2
 800d142:	2300      	movlt	r3, #0
 800d144:	e741      	b.n	800cfca <_dtoa_r+0x742>
 800d146:	9e08      	ldr	r6, [sp, #32]
 800d148:	9d05      	ldr	r5, [sp, #20]
 800d14a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d14c:	e748      	b.n	800cfe0 <_dtoa_r+0x758>
 800d14e:	9a08      	ldr	r2, [sp, #32]
 800d150:	e770      	b.n	800d034 <_dtoa_r+0x7ac>
 800d152:	9b07      	ldr	r3, [sp, #28]
 800d154:	2b01      	cmp	r3, #1
 800d156:	dc19      	bgt.n	800d18c <_dtoa_r+0x904>
 800d158:	9b02      	ldr	r3, [sp, #8]
 800d15a:	b9bb      	cbnz	r3, 800d18c <_dtoa_r+0x904>
 800d15c:	9b03      	ldr	r3, [sp, #12]
 800d15e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d162:	b99b      	cbnz	r3, 800d18c <_dtoa_r+0x904>
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d16a:	0d1b      	lsrs	r3, r3, #20
 800d16c:	051b      	lsls	r3, r3, #20
 800d16e:	b183      	cbz	r3, 800d192 <_dtoa_r+0x90a>
 800d170:	9b05      	ldr	r3, [sp, #20]
 800d172:	3301      	adds	r3, #1
 800d174:	9305      	str	r3, [sp, #20]
 800d176:	9b06      	ldr	r3, [sp, #24]
 800d178:	3301      	adds	r3, #1
 800d17a:	9306      	str	r3, [sp, #24]
 800d17c:	f04f 0801 	mov.w	r8, #1
 800d180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d182:	2b00      	cmp	r3, #0
 800d184:	f47f af6f 	bne.w	800d066 <_dtoa_r+0x7de>
 800d188:	2001      	movs	r0, #1
 800d18a:	e774      	b.n	800d076 <_dtoa_r+0x7ee>
 800d18c:	f04f 0800 	mov.w	r8, #0
 800d190:	e7f6      	b.n	800d180 <_dtoa_r+0x8f8>
 800d192:	4698      	mov	r8, r3
 800d194:	e7f4      	b.n	800d180 <_dtoa_r+0x8f8>
 800d196:	d082      	beq.n	800d09e <_dtoa_r+0x816>
 800d198:	9a05      	ldr	r2, [sp, #20]
 800d19a:	331c      	adds	r3, #28
 800d19c:	441a      	add	r2, r3
 800d19e:	9205      	str	r2, [sp, #20]
 800d1a0:	9a06      	ldr	r2, [sp, #24]
 800d1a2:	441a      	add	r2, r3
 800d1a4:	441d      	add	r5, r3
 800d1a6:	9206      	str	r2, [sp, #24]
 800d1a8:	e779      	b.n	800d09e <_dtoa_r+0x816>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	e7f4      	b.n	800d198 <_dtoa_r+0x910>
 800d1ae:	9b04      	ldr	r3, [sp, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	dc37      	bgt.n	800d224 <_dtoa_r+0x99c>
 800d1b4:	9b07      	ldr	r3, [sp, #28]
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	dd34      	ble.n	800d224 <_dtoa_r+0x99c>
 800d1ba:	9b04      	ldr	r3, [sp, #16]
 800d1bc:	9301      	str	r3, [sp, #4]
 800d1be:	9b01      	ldr	r3, [sp, #4]
 800d1c0:	b963      	cbnz	r3, 800d1dc <_dtoa_r+0x954>
 800d1c2:	4631      	mov	r1, r6
 800d1c4:	2205      	movs	r2, #5
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f000 f9fe 	bl	800d5c8 <__multadd>
 800d1cc:	4601      	mov	r1, r0
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	4650      	mov	r0, sl
 800d1d2:	f000 fc13 	bl	800d9fc <__mcmp>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	f73f adbb 	bgt.w	800cd52 <_dtoa_r+0x4ca>
 800d1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1de:	9d00      	ldr	r5, [sp, #0]
 800d1e0:	ea6f 0b03 	mvn.w	fp, r3
 800d1e4:	f04f 0800 	mov.w	r8, #0
 800d1e8:	4631      	mov	r1, r6
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f000 f9ca 	bl	800d584 <_Bfree>
 800d1f0:	2f00      	cmp	r7, #0
 800d1f2:	f43f aeab 	beq.w	800cf4c <_dtoa_r+0x6c4>
 800d1f6:	f1b8 0f00 	cmp.w	r8, #0
 800d1fa:	d005      	beq.n	800d208 <_dtoa_r+0x980>
 800d1fc:	45b8      	cmp	r8, r7
 800d1fe:	d003      	beq.n	800d208 <_dtoa_r+0x980>
 800d200:	4641      	mov	r1, r8
 800d202:	4620      	mov	r0, r4
 800d204:	f000 f9be 	bl	800d584 <_Bfree>
 800d208:	4639      	mov	r1, r7
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 f9ba 	bl	800d584 <_Bfree>
 800d210:	e69c      	b.n	800cf4c <_dtoa_r+0x6c4>
 800d212:	2600      	movs	r6, #0
 800d214:	4637      	mov	r7, r6
 800d216:	e7e1      	b.n	800d1dc <_dtoa_r+0x954>
 800d218:	46bb      	mov	fp, r7
 800d21a:	4637      	mov	r7, r6
 800d21c:	e599      	b.n	800cd52 <_dtoa_r+0x4ca>
 800d21e:	bf00      	nop
 800d220:	40240000 	.word	0x40240000
 800d224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d226:	2b00      	cmp	r3, #0
 800d228:	f000 80c8 	beq.w	800d3bc <_dtoa_r+0xb34>
 800d22c:	9b04      	ldr	r3, [sp, #16]
 800d22e:	9301      	str	r3, [sp, #4]
 800d230:	2d00      	cmp	r5, #0
 800d232:	dd05      	ble.n	800d240 <_dtoa_r+0x9b8>
 800d234:	4639      	mov	r1, r7
 800d236:	462a      	mov	r2, r5
 800d238:	4620      	mov	r0, r4
 800d23a:	f000 fb73 	bl	800d924 <__lshift>
 800d23e:	4607      	mov	r7, r0
 800d240:	f1b8 0f00 	cmp.w	r8, #0
 800d244:	d05b      	beq.n	800d2fe <_dtoa_r+0xa76>
 800d246:	6879      	ldr	r1, [r7, #4]
 800d248:	4620      	mov	r0, r4
 800d24a:	f000 f95b 	bl	800d504 <_Balloc>
 800d24e:	4605      	mov	r5, r0
 800d250:	b928      	cbnz	r0, 800d25e <_dtoa_r+0x9d6>
 800d252:	4b83      	ldr	r3, [pc, #524]	; (800d460 <_dtoa_r+0xbd8>)
 800d254:	4602      	mov	r2, r0
 800d256:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d25a:	f7ff bb2e 	b.w	800c8ba <_dtoa_r+0x32>
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	3202      	adds	r2, #2
 800d262:	0092      	lsls	r2, r2, #2
 800d264:	f107 010c 	add.w	r1, r7, #12
 800d268:	300c      	adds	r0, #12
 800d26a:	f7ff fa19 	bl	800c6a0 <memcpy>
 800d26e:	2201      	movs	r2, #1
 800d270:	4629      	mov	r1, r5
 800d272:	4620      	mov	r0, r4
 800d274:	f000 fb56 	bl	800d924 <__lshift>
 800d278:	9b00      	ldr	r3, [sp, #0]
 800d27a:	3301      	adds	r3, #1
 800d27c:	9304      	str	r3, [sp, #16]
 800d27e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d282:	4413      	add	r3, r2
 800d284:	9308      	str	r3, [sp, #32]
 800d286:	9b02      	ldr	r3, [sp, #8]
 800d288:	f003 0301 	and.w	r3, r3, #1
 800d28c:	46b8      	mov	r8, r7
 800d28e:	9306      	str	r3, [sp, #24]
 800d290:	4607      	mov	r7, r0
 800d292:	9b04      	ldr	r3, [sp, #16]
 800d294:	4631      	mov	r1, r6
 800d296:	3b01      	subs	r3, #1
 800d298:	4650      	mov	r0, sl
 800d29a:	9301      	str	r3, [sp, #4]
 800d29c:	f7ff fa6c 	bl	800c778 <quorem>
 800d2a0:	4641      	mov	r1, r8
 800d2a2:	9002      	str	r0, [sp, #8]
 800d2a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d2a8:	4650      	mov	r0, sl
 800d2aa:	f000 fba7 	bl	800d9fc <__mcmp>
 800d2ae:	463a      	mov	r2, r7
 800d2b0:	9005      	str	r0, [sp, #20]
 800d2b2:	4631      	mov	r1, r6
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f000 fbbd 	bl	800da34 <__mdiff>
 800d2ba:	68c2      	ldr	r2, [r0, #12]
 800d2bc:	4605      	mov	r5, r0
 800d2be:	bb02      	cbnz	r2, 800d302 <_dtoa_r+0xa7a>
 800d2c0:	4601      	mov	r1, r0
 800d2c2:	4650      	mov	r0, sl
 800d2c4:	f000 fb9a 	bl	800d9fc <__mcmp>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	9209      	str	r2, [sp, #36]	; 0x24
 800d2d0:	f000 f958 	bl	800d584 <_Bfree>
 800d2d4:	9b07      	ldr	r3, [sp, #28]
 800d2d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2d8:	9d04      	ldr	r5, [sp, #16]
 800d2da:	ea43 0102 	orr.w	r1, r3, r2
 800d2de:	9b06      	ldr	r3, [sp, #24]
 800d2e0:	4319      	orrs	r1, r3
 800d2e2:	d110      	bne.n	800d306 <_dtoa_r+0xa7e>
 800d2e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d2e8:	d029      	beq.n	800d33e <_dtoa_r+0xab6>
 800d2ea:	9b05      	ldr	r3, [sp, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	dd02      	ble.n	800d2f6 <_dtoa_r+0xa6e>
 800d2f0:	9b02      	ldr	r3, [sp, #8]
 800d2f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d2f6:	9b01      	ldr	r3, [sp, #4]
 800d2f8:	f883 9000 	strb.w	r9, [r3]
 800d2fc:	e774      	b.n	800d1e8 <_dtoa_r+0x960>
 800d2fe:	4638      	mov	r0, r7
 800d300:	e7ba      	b.n	800d278 <_dtoa_r+0x9f0>
 800d302:	2201      	movs	r2, #1
 800d304:	e7e1      	b.n	800d2ca <_dtoa_r+0xa42>
 800d306:	9b05      	ldr	r3, [sp, #20]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	db04      	blt.n	800d316 <_dtoa_r+0xa8e>
 800d30c:	9907      	ldr	r1, [sp, #28]
 800d30e:	430b      	orrs	r3, r1
 800d310:	9906      	ldr	r1, [sp, #24]
 800d312:	430b      	orrs	r3, r1
 800d314:	d120      	bne.n	800d358 <_dtoa_r+0xad0>
 800d316:	2a00      	cmp	r2, #0
 800d318:	dded      	ble.n	800d2f6 <_dtoa_r+0xa6e>
 800d31a:	4651      	mov	r1, sl
 800d31c:	2201      	movs	r2, #1
 800d31e:	4620      	mov	r0, r4
 800d320:	f000 fb00 	bl	800d924 <__lshift>
 800d324:	4631      	mov	r1, r6
 800d326:	4682      	mov	sl, r0
 800d328:	f000 fb68 	bl	800d9fc <__mcmp>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	dc03      	bgt.n	800d338 <_dtoa_r+0xab0>
 800d330:	d1e1      	bne.n	800d2f6 <_dtoa_r+0xa6e>
 800d332:	f019 0f01 	tst.w	r9, #1
 800d336:	d0de      	beq.n	800d2f6 <_dtoa_r+0xa6e>
 800d338:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d33c:	d1d8      	bne.n	800d2f0 <_dtoa_r+0xa68>
 800d33e:	9a01      	ldr	r2, [sp, #4]
 800d340:	2339      	movs	r3, #57	; 0x39
 800d342:	7013      	strb	r3, [r2, #0]
 800d344:	462b      	mov	r3, r5
 800d346:	461d      	mov	r5, r3
 800d348:	3b01      	subs	r3, #1
 800d34a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d34e:	2a39      	cmp	r2, #57	; 0x39
 800d350:	d06c      	beq.n	800d42c <_dtoa_r+0xba4>
 800d352:	3201      	adds	r2, #1
 800d354:	701a      	strb	r2, [r3, #0]
 800d356:	e747      	b.n	800d1e8 <_dtoa_r+0x960>
 800d358:	2a00      	cmp	r2, #0
 800d35a:	dd07      	ble.n	800d36c <_dtoa_r+0xae4>
 800d35c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d360:	d0ed      	beq.n	800d33e <_dtoa_r+0xab6>
 800d362:	9a01      	ldr	r2, [sp, #4]
 800d364:	f109 0301 	add.w	r3, r9, #1
 800d368:	7013      	strb	r3, [r2, #0]
 800d36a:	e73d      	b.n	800d1e8 <_dtoa_r+0x960>
 800d36c:	9b04      	ldr	r3, [sp, #16]
 800d36e:	9a08      	ldr	r2, [sp, #32]
 800d370:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d374:	4293      	cmp	r3, r2
 800d376:	d043      	beq.n	800d400 <_dtoa_r+0xb78>
 800d378:	4651      	mov	r1, sl
 800d37a:	2300      	movs	r3, #0
 800d37c:	220a      	movs	r2, #10
 800d37e:	4620      	mov	r0, r4
 800d380:	f000 f922 	bl	800d5c8 <__multadd>
 800d384:	45b8      	cmp	r8, r7
 800d386:	4682      	mov	sl, r0
 800d388:	f04f 0300 	mov.w	r3, #0
 800d38c:	f04f 020a 	mov.w	r2, #10
 800d390:	4641      	mov	r1, r8
 800d392:	4620      	mov	r0, r4
 800d394:	d107      	bne.n	800d3a6 <_dtoa_r+0xb1e>
 800d396:	f000 f917 	bl	800d5c8 <__multadd>
 800d39a:	4680      	mov	r8, r0
 800d39c:	4607      	mov	r7, r0
 800d39e:	9b04      	ldr	r3, [sp, #16]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	9304      	str	r3, [sp, #16]
 800d3a4:	e775      	b.n	800d292 <_dtoa_r+0xa0a>
 800d3a6:	f000 f90f 	bl	800d5c8 <__multadd>
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	4680      	mov	r8, r0
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	220a      	movs	r2, #10
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f000 f908 	bl	800d5c8 <__multadd>
 800d3b8:	4607      	mov	r7, r0
 800d3ba:	e7f0      	b.n	800d39e <_dtoa_r+0xb16>
 800d3bc:	9b04      	ldr	r3, [sp, #16]
 800d3be:	9301      	str	r3, [sp, #4]
 800d3c0:	9d00      	ldr	r5, [sp, #0]
 800d3c2:	4631      	mov	r1, r6
 800d3c4:	4650      	mov	r0, sl
 800d3c6:	f7ff f9d7 	bl	800c778 <quorem>
 800d3ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d3ce:	9b00      	ldr	r3, [sp, #0]
 800d3d0:	f805 9b01 	strb.w	r9, [r5], #1
 800d3d4:	1aea      	subs	r2, r5, r3
 800d3d6:	9b01      	ldr	r3, [sp, #4]
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	dd07      	ble.n	800d3ec <_dtoa_r+0xb64>
 800d3dc:	4651      	mov	r1, sl
 800d3de:	2300      	movs	r3, #0
 800d3e0:	220a      	movs	r2, #10
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f000 f8f0 	bl	800d5c8 <__multadd>
 800d3e8:	4682      	mov	sl, r0
 800d3ea:	e7ea      	b.n	800d3c2 <_dtoa_r+0xb3a>
 800d3ec:	9b01      	ldr	r3, [sp, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	bfc8      	it	gt
 800d3f2:	461d      	movgt	r5, r3
 800d3f4:	9b00      	ldr	r3, [sp, #0]
 800d3f6:	bfd8      	it	le
 800d3f8:	2501      	movle	r5, #1
 800d3fa:	441d      	add	r5, r3
 800d3fc:	f04f 0800 	mov.w	r8, #0
 800d400:	4651      	mov	r1, sl
 800d402:	2201      	movs	r2, #1
 800d404:	4620      	mov	r0, r4
 800d406:	f000 fa8d 	bl	800d924 <__lshift>
 800d40a:	4631      	mov	r1, r6
 800d40c:	4682      	mov	sl, r0
 800d40e:	f000 faf5 	bl	800d9fc <__mcmp>
 800d412:	2800      	cmp	r0, #0
 800d414:	dc96      	bgt.n	800d344 <_dtoa_r+0xabc>
 800d416:	d102      	bne.n	800d41e <_dtoa_r+0xb96>
 800d418:	f019 0f01 	tst.w	r9, #1
 800d41c:	d192      	bne.n	800d344 <_dtoa_r+0xabc>
 800d41e:	462b      	mov	r3, r5
 800d420:	461d      	mov	r5, r3
 800d422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d426:	2a30      	cmp	r2, #48	; 0x30
 800d428:	d0fa      	beq.n	800d420 <_dtoa_r+0xb98>
 800d42a:	e6dd      	b.n	800d1e8 <_dtoa_r+0x960>
 800d42c:	9a00      	ldr	r2, [sp, #0]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d189      	bne.n	800d346 <_dtoa_r+0xabe>
 800d432:	f10b 0b01 	add.w	fp, fp, #1
 800d436:	2331      	movs	r3, #49	; 0x31
 800d438:	e796      	b.n	800d368 <_dtoa_r+0xae0>
 800d43a:	4b0a      	ldr	r3, [pc, #40]	; (800d464 <_dtoa_r+0xbdc>)
 800d43c:	f7ff ba99 	b.w	800c972 <_dtoa_r+0xea>
 800d440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d442:	2b00      	cmp	r3, #0
 800d444:	f47f aa6d 	bne.w	800c922 <_dtoa_r+0x9a>
 800d448:	4b07      	ldr	r3, [pc, #28]	; (800d468 <_dtoa_r+0xbe0>)
 800d44a:	f7ff ba92 	b.w	800c972 <_dtoa_r+0xea>
 800d44e:	9b01      	ldr	r3, [sp, #4]
 800d450:	2b00      	cmp	r3, #0
 800d452:	dcb5      	bgt.n	800d3c0 <_dtoa_r+0xb38>
 800d454:	9b07      	ldr	r3, [sp, #28]
 800d456:	2b02      	cmp	r3, #2
 800d458:	f73f aeb1 	bgt.w	800d1be <_dtoa_r+0x936>
 800d45c:	e7b0      	b.n	800d3c0 <_dtoa_r+0xb38>
 800d45e:	bf00      	nop
 800d460:	08011e08 	.word	0x08011e08
 800d464:	08011d68 	.word	0x08011d68
 800d468:	08011d8c 	.word	0x08011d8c

0800d46c <_free_r>:
 800d46c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d46e:	2900      	cmp	r1, #0
 800d470:	d044      	beq.n	800d4fc <_free_r+0x90>
 800d472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d476:	9001      	str	r0, [sp, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f1a1 0404 	sub.w	r4, r1, #4
 800d47e:	bfb8      	it	lt
 800d480:	18e4      	addlt	r4, r4, r3
 800d482:	f7fe f9b3 	bl	800b7ec <__malloc_lock>
 800d486:	4a1e      	ldr	r2, [pc, #120]	; (800d500 <_free_r+0x94>)
 800d488:	9801      	ldr	r0, [sp, #4]
 800d48a:	6813      	ldr	r3, [r2, #0]
 800d48c:	b933      	cbnz	r3, 800d49c <_free_r+0x30>
 800d48e:	6063      	str	r3, [r4, #4]
 800d490:	6014      	str	r4, [r2, #0]
 800d492:	b003      	add	sp, #12
 800d494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d498:	f7fe b9ae 	b.w	800b7f8 <__malloc_unlock>
 800d49c:	42a3      	cmp	r3, r4
 800d49e:	d908      	bls.n	800d4b2 <_free_r+0x46>
 800d4a0:	6825      	ldr	r5, [r4, #0]
 800d4a2:	1961      	adds	r1, r4, r5
 800d4a4:	428b      	cmp	r3, r1
 800d4a6:	bf01      	itttt	eq
 800d4a8:	6819      	ldreq	r1, [r3, #0]
 800d4aa:	685b      	ldreq	r3, [r3, #4]
 800d4ac:	1949      	addeq	r1, r1, r5
 800d4ae:	6021      	streq	r1, [r4, #0]
 800d4b0:	e7ed      	b.n	800d48e <_free_r+0x22>
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	b10b      	cbz	r3, 800d4bc <_free_r+0x50>
 800d4b8:	42a3      	cmp	r3, r4
 800d4ba:	d9fa      	bls.n	800d4b2 <_free_r+0x46>
 800d4bc:	6811      	ldr	r1, [r2, #0]
 800d4be:	1855      	adds	r5, r2, r1
 800d4c0:	42a5      	cmp	r5, r4
 800d4c2:	d10b      	bne.n	800d4dc <_free_r+0x70>
 800d4c4:	6824      	ldr	r4, [r4, #0]
 800d4c6:	4421      	add	r1, r4
 800d4c8:	1854      	adds	r4, r2, r1
 800d4ca:	42a3      	cmp	r3, r4
 800d4cc:	6011      	str	r1, [r2, #0]
 800d4ce:	d1e0      	bne.n	800d492 <_free_r+0x26>
 800d4d0:	681c      	ldr	r4, [r3, #0]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	6053      	str	r3, [r2, #4]
 800d4d6:	440c      	add	r4, r1
 800d4d8:	6014      	str	r4, [r2, #0]
 800d4da:	e7da      	b.n	800d492 <_free_r+0x26>
 800d4dc:	d902      	bls.n	800d4e4 <_free_r+0x78>
 800d4de:	230c      	movs	r3, #12
 800d4e0:	6003      	str	r3, [r0, #0]
 800d4e2:	e7d6      	b.n	800d492 <_free_r+0x26>
 800d4e4:	6825      	ldr	r5, [r4, #0]
 800d4e6:	1961      	adds	r1, r4, r5
 800d4e8:	428b      	cmp	r3, r1
 800d4ea:	bf04      	itt	eq
 800d4ec:	6819      	ldreq	r1, [r3, #0]
 800d4ee:	685b      	ldreq	r3, [r3, #4]
 800d4f0:	6063      	str	r3, [r4, #4]
 800d4f2:	bf04      	itt	eq
 800d4f4:	1949      	addeq	r1, r1, r5
 800d4f6:	6021      	streq	r1, [r4, #0]
 800d4f8:	6054      	str	r4, [r2, #4]
 800d4fa:	e7ca      	b.n	800d492 <_free_r+0x26>
 800d4fc:	b003      	add	sp, #12
 800d4fe:	bd30      	pop	{r4, r5, pc}
 800d500:	20001830 	.word	0x20001830

0800d504 <_Balloc>:
 800d504:	b570      	push	{r4, r5, r6, lr}
 800d506:	69c6      	ldr	r6, [r0, #28]
 800d508:	4604      	mov	r4, r0
 800d50a:	460d      	mov	r5, r1
 800d50c:	b976      	cbnz	r6, 800d52c <_Balloc+0x28>
 800d50e:	2010      	movs	r0, #16
 800d510:	f7fe f8bc 	bl	800b68c <malloc>
 800d514:	4602      	mov	r2, r0
 800d516:	61e0      	str	r0, [r4, #28]
 800d518:	b920      	cbnz	r0, 800d524 <_Balloc+0x20>
 800d51a:	4b18      	ldr	r3, [pc, #96]	; (800d57c <_Balloc+0x78>)
 800d51c:	4818      	ldr	r0, [pc, #96]	; (800d580 <_Balloc+0x7c>)
 800d51e:	216b      	movs	r1, #107	; 0x6b
 800d520:	f7fe f890 	bl	800b644 <__assert_func>
 800d524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d528:	6006      	str	r6, [r0, #0]
 800d52a:	60c6      	str	r6, [r0, #12]
 800d52c:	69e6      	ldr	r6, [r4, #28]
 800d52e:	68f3      	ldr	r3, [r6, #12]
 800d530:	b183      	cbz	r3, 800d554 <_Balloc+0x50>
 800d532:	69e3      	ldr	r3, [r4, #28]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d53a:	b9b8      	cbnz	r0, 800d56c <_Balloc+0x68>
 800d53c:	2101      	movs	r1, #1
 800d53e:	fa01 f605 	lsl.w	r6, r1, r5
 800d542:	1d72      	adds	r2, r6, #5
 800d544:	0092      	lsls	r2, r2, #2
 800d546:	4620      	mov	r0, r4
 800d548:	f000 ff2e 	bl	800e3a8 <_calloc_r>
 800d54c:	b160      	cbz	r0, 800d568 <_Balloc+0x64>
 800d54e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d552:	e00e      	b.n	800d572 <_Balloc+0x6e>
 800d554:	2221      	movs	r2, #33	; 0x21
 800d556:	2104      	movs	r1, #4
 800d558:	4620      	mov	r0, r4
 800d55a:	f000 ff25 	bl	800e3a8 <_calloc_r>
 800d55e:	69e3      	ldr	r3, [r4, #28]
 800d560:	60f0      	str	r0, [r6, #12]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d1e4      	bne.n	800d532 <_Balloc+0x2e>
 800d568:	2000      	movs	r0, #0
 800d56a:	bd70      	pop	{r4, r5, r6, pc}
 800d56c:	6802      	ldr	r2, [r0, #0]
 800d56e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d572:	2300      	movs	r3, #0
 800d574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d578:	e7f7      	b.n	800d56a <_Balloc+0x66>
 800d57a:	bf00      	nop
 800d57c:	08011d99 	.word	0x08011d99
 800d580:	08011e19 	.word	0x08011e19

0800d584 <_Bfree>:
 800d584:	b570      	push	{r4, r5, r6, lr}
 800d586:	69c6      	ldr	r6, [r0, #28]
 800d588:	4605      	mov	r5, r0
 800d58a:	460c      	mov	r4, r1
 800d58c:	b976      	cbnz	r6, 800d5ac <_Bfree+0x28>
 800d58e:	2010      	movs	r0, #16
 800d590:	f7fe f87c 	bl	800b68c <malloc>
 800d594:	4602      	mov	r2, r0
 800d596:	61e8      	str	r0, [r5, #28]
 800d598:	b920      	cbnz	r0, 800d5a4 <_Bfree+0x20>
 800d59a:	4b09      	ldr	r3, [pc, #36]	; (800d5c0 <_Bfree+0x3c>)
 800d59c:	4809      	ldr	r0, [pc, #36]	; (800d5c4 <_Bfree+0x40>)
 800d59e:	218f      	movs	r1, #143	; 0x8f
 800d5a0:	f7fe f850 	bl	800b644 <__assert_func>
 800d5a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5a8:	6006      	str	r6, [r0, #0]
 800d5aa:	60c6      	str	r6, [r0, #12]
 800d5ac:	b13c      	cbz	r4, 800d5be <_Bfree+0x3a>
 800d5ae:	69eb      	ldr	r3, [r5, #28]
 800d5b0:	6862      	ldr	r2, [r4, #4]
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5b8:	6021      	str	r1, [r4, #0]
 800d5ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d5be:	bd70      	pop	{r4, r5, r6, pc}
 800d5c0:	08011d99 	.word	0x08011d99
 800d5c4:	08011e19 	.word	0x08011e19

0800d5c8 <__multadd>:
 800d5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5cc:	690d      	ldr	r5, [r1, #16]
 800d5ce:	4607      	mov	r7, r0
 800d5d0:	460c      	mov	r4, r1
 800d5d2:	461e      	mov	r6, r3
 800d5d4:	f101 0c14 	add.w	ip, r1, #20
 800d5d8:	2000      	movs	r0, #0
 800d5da:	f8dc 3000 	ldr.w	r3, [ip]
 800d5de:	b299      	uxth	r1, r3
 800d5e0:	fb02 6101 	mla	r1, r2, r1, r6
 800d5e4:	0c1e      	lsrs	r6, r3, #16
 800d5e6:	0c0b      	lsrs	r3, r1, #16
 800d5e8:	fb02 3306 	mla	r3, r2, r6, r3
 800d5ec:	b289      	uxth	r1, r1
 800d5ee:	3001      	adds	r0, #1
 800d5f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d5f4:	4285      	cmp	r5, r0
 800d5f6:	f84c 1b04 	str.w	r1, [ip], #4
 800d5fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d5fe:	dcec      	bgt.n	800d5da <__multadd+0x12>
 800d600:	b30e      	cbz	r6, 800d646 <__multadd+0x7e>
 800d602:	68a3      	ldr	r3, [r4, #8]
 800d604:	42ab      	cmp	r3, r5
 800d606:	dc19      	bgt.n	800d63c <__multadd+0x74>
 800d608:	6861      	ldr	r1, [r4, #4]
 800d60a:	4638      	mov	r0, r7
 800d60c:	3101      	adds	r1, #1
 800d60e:	f7ff ff79 	bl	800d504 <_Balloc>
 800d612:	4680      	mov	r8, r0
 800d614:	b928      	cbnz	r0, 800d622 <__multadd+0x5a>
 800d616:	4602      	mov	r2, r0
 800d618:	4b0c      	ldr	r3, [pc, #48]	; (800d64c <__multadd+0x84>)
 800d61a:	480d      	ldr	r0, [pc, #52]	; (800d650 <__multadd+0x88>)
 800d61c:	21ba      	movs	r1, #186	; 0xba
 800d61e:	f7fe f811 	bl	800b644 <__assert_func>
 800d622:	6922      	ldr	r2, [r4, #16]
 800d624:	3202      	adds	r2, #2
 800d626:	f104 010c 	add.w	r1, r4, #12
 800d62a:	0092      	lsls	r2, r2, #2
 800d62c:	300c      	adds	r0, #12
 800d62e:	f7ff f837 	bl	800c6a0 <memcpy>
 800d632:	4621      	mov	r1, r4
 800d634:	4638      	mov	r0, r7
 800d636:	f7ff ffa5 	bl	800d584 <_Bfree>
 800d63a:	4644      	mov	r4, r8
 800d63c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d640:	3501      	adds	r5, #1
 800d642:	615e      	str	r6, [r3, #20]
 800d644:	6125      	str	r5, [r4, #16]
 800d646:	4620      	mov	r0, r4
 800d648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d64c:	08011e08 	.word	0x08011e08
 800d650:	08011e19 	.word	0x08011e19

0800d654 <__hi0bits>:
 800d654:	0c03      	lsrs	r3, r0, #16
 800d656:	041b      	lsls	r3, r3, #16
 800d658:	b9d3      	cbnz	r3, 800d690 <__hi0bits+0x3c>
 800d65a:	0400      	lsls	r0, r0, #16
 800d65c:	2310      	movs	r3, #16
 800d65e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d662:	bf04      	itt	eq
 800d664:	0200      	lsleq	r0, r0, #8
 800d666:	3308      	addeq	r3, #8
 800d668:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d66c:	bf04      	itt	eq
 800d66e:	0100      	lsleq	r0, r0, #4
 800d670:	3304      	addeq	r3, #4
 800d672:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d676:	bf04      	itt	eq
 800d678:	0080      	lsleq	r0, r0, #2
 800d67a:	3302      	addeq	r3, #2
 800d67c:	2800      	cmp	r0, #0
 800d67e:	db05      	blt.n	800d68c <__hi0bits+0x38>
 800d680:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d684:	f103 0301 	add.w	r3, r3, #1
 800d688:	bf08      	it	eq
 800d68a:	2320      	moveq	r3, #32
 800d68c:	4618      	mov	r0, r3
 800d68e:	4770      	bx	lr
 800d690:	2300      	movs	r3, #0
 800d692:	e7e4      	b.n	800d65e <__hi0bits+0xa>

0800d694 <__lo0bits>:
 800d694:	6803      	ldr	r3, [r0, #0]
 800d696:	f013 0207 	ands.w	r2, r3, #7
 800d69a:	d00c      	beq.n	800d6b6 <__lo0bits+0x22>
 800d69c:	07d9      	lsls	r1, r3, #31
 800d69e:	d422      	bmi.n	800d6e6 <__lo0bits+0x52>
 800d6a0:	079a      	lsls	r2, r3, #30
 800d6a2:	bf49      	itett	mi
 800d6a4:	085b      	lsrmi	r3, r3, #1
 800d6a6:	089b      	lsrpl	r3, r3, #2
 800d6a8:	6003      	strmi	r3, [r0, #0]
 800d6aa:	2201      	movmi	r2, #1
 800d6ac:	bf5c      	itt	pl
 800d6ae:	6003      	strpl	r3, [r0, #0]
 800d6b0:	2202      	movpl	r2, #2
 800d6b2:	4610      	mov	r0, r2
 800d6b4:	4770      	bx	lr
 800d6b6:	b299      	uxth	r1, r3
 800d6b8:	b909      	cbnz	r1, 800d6be <__lo0bits+0x2a>
 800d6ba:	0c1b      	lsrs	r3, r3, #16
 800d6bc:	2210      	movs	r2, #16
 800d6be:	b2d9      	uxtb	r1, r3
 800d6c0:	b909      	cbnz	r1, 800d6c6 <__lo0bits+0x32>
 800d6c2:	3208      	adds	r2, #8
 800d6c4:	0a1b      	lsrs	r3, r3, #8
 800d6c6:	0719      	lsls	r1, r3, #28
 800d6c8:	bf04      	itt	eq
 800d6ca:	091b      	lsreq	r3, r3, #4
 800d6cc:	3204      	addeq	r2, #4
 800d6ce:	0799      	lsls	r1, r3, #30
 800d6d0:	bf04      	itt	eq
 800d6d2:	089b      	lsreq	r3, r3, #2
 800d6d4:	3202      	addeq	r2, #2
 800d6d6:	07d9      	lsls	r1, r3, #31
 800d6d8:	d403      	bmi.n	800d6e2 <__lo0bits+0x4e>
 800d6da:	085b      	lsrs	r3, r3, #1
 800d6dc:	f102 0201 	add.w	r2, r2, #1
 800d6e0:	d003      	beq.n	800d6ea <__lo0bits+0x56>
 800d6e2:	6003      	str	r3, [r0, #0]
 800d6e4:	e7e5      	b.n	800d6b2 <__lo0bits+0x1e>
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	e7e3      	b.n	800d6b2 <__lo0bits+0x1e>
 800d6ea:	2220      	movs	r2, #32
 800d6ec:	e7e1      	b.n	800d6b2 <__lo0bits+0x1e>
	...

0800d6f0 <__i2b>:
 800d6f0:	b510      	push	{r4, lr}
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	f7ff ff05 	bl	800d504 <_Balloc>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	b928      	cbnz	r0, 800d70a <__i2b+0x1a>
 800d6fe:	4b05      	ldr	r3, [pc, #20]	; (800d714 <__i2b+0x24>)
 800d700:	4805      	ldr	r0, [pc, #20]	; (800d718 <__i2b+0x28>)
 800d702:	f240 1145 	movw	r1, #325	; 0x145
 800d706:	f7fd ff9d 	bl	800b644 <__assert_func>
 800d70a:	2301      	movs	r3, #1
 800d70c:	6144      	str	r4, [r0, #20]
 800d70e:	6103      	str	r3, [r0, #16]
 800d710:	bd10      	pop	{r4, pc}
 800d712:	bf00      	nop
 800d714:	08011e08 	.word	0x08011e08
 800d718:	08011e19 	.word	0x08011e19

0800d71c <__multiply>:
 800d71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d720:	4691      	mov	r9, r2
 800d722:	690a      	ldr	r2, [r1, #16]
 800d724:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d728:	429a      	cmp	r2, r3
 800d72a:	bfb8      	it	lt
 800d72c:	460b      	movlt	r3, r1
 800d72e:	460c      	mov	r4, r1
 800d730:	bfbc      	itt	lt
 800d732:	464c      	movlt	r4, r9
 800d734:	4699      	movlt	r9, r3
 800d736:	6927      	ldr	r7, [r4, #16]
 800d738:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d73c:	68a3      	ldr	r3, [r4, #8]
 800d73e:	6861      	ldr	r1, [r4, #4]
 800d740:	eb07 060a 	add.w	r6, r7, sl
 800d744:	42b3      	cmp	r3, r6
 800d746:	b085      	sub	sp, #20
 800d748:	bfb8      	it	lt
 800d74a:	3101      	addlt	r1, #1
 800d74c:	f7ff feda 	bl	800d504 <_Balloc>
 800d750:	b930      	cbnz	r0, 800d760 <__multiply+0x44>
 800d752:	4602      	mov	r2, r0
 800d754:	4b44      	ldr	r3, [pc, #272]	; (800d868 <__multiply+0x14c>)
 800d756:	4845      	ldr	r0, [pc, #276]	; (800d86c <__multiply+0x150>)
 800d758:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d75c:	f7fd ff72 	bl	800b644 <__assert_func>
 800d760:	f100 0514 	add.w	r5, r0, #20
 800d764:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d768:	462b      	mov	r3, r5
 800d76a:	2200      	movs	r2, #0
 800d76c:	4543      	cmp	r3, r8
 800d76e:	d321      	bcc.n	800d7b4 <__multiply+0x98>
 800d770:	f104 0314 	add.w	r3, r4, #20
 800d774:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d778:	f109 0314 	add.w	r3, r9, #20
 800d77c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d780:	9202      	str	r2, [sp, #8]
 800d782:	1b3a      	subs	r2, r7, r4
 800d784:	3a15      	subs	r2, #21
 800d786:	f022 0203 	bic.w	r2, r2, #3
 800d78a:	3204      	adds	r2, #4
 800d78c:	f104 0115 	add.w	r1, r4, #21
 800d790:	428f      	cmp	r7, r1
 800d792:	bf38      	it	cc
 800d794:	2204      	movcc	r2, #4
 800d796:	9201      	str	r2, [sp, #4]
 800d798:	9a02      	ldr	r2, [sp, #8]
 800d79a:	9303      	str	r3, [sp, #12]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d80c      	bhi.n	800d7ba <__multiply+0x9e>
 800d7a0:	2e00      	cmp	r6, #0
 800d7a2:	dd03      	ble.n	800d7ac <__multiply+0x90>
 800d7a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d05b      	beq.n	800d864 <__multiply+0x148>
 800d7ac:	6106      	str	r6, [r0, #16]
 800d7ae:	b005      	add	sp, #20
 800d7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b4:	f843 2b04 	str.w	r2, [r3], #4
 800d7b8:	e7d8      	b.n	800d76c <__multiply+0x50>
 800d7ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800d7be:	f1ba 0f00 	cmp.w	sl, #0
 800d7c2:	d024      	beq.n	800d80e <__multiply+0xf2>
 800d7c4:	f104 0e14 	add.w	lr, r4, #20
 800d7c8:	46a9      	mov	r9, r5
 800d7ca:	f04f 0c00 	mov.w	ip, #0
 800d7ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d7d2:	f8d9 1000 	ldr.w	r1, [r9]
 800d7d6:	fa1f fb82 	uxth.w	fp, r2
 800d7da:	b289      	uxth	r1, r1
 800d7dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d7e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d7e4:	f8d9 2000 	ldr.w	r2, [r9]
 800d7e8:	4461      	add	r1, ip
 800d7ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d7ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800d7f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d7f6:	b289      	uxth	r1, r1
 800d7f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d7fc:	4577      	cmp	r7, lr
 800d7fe:	f849 1b04 	str.w	r1, [r9], #4
 800d802:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d806:	d8e2      	bhi.n	800d7ce <__multiply+0xb2>
 800d808:	9a01      	ldr	r2, [sp, #4]
 800d80a:	f845 c002 	str.w	ip, [r5, r2]
 800d80e:	9a03      	ldr	r2, [sp, #12]
 800d810:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d814:	3304      	adds	r3, #4
 800d816:	f1b9 0f00 	cmp.w	r9, #0
 800d81a:	d021      	beq.n	800d860 <__multiply+0x144>
 800d81c:	6829      	ldr	r1, [r5, #0]
 800d81e:	f104 0c14 	add.w	ip, r4, #20
 800d822:	46ae      	mov	lr, r5
 800d824:	f04f 0a00 	mov.w	sl, #0
 800d828:	f8bc b000 	ldrh.w	fp, [ip]
 800d82c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d830:	fb09 220b 	mla	r2, r9, fp, r2
 800d834:	4452      	add	r2, sl
 800d836:	b289      	uxth	r1, r1
 800d838:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d83c:	f84e 1b04 	str.w	r1, [lr], #4
 800d840:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d844:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d848:	f8be 1000 	ldrh.w	r1, [lr]
 800d84c:	fb09 110a 	mla	r1, r9, sl, r1
 800d850:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d854:	4567      	cmp	r7, ip
 800d856:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d85a:	d8e5      	bhi.n	800d828 <__multiply+0x10c>
 800d85c:	9a01      	ldr	r2, [sp, #4]
 800d85e:	50a9      	str	r1, [r5, r2]
 800d860:	3504      	adds	r5, #4
 800d862:	e799      	b.n	800d798 <__multiply+0x7c>
 800d864:	3e01      	subs	r6, #1
 800d866:	e79b      	b.n	800d7a0 <__multiply+0x84>
 800d868:	08011e08 	.word	0x08011e08
 800d86c:	08011e19 	.word	0x08011e19

0800d870 <__pow5mult>:
 800d870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d874:	4615      	mov	r5, r2
 800d876:	f012 0203 	ands.w	r2, r2, #3
 800d87a:	4606      	mov	r6, r0
 800d87c:	460f      	mov	r7, r1
 800d87e:	d007      	beq.n	800d890 <__pow5mult+0x20>
 800d880:	4c25      	ldr	r4, [pc, #148]	; (800d918 <__pow5mult+0xa8>)
 800d882:	3a01      	subs	r2, #1
 800d884:	2300      	movs	r3, #0
 800d886:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d88a:	f7ff fe9d 	bl	800d5c8 <__multadd>
 800d88e:	4607      	mov	r7, r0
 800d890:	10ad      	asrs	r5, r5, #2
 800d892:	d03d      	beq.n	800d910 <__pow5mult+0xa0>
 800d894:	69f4      	ldr	r4, [r6, #28]
 800d896:	b97c      	cbnz	r4, 800d8b8 <__pow5mult+0x48>
 800d898:	2010      	movs	r0, #16
 800d89a:	f7fd fef7 	bl	800b68c <malloc>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	61f0      	str	r0, [r6, #28]
 800d8a2:	b928      	cbnz	r0, 800d8b0 <__pow5mult+0x40>
 800d8a4:	4b1d      	ldr	r3, [pc, #116]	; (800d91c <__pow5mult+0xac>)
 800d8a6:	481e      	ldr	r0, [pc, #120]	; (800d920 <__pow5mult+0xb0>)
 800d8a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d8ac:	f7fd feca 	bl	800b644 <__assert_func>
 800d8b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8b4:	6004      	str	r4, [r0, #0]
 800d8b6:	60c4      	str	r4, [r0, #12]
 800d8b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d8bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8c0:	b94c      	cbnz	r4, 800d8d6 <__pow5mult+0x66>
 800d8c2:	f240 2171 	movw	r1, #625	; 0x271
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f7ff ff12 	bl	800d6f0 <__i2b>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	6003      	str	r3, [r0, #0]
 800d8d6:	f04f 0900 	mov.w	r9, #0
 800d8da:	07eb      	lsls	r3, r5, #31
 800d8dc:	d50a      	bpl.n	800d8f4 <__pow5mult+0x84>
 800d8de:	4639      	mov	r1, r7
 800d8e0:	4622      	mov	r2, r4
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	f7ff ff1a 	bl	800d71c <__multiply>
 800d8e8:	4639      	mov	r1, r7
 800d8ea:	4680      	mov	r8, r0
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	f7ff fe49 	bl	800d584 <_Bfree>
 800d8f2:	4647      	mov	r7, r8
 800d8f4:	106d      	asrs	r5, r5, #1
 800d8f6:	d00b      	beq.n	800d910 <__pow5mult+0xa0>
 800d8f8:	6820      	ldr	r0, [r4, #0]
 800d8fa:	b938      	cbnz	r0, 800d90c <__pow5mult+0x9c>
 800d8fc:	4622      	mov	r2, r4
 800d8fe:	4621      	mov	r1, r4
 800d900:	4630      	mov	r0, r6
 800d902:	f7ff ff0b 	bl	800d71c <__multiply>
 800d906:	6020      	str	r0, [r4, #0]
 800d908:	f8c0 9000 	str.w	r9, [r0]
 800d90c:	4604      	mov	r4, r0
 800d90e:	e7e4      	b.n	800d8da <__pow5mult+0x6a>
 800d910:	4638      	mov	r0, r7
 800d912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d916:	bf00      	nop
 800d918:	08011f68 	.word	0x08011f68
 800d91c:	08011d99 	.word	0x08011d99
 800d920:	08011e19 	.word	0x08011e19

0800d924 <__lshift>:
 800d924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d928:	460c      	mov	r4, r1
 800d92a:	6849      	ldr	r1, [r1, #4]
 800d92c:	6923      	ldr	r3, [r4, #16]
 800d92e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d932:	68a3      	ldr	r3, [r4, #8]
 800d934:	4607      	mov	r7, r0
 800d936:	4691      	mov	r9, r2
 800d938:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d93c:	f108 0601 	add.w	r6, r8, #1
 800d940:	42b3      	cmp	r3, r6
 800d942:	db0b      	blt.n	800d95c <__lshift+0x38>
 800d944:	4638      	mov	r0, r7
 800d946:	f7ff fddd 	bl	800d504 <_Balloc>
 800d94a:	4605      	mov	r5, r0
 800d94c:	b948      	cbnz	r0, 800d962 <__lshift+0x3e>
 800d94e:	4602      	mov	r2, r0
 800d950:	4b28      	ldr	r3, [pc, #160]	; (800d9f4 <__lshift+0xd0>)
 800d952:	4829      	ldr	r0, [pc, #164]	; (800d9f8 <__lshift+0xd4>)
 800d954:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d958:	f7fd fe74 	bl	800b644 <__assert_func>
 800d95c:	3101      	adds	r1, #1
 800d95e:	005b      	lsls	r3, r3, #1
 800d960:	e7ee      	b.n	800d940 <__lshift+0x1c>
 800d962:	2300      	movs	r3, #0
 800d964:	f100 0114 	add.w	r1, r0, #20
 800d968:	f100 0210 	add.w	r2, r0, #16
 800d96c:	4618      	mov	r0, r3
 800d96e:	4553      	cmp	r3, sl
 800d970:	db33      	blt.n	800d9da <__lshift+0xb6>
 800d972:	6920      	ldr	r0, [r4, #16]
 800d974:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d978:	f104 0314 	add.w	r3, r4, #20
 800d97c:	f019 091f 	ands.w	r9, r9, #31
 800d980:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d984:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d988:	d02b      	beq.n	800d9e2 <__lshift+0xbe>
 800d98a:	f1c9 0e20 	rsb	lr, r9, #32
 800d98e:	468a      	mov	sl, r1
 800d990:	2200      	movs	r2, #0
 800d992:	6818      	ldr	r0, [r3, #0]
 800d994:	fa00 f009 	lsl.w	r0, r0, r9
 800d998:	4310      	orrs	r0, r2
 800d99a:	f84a 0b04 	str.w	r0, [sl], #4
 800d99e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9a2:	459c      	cmp	ip, r3
 800d9a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d9a8:	d8f3      	bhi.n	800d992 <__lshift+0x6e>
 800d9aa:	ebac 0304 	sub.w	r3, ip, r4
 800d9ae:	3b15      	subs	r3, #21
 800d9b0:	f023 0303 	bic.w	r3, r3, #3
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	f104 0015 	add.w	r0, r4, #21
 800d9ba:	4584      	cmp	ip, r0
 800d9bc:	bf38      	it	cc
 800d9be:	2304      	movcc	r3, #4
 800d9c0:	50ca      	str	r2, [r1, r3]
 800d9c2:	b10a      	cbz	r2, 800d9c8 <__lshift+0xa4>
 800d9c4:	f108 0602 	add.w	r6, r8, #2
 800d9c8:	3e01      	subs	r6, #1
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	612e      	str	r6, [r5, #16]
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	f7ff fdd8 	bl	800d584 <_Bfree>
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9da:	f842 0f04 	str.w	r0, [r2, #4]!
 800d9de:	3301      	adds	r3, #1
 800d9e0:	e7c5      	b.n	800d96e <__lshift+0x4a>
 800d9e2:	3904      	subs	r1, #4
 800d9e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9ec:	459c      	cmp	ip, r3
 800d9ee:	d8f9      	bhi.n	800d9e4 <__lshift+0xc0>
 800d9f0:	e7ea      	b.n	800d9c8 <__lshift+0xa4>
 800d9f2:	bf00      	nop
 800d9f4:	08011e08 	.word	0x08011e08
 800d9f8:	08011e19 	.word	0x08011e19

0800d9fc <__mcmp>:
 800d9fc:	b530      	push	{r4, r5, lr}
 800d9fe:	6902      	ldr	r2, [r0, #16]
 800da00:	690c      	ldr	r4, [r1, #16]
 800da02:	1b12      	subs	r2, r2, r4
 800da04:	d10e      	bne.n	800da24 <__mcmp+0x28>
 800da06:	f100 0314 	add.w	r3, r0, #20
 800da0a:	3114      	adds	r1, #20
 800da0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800da10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800da14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800da18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800da1c:	42a5      	cmp	r5, r4
 800da1e:	d003      	beq.n	800da28 <__mcmp+0x2c>
 800da20:	d305      	bcc.n	800da2e <__mcmp+0x32>
 800da22:	2201      	movs	r2, #1
 800da24:	4610      	mov	r0, r2
 800da26:	bd30      	pop	{r4, r5, pc}
 800da28:	4283      	cmp	r3, r0
 800da2a:	d3f3      	bcc.n	800da14 <__mcmp+0x18>
 800da2c:	e7fa      	b.n	800da24 <__mcmp+0x28>
 800da2e:	f04f 32ff 	mov.w	r2, #4294967295
 800da32:	e7f7      	b.n	800da24 <__mcmp+0x28>

0800da34 <__mdiff>:
 800da34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da38:	460c      	mov	r4, r1
 800da3a:	4606      	mov	r6, r0
 800da3c:	4611      	mov	r1, r2
 800da3e:	4620      	mov	r0, r4
 800da40:	4690      	mov	r8, r2
 800da42:	f7ff ffdb 	bl	800d9fc <__mcmp>
 800da46:	1e05      	subs	r5, r0, #0
 800da48:	d110      	bne.n	800da6c <__mdiff+0x38>
 800da4a:	4629      	mov	r1, r5
 800da4c:	4630      	mov	r0, r6
 800da4e:	f7ff fd59 	bl	800d504 <_Balloc>
 800da52:	b930      	cbnz	r0, 800da62 <__mdiff+0x2e>
 800da54:	4b3a      	ldr	r3, [pc, #232]	; (800db40 <__mdiff+0x10c>)
 800da56:	4602      	mov	r2, r0
 800da58:	f240 2137 	movw	r1, #567	; 0x237
 800da5c:	4839      	ldr	r0, [pc, #228]	; (800db44 <__mdiff+0x110>)
 800da5e:	f7fd fdf1 	bl	800b644 <__assert_func>
 800da62:	2301      	movs	r3, #1
 800da64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6c:	bfa4      	itt	ge
 800da6e:	4643      	movge	r3, r8
 800da70:	46a0      	movge	r8, r4
 800da72:	4630      	mov	r0, r6
 800da74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800da78:	bfa6      	itte	ge
 800da7a:	461c      	movge	r4, r3
 800da7c:	2500      	movge	r5, #0
 800da7e:	2501      	movlt	r5, #1
 800da80:	f7ff fd40 	bl	800d504 <_Balloc>
 800da84:	b920      	cbnz	r0, 800da90 <__mdiff+0x5c>
 800da86:	4b2e      	ldr	r3, [pc, #184]	; (800db40 <__mdiff+0x10c>)
 800da88:	4602      	mov	r2, r0
 800da8a:	f240 2145 	movw	r1, #581	; 0x245
 800da8e:	e7e5      	b.n	800da5c <__mdiff+0x28>
 800da90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800da94:	6926      	ldr	r6, [r4, #16]
 800da96:	60c5      	str	r5, [r0, #12]
 800da98:	f104 0914 	add.w	r9, r4, #20
 800da9c:	f108 0514 	add.w	r5, r8, #20
 800daa0:	f100 0e14 	add.w	lr, r0, #20
 800daa4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800daa8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800daac:	f108 0210 	add.w	r2, r8, #16
 800dab0:	46f2      	mov	sl, lr
 800dab2:	2100      	movs	r1, #0
 800dab4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dab8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dabc:	fa11 f88b 	uxtah	r8, r1, fp
 800dac0:	b299      	uxth	r1, r3
 800dac2:	0c1b      	lsrs	r3, r3, #16
 800dac4:	eba8 0801 	sub.w	r8, r8, r1
 800dac8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dacc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dad0:	fa1f f888 	uxth.w	r8, r8
 800dad4:	1419      	asrs	r1, r3, #16
 800dad6:	454e      	cmp	r6, r9
 800dad8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dadc:	f84a 3b04 	str.w	r3, [sl], #4
 800dae0:	d8e8      	bhi.n	800dab4 <__mdiff+0x80>
 800dae2:	1b33      	subs	r3, r6, r4
 800dae4:	3b15      	subs	r3, #21
 800dae6:	f023 0303 	bic.w	r3, r3, #3
 800daea:	3304      	adds	r3, #4
 800daec:	3415      	adds	r4, #21
 800daee:	42a6      	cmp	r6, r4
 800daf0:	bf38      	it	cc
 800daf2:	2304      	movcc	r3, #4
 800daf4:	441d      	add	r5, r3
 800daf6:	4473      	add	r3, lr
 800daf8:	469e      	mov	lr, r3
 800dafa:	462e      	mov	r6, r5
 800dafc:	4566      	cmp	r6, ip
 800dafe:	d30e      	bcc.n	800db1e <__mdiff+0xea>
 800db00:	f10c 0203 	add.w	r2, ip, #3
 800db04:	1b52      	subs	r2, r2, r5
 800db06:	f022 0203 	bic.w	r2, r2, #3
 800db0a:	3d03      	subs	r5, #3
 800db0c:	45ac      	cmp	ip, r5
 800db0e:	bf38      	it	cc
 800db10:	2200      	movcc	r2, #0
 800db12:	4413      	add	r3, r2
 800db14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800db18:	b17a      	cbz	r2, 800db3a <__mdiff+0x106>
 800db1a:	6107      	str	r7, [r0, #16]
 800db1c:	e7a4      	b.n	800da68 <__mdiff+0x34>
 800db1e:	f856 8b04 	ldr.w	r8, [r6], #4
 800db22:	fa11 f288 	uxtah	r2, r1, r8
 800db26:	1414      	asrs	r4, r2, #16
 800db28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800db2c:	b292      	uxth	r2, r2
 800db2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800db32:	f84e 2b04 	str.w	r2, [lr], #4
 800db36:	1421      	asrs	r1, r4, #16
 800db38:	e7e0      	b.n	800dafc <__mdiff+0xc8>
 800db3a:	3f01      	subs	r7, #1
 800db3c:	e7ea      	b.n	800db14 <__mdiff+0xe0>
 800db3e:	bf00      	nop
 800db40:	08011e08 	.word	0x08011e08
 800db44:	08011e19 	.word	0x08011e19

0800db48 <__d2b>:
 800db48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db4c:	460f      	mov	r7, r1
 800db4e:	2101      	movs	r1, #1
 800db50:	ec59 8b10 	vmov	r8, r9, d0
 800db54:	4616      	mov	r6, r2
 800db56:	f7ff fcd5 	bl	800d504 <_Balloc>
 800db5a:	4604      	mov	r4, r0
 800db5c:	b930      	cbnz	r0, 800db6c <__d2b+0x24>
 800db5e:	4602      	mov	r2, r0
 800db60:	4b24      	ldr	r3, [pc, #144]	; (800dbf4 <__d2b+0xac>)
 800db62:	4825      	ldr	r0, [pc, #148]	; (800dbf8 <__d2b+0xb0>)
 800db64:	f240 310f 	movw	r1, #783	; 0x30f
 800db68:	f7fd fd6c 	bl	800b644 <__assert_func>
 800db6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db74:	bb2d      	cbnz	r5, 800dbc2 <__d2b+0x7a>
 800db76:	9301      	str	r3, [sp, #4]
 800db78:	f1b8 0300 	subs.w	r3, r8, #0
 800db7c:	d026      	beq.n	800dbcc <__d2b+0x84>
 800db7e:	4668      	mov	r0, sp
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	f7ff fd87 	bl	800d694 <__lo0bits>
 800db86:	e9dd 1200 	ldrd	r1, r2, [sp]
 800db8a:	b1e8      	cbz	r0, 800dbc8 <__d2b+0x80>
 800db8c:	f1c0 0320 	rsb	r3, r0, #32
 800db90:	fa02 f303 	lsl.w	r3, r2, r3
 800db94:	430b      	orrs	r3, r1
 800db96:	40c2      	lsrs	r2, r0
 800db98:	6163      	str	r3, [r4, #20]
 800db9a:	9201      	str	r2, [sp, #4]
 800db9c:	9b01      	ldr	r3, [sp, #4]
 800db9e:	61a3      	str	r3, [r4, #24]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	bf14      	ite	ne
 800dba4:	2202      	movne	r2, #2
 800dba6:	2201      	moveq	r2, #1
 800dba8:	6122      	str	r2, [r4, #16]
 800dbaa:	b1bd      	cbz	r5, 800dbdc <__d2b+0x94>
 800dbac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dbb0:	4405      	add	r5, r0
 800dbb2:	603d      	str	r5, [r7, #0]
 800dbb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dbb8:	6030      	str	r0, [r6, #0]
 800dbba:	4620      	mov	r0, r4
 800dbbc:	b003      	add	sp, #12
 800dbbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbc6:	e7d6      	b.n	800db76 <__d2b+0x2e>
 800dbc8:	6161      	str	r1, [r4, #20]
 800dbca:	e7e7      	b.n	800db9c <__d2b+0x54>
 800dbcc:	a801      	add	r0, sp, #4
 800dbce:	f7ff fd61 	bl	800d694 <__lo0bits>
 800dbd2:	9b01      	ldr	r3, [sp, #4]
 800dbd4:	6163      	str	r3, [r4, #20]
 800dbd6:	3020      	adds	r0, #32
 800dbd8:	2201      	movs	r2, #1
 800dbda:	e7e5      	b.n	800dba8 <__d2b+0x60>
 800dbdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dbe0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dbe4:	6038      	str	r0, [r7, #0]
 800dbe6:	6918      	ldr	r0, [r3, #16]
 800dbe8:	f7ff fd34 	bl	800d654 <__hi0bits>
 800dbec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbf0:	e7e2      	b.n	800dbb8 <__d2b+0x70>
 800dbf2:	bf00      	nop
 800dbf4:	08011e08 	.word	0x08011e08
 800dbf8:	08011e19 	.word	0x08011e19

0800dbfc <_malloc_usable_size_r>:
 800dbfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc00:	1f18      	subs	r0, r3, #4
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	bfbc      	itt	lt
 800dc06:	580b      	ldrlt	r3, [r1, r0]
 800dc08:	18c0      	addlt	r0, r0, r3
 800dc0a:	4770      	bx	lr

0800dc0c <__ssputs_r>:
 800dc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc10:	688e      	ldr	r6, [r1, #8]
 800dc12:	461f      	mov	r7, r3
 800dc14:	42be      	cmp	r6, r7
 800dc16:	680b      	ldr	r3, [r1, #0]
 800dc18:	4682      	mov	sl, r0
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	4690      	mov	r8, r2
 800dc1e:	d82c      	bhi.n	800dc7a <__ssputs_r+0x6e>
 800dc20:	898a      	ldrh	r2, [r1, #12]
 800dc22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc26:	d026      	beq.n	800dc76 <__ssputs_r+0x6a>
 800dc28:	6965      	ldr	r5, [r4, #20]
 800dc2a:	6909      	ldr	r1, [r1, #16]
 800dc2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc30:	eba3 0901 	sub.w	r9, r3, r1
 800dc34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc38:	1c7b      	adds	r3, r7, #1
 800dc3a:	444b      	add	r3, r9
 800dc3c:	106d      	asrs	r5, r5, #1
 800dc3e:	429d      	cmp	r5, r3
 800dc40:	bf38      	it	cc
 800dc42:	461d      	movcc	r5, r3
 800dc44:	0553      	lsls	r3, r2, #21
 800dc46:	d527      	bpl.n	800dc98 <__ssputs_r+0x8c>
 800dc48:	4629      	mov	r1, r5
 800dc4a:	f7fd fd4f 	bl	800b6ec <_malloc_r>
 800dc4e:	4606      	mov	r6, r0
 800dc50:	b360      	cbz	r0, 800dcac <__ssputs_r+0xa0>
 800dc52:	6921      	ldr	r1, [r4, #16]
 800dc54:	464a      	mov	r2, r9
 800dc56:	f7fe fd23 	bl	800c6a0 <memcpy>
 800dc5a:	89a3      	ldrh	r3, [r4, #12]
 800dc5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc64:	81a3      	strh	r3, [r4, #12]
 800dc66:	6126      	str	r6, [r4, #16]
 800dc68:	6165      	str	r5, [r4, #20]
 800dc6a:	444e      	add	r6, r9
 800dc6c:	eba5 0509 	sub.w	r5, r5, r9
 800dc70:	6026      	str	r6, [r4, #0]
 800dc72:	60a5      	str	r5, [r4, #8]
 800dc74:	463e      	mov	r6, r7
 800dc76:	42be      	cmp	r6, r7
 800dc78:	d900      	bls.n	800dc7c <__ssputs_r+0x70>
 800dc7a:	463e      	mov	r6, r7
 800dc7c:	6820      	ldr	r0, [r4, #0]
 800dc7e:	4632      	mov	r2, r6
 800dc80:	4641      	mov	r1, r8
 800dc82:	f7fe fc0f 	bl	800c4a4 <memmove>
 800dc86:	68a3      	ldr	r3, [r4, #8]
 800dc88:	1b9b      	subs	r3, r3, r6
 800dc8a:	60a3      	str	r3, [r4, #8]
 800dc8c:	6823      	ldr	r3, [r4, #0]
 800dc8e:	4433      	add	r3, r6
 800dc90:	6023      	str	r3, [r4, #0]
 800dc92:	2000      	movs	r0, #0
 800dc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc98:	462a      	mov	r2, r5
 800dc9a:	f7fd fdb3 	bl	800b804 <_realloc_r>
 800dc9e:	4606      	mov	r6, r0
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d1e0      	bne.n	800dc66 <__ssputs_r+0x5a>
 800dca4:	6921      	ldr	r1, [r4, #16]
 800dca6:	4650      	mov	r0, sl
 800dca8:	f7ff fbe0 	bl	800d46c <_free_r>
 800dcac:	230c      	movs	r3, #12
 800dcae:	f8ca 3000 	str.w	r3, [sl]
 800dcb2:	89a3      	ldrh	r3, [r4, #12]
 800dcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcb8:	81a3      	strh	r3, [r4, #12]
 800dcba:	f04f 30ff 	mov.w	r0, #4294967295
 800dcbe:	e7e9      	b.n	800dc94 <__ssputs_r+0x88>

0800dcc0 <_svfiprintf_r>:
 800dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc4:	4698      	mov	r8, r3
 800dcc6:	898b      	ldrh	r3, [r1, #12]
 800dcc8:	061b      	lsls	r3, r3, #24
 800dcca:	b09d      	sub	sp, #116	; 0x74
 800dccc:	4607      	mov	r7, r0
 800dcce:	460d      	mov	r5, r1
 800dcd0:	4614      	mov	r4, r2
 800dcd2:	d50e      	bpl.n	800dcf2 <_svfiprintf_r+0x32>
 800dcd4:	690b      	ldr	r3, [r1, #16]
 800dcd6:	b963      	cbnz	r3, 800dcf2 <_svfiprintf_r+0x32>
 800dcd8:	2140      	movs	r1, #64	; 0x40
 800dcda:	f7fd fd07 	bl	800b6ec <_malloc_r>
 800dcde:	6028      	str	r0, [r5, #0]
 800dce0:	6128      	str	r0, [r5, #16]
 800dce2:	b920      	cbnz	r0, 800dcee <_svfiprintf_r+0x2e>
 800dce4:	230c      	movs	r3, #12
 800dce6:	603b      	str	r3, [r7, #0]
 800dce8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcec:	e0d0      	b.n	800de90 <_svfiprintf_r+0x1d0>
 800dcee:	2340      	movs	r3, #64	; 0x40
 800dcf0:	616b      	str	r3, [r5, #20]
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf6:	2320      	movs	r3, #32
 800dcf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd00:	2330      	movs	r3, #48	; 0x30
 800dd02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dea8 <_svfiprintf_r+0x1e8>
 800dd06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd0a:	f04f 0901 	mov.w	r9, #1
 800dd0e:	4623      	mov	r3, r4
 800dd10:	469a      	mov	sl, r3
 800dd12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd16:	b10a      	cbz	r2, 800dd1c <_svfiprintf_r+0x5c>
 800dd18:	2a25      	cmp	r2, #37	; 0x25
 800dd1a:	d1f9      	bne.n	800dd10 <_svfiprintf_r+0x50>
 800dd1c:	ebba 0b04 	subs.w	fp, sl, r4
 800dd20:	d00b      	beq.n	800dd3a <_svfiprintf_r+0x7a>
 800dd22:	465b      	mov	r3, fp
 800dd24:	4622      	mov	r2, r4
 800dd26:	4629      	mov	r1, r5
 800dd28:	4638      	mov	r0, r7
 800dd2a:	f7ff ff6f 	bl	800dc0c <__ssputs_r>
 800dd2e:	3001      	adds	r0, #1
 800dd30:	f000 80a9 	beq.w	800de86 <_svfiprintf_r+0x1c6>
 800dd34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd36:	445a      	add	r2, fp
 800dd38:	9209      	str	r2, [sp, #36]	; 0x24
 800dd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	f000 80a1 	beq.w	800de86 <_svfiprintf_r+0x1c6>
 800dd44:	2300      	movs	r3, #0
 800dd46:	f04f 32ff 	mov.w	r2, #4294967295
 800dd4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd4e:	f10a 0a01 	add.w	sl, sl, #1
 800dd52:	9304      	str	r3, [sp, #16]
 800dd54:	9307      	str	r3, [sp, #28]
 800dd56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd5a:	931a      	str	r3, [sp, #104]	; 0x68
 800dd5c:	4654      	mov	r4, sl
 800dd5e:	2205      	movs	r2, #5
 800dd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd64:	4850      	ldr	r0, [pc, #320]	; (800dea8 <_svfiprintf_r+0x1e8>)
 800dd66:	f7f2 fa53 	bl	8000210 <memchr>
 800dd6a:	9a04      	ldr	r2, [sp, #16]
 800dd6c:	b9d8      	cbnz	r0, 800dda6 <_svfiprintf_r+0xe6>
 800dd6e:	06d0      	lsls	r0, r2, #27
 800dd70:	bf44      	itt	mi
 800dd72:	2320      	movmi	r3, #32
 800dd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd78:	0711      	lsls	r1, r2, #28
 800dd7a:	bf44      	itt	mi
 800dd7c:	232b      	movmi	r3, #43	; 0x2b
 800dd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd82:	f89a 3000 	ldrb.w	r3, [sl]
 800dd86:	2b2a      	cmp	r3, #42	; 0x2a
 800dd88:	d015      	beq.n	800ddb6 <_svfiprintf_r+0xf6>
 800dd8a:	9a07      	ldr	r2, [sp, #28]
 800dd8c:	4654      	mov	r4, sl
 800dd8e:	2000      	movs	r0, #0
 800dd90:	f04f 0c0a 	mov.w	ip, #10
 800dd94:	4621      	mov	r1, r4
 800dd96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd9a:	3b30      	subs	r3, #48	; 0x30
 800dd9c:	2b09      	cmp	r3, #9
 800dd9e:	d94d      	bls.n	800de3c <_svfiprintf_r+0x17c>
 800dda0:	b1b0      	cbz	r0, 800ddd0 <_svfiprintf_r+0x110>
 800dda2:	9207      	str	r2, [sp, #28]
 800dda4:	e014      	b.n	800ddd0 <_svfiprintf_r+0x110>
 800dda6:	eba0 0308 	sub.w	r3, r0, r8
 800ddaa:	fa09 f303 	lsl.w	r3, r9, r3
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	9304      	str	r3, [sp, #16]
 800ddb2:	46a2      	mov	sl, r4
 800ddb4:	e7d2      	b.n	800dd5c <_svfiprintf_r+0x9c>
 800ddb6:	9b03      	ldr	r3, [sp, #12]
 800ddb8:	1d19      	adds	r1, r3, #4
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	9103      	str	r1, [sp, #12]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	bfbb      	ittet	lt
 800ddc2:	425b      	neglt	r3, r3
 800ddc4:	f042 0202 	orrlt.w	r2, r2, #2
 800ddc8:	9307      	strge	r3, [sp, #28]
 800ddca:	9307      	strlt	r3, [sp, #28]
 800ddcc:	bfb8      	it	lt
 800ddce:	9204      	strlt	r2, [sp, #16]
 800ddd0:	7823      	ldrb	r3, [r4, #0]
 800ddd2:	2b2e      	cmp	r3, #46	; 0x2e
 800ddd4:	d10c      	bne.n	800ddf0 <_svfiprintf_r+0x130>
 800ddd6:	7863      	ldrb	r3, [r4, #1]
 800ddd8:	2b2a      	cmp	r3, #42	; 0x2a
 800ddda:	d134      	bne.n	800de46 <_svfiprintf_r+0x186>
 800dddc:	9b03      	ldr	r3, [sp, #12]
 800ddde:	1d1a      	adds	r2, r3, #4
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	9203      	str	r2, [sp, #12]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	bfb8      	it	lt
 800dde8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddec:	3402      	adds	r4, #2
 800ddee:	9305      	str	r3, [sp, #20]
 800ddf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800deb8 <_svfiprintf_r+0x1f8>
 800ddf4:	7821      	ldrb	r1, [r4, #0]
 800ddf6:	2203      	movs	r2, #3
 800ddf8:	4650      	mov	r0, sl
 800ddfa:	f7f2 fa09 	bl	8000210 <memchr>
 800ddfe:	b138      	cbz	r0, 800de10 <_svfiprintf_r+0x150>
 800de00:	9b04      	ldr	r3, [sp, #16]
 800de02:	eba0 000a 	sub.w	r0, r0, sl
 800de06:	2240      	movs	r2, #64	; 0x40
 800de08:	4082      	lsls	r2, r0
 800de0a:	4313      	orrs	r3, r2
 800de0c:	3401      	adds	r4, #1
 800de0e:	9304      	str	r3, [sp, #16]
 800de10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de14:	4825      	ldr	r0, [pc, #148]	; (800deac <_svfiprintf_r+0x1ec>)
 800de16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de1a:	2206      	movs	r2, #6
 800de1c:	f7f2 f9f8 	bl	8000210 <memchr>
 800de20:	2800      	cmp	r0, #0
 800de22:	d038      	beq.n	800de96 <_svfiprintf_r+0x1d6>
 800de24:	4b22      	ldr	r3, [pc, #136]	; (800deb0 <_svfiprintf_r+0x1f0>)
 800de26:	bb1b      	cbnz	r3, 800de70 <_svfiprintf_r+0x1b0>
 800de28:	9b03      	ldr	r3, [sp, #12]
 800de2a:	3307      	adds	r3, #7
 800de2c:	f023 0307 	bic.w	r3, r3, #7
 800de30:	3308      	adds	r3, #8
 800de32:	9303      	str	r3, [sp, #12]
 800de34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de36:	4433      	add	r3, r6
 800de38:	9309      	str	r3, [sp, #36]	; 0x24
 800de3a:	e768      	b.n	800dd0e <_svfiprintf_r+0x4e>
 800de3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800de40:	460c      	mov	r4, r1
 800de42:	2001      	movs	r0, #1
 800de44:	e7a6      	b.n	800dd94 <_svfiprintf_r+0xd4>
 800de46:	2300      	movs	r3, #0
 800de48:	3401      	adds	r4, #1
 800de4a:	9305      	str	r3, [sp, #20]
 800de4c:	4619      	mov	r1, r3
 800de4e:	f04f 0c0a 	mov.w	ip, #10
 800de52:	4620      	mov	r0, r4
 800de54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de58:	3a30      	subs	r2, #48	; 0x30
 800de5a:	2a09      	cmp	r2, #9
 800de5c:	d903      	bls.n	800de66 <_svfiprintf_r+0x1a6>
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d0c6      	beq.n	800ddf0 <_svfiprintf_r+0x130>
 800de62:	9105      	str	r1, [sp, #20]
 800de64:	e7c4      	b.n	800ddf0 <_svfiprintf_r+0x130>
 800de66:	fb0c 2101 	mla	r1, ip, r1, r2
 800de6a:	4604      	mov	r4, r0
 800de6c:	2301      	movs	r3, #1
 800de6e:	e7f0      	b.n	800de52 <_svfiprintf_r+0x192>
 800de70:	ab03      	add	r3, sp, #12
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	462a      	mov	r2, r5
 800de76:	4b0f      	ldr	r3, [pc, #60]	; (800deb4 <_svfiprintf_r+0x1f4>)
 800de78:	a904      	add	r1, sp, #16
 800de7a:	4638      	mov	r0, r7
 800de7c:	f7fd fd92 	bl	800b9a4 <_printf_float>
 800de80:	1c42      	adds	r2, r0, #1
 800de82:	4606      	mov	r6, r0
 800de84:	d1d6      	bne.n	800de34 <_svfiprintf_r+0x174>
 800de86:	89ab      	ldrh	r3, [r5, #12]
 800de88:	065b      	lsls	r3, r3, #25
 800de8a:	f53f af2d 	bmi.w	800dce8 <_svfiprintf_r+0x28>
 800de8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de90:	b01d      	add	sp, #116	; 0x74
 800de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de96:	ab03      	add	r3, sp, #12
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	462a      	mov	r2, r5
 800de9c:	4b05      	ldr	r3, [pc, #20]	; (800deb4 <_svfiprintf_r+0x1f4>)
 800de9e:	a904      	add	r1, sp, #16
 800dea0:	4638      	mov	r0, r7
 800dea2:	f7fe f823 	bl	800beec <_printf_i>
 800dea6:	e7eb      	b.n	800de80 <_svfiprintf_r+0x1c0>
 800dea8:	08011f74 	.word	0x08011f74
 800deac:	08011f7e 	.word	0x08011f7e
 800deb0:	0800b9a5 	.word	0x0800b9a5
 800deb4:	0800dc0d 	.word	0x0800dc0d
 800deb8:	08011f7a 	.word	0x08011f7a

0800debc <__sfputc_r>:
 800debc:	6893      	ldr	r3, [r2, #8]
 800debe:	3b01      	subs	r3, #1
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	b410      	push	{r4}
 800dec4:	6093      	str	r3, [r2, #8]
 800dec6:	da08      	bge.n	800deda <__sfputc_r+0x1e>
 800dec8:	6994      	ldr	r4, [r2, #24]
 800deca:	42a3      	cmp	r3, r4
 800decc:	db01      	blt.n	800ded2 <__sfputc_r+0x16>
 800dece:	290a      	cmp	r1, #10
 800ded0:	d103      	bne.n	800deda <__sfputc_r+0x1e>
 800ded2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ded6:	f7fe ba50 	b.w	800c37a <__swbuf_r>
 800deda:	6813      	ldr	r3, [r2, #0]
 800dedc:	1c58      	adds	r0, r3, #1
 800dede:	6010      	str	r0, [r2, #0]
 800dee0:	7019      	strb	r1, [r3, #0]
 800dee2:	4608      	mov	r0, r1
 800dee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dee8:	4770      	bx	lr

0800deea <__sfputs_r>:
 800deea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deec:	4606      	mov	r6, r0
 800deee:	460f      	mov	r7, r1
 800def0:	4614      	mov	r4, r2
 800def2:	18d5      	adds	r5, r2, r3
 800def4:	42ac      	cmp	r4, r5
 800def6:	d101      	bne.n	800defc <__sfputs_r+0x12>
 800def8:	2000      	movs	r0, #0
 800defa:	e007      	b.n	800df0c <__sfputs_r+0x22>
 800defc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df00:	463a      	mov	r2, r7
 800df02:	4630      	mov	r0, r6
 800df04:	f7ff ffda 	bl	800debc <__sfputc_r>
 800df08:	1c43      	adds	r3, r0, #1
 800df0a:	d1f3      	bne.n	800def4 <__sfputs_r+0xa>
 800df0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df10 <_vfiprintf_r>:
 800df10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df14:	460d      	mov	r5, r1
 800df16:	b09d      	sub	sp, #116	; 0x74
 800df18:	4614      	mov	r4, r2
 800df1a:	4698      	mov	r8, r3
 800df1c:	4606      	mov	r6, r0
 800df1e:	b118      	cbz	r0, 800df28 <_vfiprintf_r+0x18>
 800df20:	6a03      	ldr	r3, [r0, #32]
 800df22:	b90b      	cbnz	r3, 800df28 <_vfiprintf_r+0x18>
 800df24:	f7fe f97e 	bl	800c224 <__sinit>
 800df28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df2a:	07d9      	lsls	r1, r3, #31
 800df2c:	d405      	bmi.n	800df3a <_vfiprintf_r+0x2a>
 800df2e:	89ab      	ldrh	r3, [r5, #12]
 800df30:	059a      	lsls	r2, r3, #22
 800df32:	d402      	bmi.n	800df3a <_vfiprintf_r+0x2a>
 800df34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df36:	f7fe fbb1 	bl	800c69c <__retarget_lock_acquire_recursive>
 800df3a:	89ab      	ldrh	r3, [r5, #12]
 800df3c:	071b      	lsls	r3, r3, #28
 800df3e:	d501      	bpl.n	800df44 <_vfiprintf_r+0x34>
 800df40:	692b      	ldr	r3, [r5, #16]
 800df42:	b99b      	cbnz	r3, 800df6c <_vfiprintf_r+0x5c>
 800df44:	4629      	mov	r1, r5
 800df46:	4630      	mov	r0, r6
 800df48:	f7fe fa54 	bl	800c3f4 <__swsetup_r>
 800df4c:	b170      	cbz	r0, 800df6c <_vfiprintf_r+0x5c>
 800df4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df50:	07dc      	lsls	r4, r3, #31
 800df52:	d504      	bpl.n	800df5e <_vfiprintf_r+0x4e>
 800df54:	f04f 30ff 	mov.w	r0, #4294967295
 800df58:	b01d      	add	sp, #116	; 0x74
 800df5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5e:	89ab      	ldrh	r3, [r5, #12]
 800df60:	0598      	lsls	r0, r3, #22
 800df62:	d4f7      	bmi.n	800df54 <_vfiprintf_r+0x44>
 800df64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df66:	f7fe fb9a 	bl	800c69e <__retarget_lock_release_recursive>
 800df6a:	e7f3      	b.n	800df54 <_vfiprintf_r+0x44>
 800df6c:	2300      	movs	r3, #0
 800df6e:	9309      	str	r3, [sp, #36]	; 0x24
 800df70:	2320      	movs	r3, #32
 800df72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df76:	f8cd 800c 	str.w	r8, [sp, #12]
 800df7a:	2330      	movs	r3, #48	; 0x30
 800df7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e130 <_vfiprintf_r+0x220>
 800df80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df84:	f04f 0901 	mov.w	r9, #1
 800df88:	4623      	mov	r3, r4
 800df8a:	469a      	mov	sl, r3
 800df8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df90:	b10a      	cbz	r2, 800df96 <_vfiprintf_r+0x86>
 800df92:	2a25      	cmp	r2, #37	; 0x25
 800df94:	d1f9      	bne.n	800df8a <_vfiprintf_r+0x7a>
 800df96:	ebba 0b04 	subs.w	fp, sl, r4
 800df9a:	d00b      	beq.n	800dfb4 <_vfiprintf_r+0xa4>
 800df9c:	465b      	mov	r3, fp
 800df9e:	4622      	mov	r2, r4
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	f7ff ffa1 	bl	800deea <__sfputs_r>
 800dfa8:	3001      	adds	r0, #1
 800dfaa:	f000 80a9 	beq.w	800e100 <_vfiprintf_r+0x1f0>
 800dfae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfb0:	445a      	add	r2, fp
 800dfb2:	9209      	str	r2, [sp, #36]	; 0x24
 800dfb4:	f89a 3000 	ldrb.w	r3, [sl]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f000 80a1 	beq.w	800e100 <_vfiprintf_r+0x1f0>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfc8:	f10a 0a01 	add.w	sl, sl, #1
 800dfcc:	9304      	str	r3, [sp, #16]
 800dfce:	9307      	str	r3, [sp, #28]
 800dfd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfd4:	931a      	str	r3, [sp, #104]	; 0x68
 800dfd6:	4654      	mov	r4, sl
 800dfd8:	2205      	movs	r2, #5
 800dfda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfde:	4854      	ldr	r0, [pc, #336]	; (800e130 <_vfiprintf_r+0x220>)
 800dfe0:	f7f2 f916 	bl	8000210 <memchr>
 800dfe4:	9a04      	ldr	r2, [sp, #16]
 800dfe6:	b9d8      	cbnz	r0, 800e020 <_vfiprintf_r+0x110>
 800dfe8:	06d1      	lsls	r1, r2, #27
 800dfea:	bf44      	itt	mi
 800dfec:	2320      	movmi	r3, #32
 800dfee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dff2:	0713      	lsls	r3, r2, #28
 800dff4:	bf44      	itt	mi
 800dff6:	232b      	movmi	r3, #43	; 0x2b
 800dff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dffc:	f89a 3000 	ldrb.w	r3, [sl]
 800e000:	2b2a      	cmp	r3, #42	; 0x2a
 800e002:	d015      	beq.n	800e030 <_vfiprintf_r+0x120>
 800e004:	9a07      	ldr	r2, [sp, #28]
 800e006:	4654      	mov	r4, sl
 800e008:	2000      	movs	r0, #0
 800e00a:	f04f 0c0a 	mov.w	ip, #10
 800e00e:	4621      	mov	r1, r4
 800e010:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e014:	3b30      	subs	r3, #48	; 0x30
 800e016:	2b09      	cmp	r3, #9
 800e018:	d94d      	bls.n	800e0b6 <_vfiprintf_r+0x1a6>
 800e01a:	b1b0      	cbz	r0, 800e04a <_vfiprintf_r+0x13a>
 800e01c:	9207      	str	r2, [sp, #28]
 800e01e:	e014      	b.n	800e04a <_vfiprintf_r+0x13a>
 800e020:	eba0 0308 	sub.w	r3, r0, r8
 800e024:	fa09 f303 	lsl.w	r3, r9, r3
 800e028:	4313      	orrs	r3, r2
 800e02a:	9304      	str	r3, [sp, #16]
 800e02c:	46a2      	mov	sl, r4
 800e02e:	e7d2      	b.n	800dfd6 <_vfiprintf_r+0xc6>
 800e030:	9b03      	ldr	r3, [sp, #12]
 800e032:	1d19      	adds	r1, r3, #4
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	9103      	str	r1, [sp, #12]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	bfbb      	ittet	lt
 800e03c:	425b      	neglt	r3, r3
 800e03e:	f042 0202 	orrlt.w	r2, r2, #2
 800e042:	9307      	strge	r3, [sp, #28]
 800e044:	9307      	strlt	r3, [sp, #28]
 800e046:	bfb8      	it	lt
 800e048:	9204      	strlt	r2, [sp, #16]
 800e04a:	7823      	ldrb	r3, [r4, #0]
 800e04c:	2b2e      	cmp	r3, #46	; 0x2e
 800e04e:	d10c      	bne.n	800e06a <_vfiprintf_r+0x15a>
 800e050:	7863      	ldrb	r3, [r4, #1]
 800e052:	2b2a      	cmp	r3, #42	; 0x2a
 800e054:	d134      	bne.n	800e0c0 <_vfiprintf_r+0x1b0>
 800e056:	9b03      	ldr	r3, [sp, #12]
 800e058:	1d1a      	adds	r2, r3, #4
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	9203      	str	r2, [sp, #12]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	bfb8      	it	lt
 800e062:	f04f 33ff 	movlt.w	r3, #4294967295
 800e066:	3402      	adds	r4, #2
 800e068:	9305      	str	r3, [sp, #20]
 800e06a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e140 <_vfiprintf_r+0x230>
 800e06e:	7821      	ldrb	r1, [r4, #0]
 800e070:	2203      	movs	r2, #3
 800e072:	4650      	mov	r0, sl
 800e074:	f7f2 f8cc 	bl	8000210 <memchr>
 800e078:	b138      	cbz	r0, 800e08a <_vfiprintf_r+0x17a>
 800e07a:	9b04      	ldr	r3, [sp, #16]
 800e07c:	eba0 000a 	sub.w	r0, r0, sl
 800e080:	2240      	movs	r2, #64	; 0x40
 800e082:	4082      	lsls	r2, r0
 800e084:	4313      	orrs	r3, r2
 800e086:	3401      	adds	r4, #1
 800e088:	9304      	str	r3, [sp, #16]
 800e08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e08e:	4829      	ldr	r0, [pc, #164]	; (800e134 <_vfiprintf_r+0x224>)
 800e090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e094:	2206      	movs	r2, #6
 800e096:	f7f2 f8bb 	bl	8000210 <memchr>
 800e09a:	2800      	cmp	r0, #0
 800e09c:	d03f      	beq.n	800e11e <_vfiprintf_r+0x20e>
 800e09e:	4b26      	ldr	r3, [pc, #152]	; (800e138 <_vfiprintf_r+0x228>)
 800e0a0:	bb1b      	cbnz	r3, 800e0ea <_vfiprintf_r+0x1da>
 800e0a2:	9b03      	ldr	r3, [sp, #12]
 800e0a4:	3307      	adds	r3, #7
 800e0a6:	f023 0307 	bic.w	r3, r3, #7
 800e0aa:	3308      	adds	r3, #8
 800e0ac:	9303      	str	r3, [sp, #12]
 800e0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0b0:	443b      	add	r3, r7
 800e0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b4:	e768      	b.n	800df88 <_vfiprintf_r+0x78>
 800e0b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	2001      	movs	r0, #1
 800e0be:	e7a6      	b.n	800e00e <_vfiprintf_r+0xfe>
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	3401      	adds	r4, #1
 800e0c4:	9305      	str	r3, [sp, #20]
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	f04f 0c0a 	mov.w	ip, #10
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0d2:	3a30      	subs	r2, #48	; 0x30
 800e0d4:	2a09      	cmp	r2, #9
 800e0d6:	d903      	bls.n	800e0e0 <_vfiprintf_r+0x1d0>
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d0c6      	beq.n	800e06a <_vfiprintf_r+0x15a>
 800e0dc:	9105      	str	r1, [sp, #20]
 800e0de:	e7c4      	b.n	800e06a <_vfiprintf_r+0x15a>
 800e0e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0e4:	4604      	mov	r4, r0
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e7f0      	b.n	800e0cc <_vfiprintf_r+0x1bc>
 800e0ea:	ab03      	add	r3, sp, #12
 800e0ec:	9300      	str	r3, [sp, #0]
 800e0ee:	462a      	mov	r2, r5
 800e0f0:	4b12      	ldr	r3, [pc, #72]	; (800e13c <_vfiprintf_r+0x22c>)
 800e0f2:	a904      	add	r1, sp, #16
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	f7fd fc55 	bl	800b9a4 <_printf_float>
 800e0fa:	4607      	mov	r7, r0
 800e0fc:	1c78      	adds	r0, r7, #1
 800e0fe:	d1d6      	bne.n	800e0ae <_vfiprintf_r+0x19e>
 800e100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e102:	07d9      	lsls	r1, r3, #31
 800e104:	d405      	bmi.n	800e112 <_vfiprintf_r+0x202>
 800e106:	89ab      	ldrh	r3, [r5, #12]
 800e108:	059a      	lsls	r2, r3, #22
 800e10a:	d402      	bmi.n	800e112 <_vfiprintf_r+0x202>
 800e10c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e10e:	f7fe fac6 	bl	800c69e <__retarget_lock_release_recursive>
 800e112:	89ab      	ldrh	r3, [r5, #12]
 800e114:	065b      	lsls	r3, r3, #25
 800e116:	f53f af1d 	bmi.w	800df54 <_vfiprintf_r+0x44>
 800e11a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e11c:	e71c      	b.n	800df58 <_vfiprintf_r+0x48>
 800e11e:	ab03      	add	r3, sp, #12
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	462a      	mov	r2, r5
 800e124:	4b05      	ldr	r3, [pc, #20]	; (800e13c <_vfiprintf_r+0x22c>)
 800e126:	a904      	add	r1, sp, #16
 800e128:	4630      	mov	r0, r6
 800e12a:	f7fd fedf 	bl	800beec <_printf_i>
 800e12e:	e7e4      	b.n	800e0fa <_vfiprintf_r+0x1ea>
 800e130:	08011f74 	.word	0x08011f74
 800e134:	08011f7e 	.word	0x08011f7e
 800e138:	0800b9a5 	.word	0x0800b9a5
 800e13c:	0800deeb 	.word	0x0800deeb
 800e140:	08011f7a 	.word	0x08011f7a

0800e144 <__sflush_r>:
 800e144:	898a      	ldrh	r2, [r1, #12]
 800e146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e14a:	4605      	mov	r5, r0
 800e14c:	0710      	lsls	r0, r2, #28
 800e14e:	460c      	mov	r4, r1
 800e150:	d458      	bmi.n	800e204 <__sflush_r+0xc0>
 800e152:	684b      	ldr	r3, [r1, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	dc05      	bgt.n	800e164 <__sflush_r+0x20>
 800e158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	dc02      	bgt.n	800e164 <__sflush_r+0x20>
 800e15e:	2000      	movs	r0, #0
 800e160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e166:	2e00      	cmp	r6, #0
 800e168:	d0f9      	beq.n	800e15e <__sflush_r+0x1a>
 800e16a:	2300      	movs	r3, #0
 800e16c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e170:	682f      	ldr	r7, [r5, #0]
 800e172:	6a21      	ldr	r1, [r4, #32]
 800e174:	602b      	str	r3, [r5, #0]
 800e176:	d032      	beq.n	800e1de <__sflush_r+0x9a>
 800e178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e17a:	89a3      	ldrh	r3, [r4, #12]
 800e17c:	075a      	lsls	r2, r3, #29
 800e17e:	d505      	bpl.n	800e18c <__sflush_r+0x48>
 800e180:	6863      	ldr	r3, [r4, #4]
 800e182:	1ac0      	subs	r0, r0, r3
 800e184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e186:	b10b      	cbz	r3, 800e18c <__sflush_r+0x48>
 800e188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e18a:	1ac0      	subs	r0, r0, r3
 800e18c:	2300      	movs	r3, #0
 800e18e:	4602      	mov	r2, r0
 800e190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e192:	6a21      	ldr	r1, [r4, #32]
 800e194:	4628      	mov	r0, r5
 800e196:	47b0      	blx	r6
 800e198:	1c43      	adds	r3, r0, #1
 800e19a:	89a3      	ldrh	r3, [r4, #12]
 800e19c:	d106      	bne.n	800e1ac <__sflush_r+0x68>
 800e19e:	6829      	ldr	r1, [r5, #0]
 800e1a0:	291d      	cmp	r1, #29
 800e1a2:	d82b      	bhi.n	800e1fc <__sflush_r+0xb8>
 800e1a4:	4a29      	ldr	r2, [pc, #164]	; (800e24c <__sflush_r+0x108>)
 800e1a6:	410a      	asrs	r2, r1
 800e1a8:	07d6      	lsls	r6, r2, #31
 800e1aa:	d427      	bmi.n	800e1fc <__sflush_r+0xb8>
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	6062      	str	r2, [r4, #4]
 800e1b0:	04d9      	lsls	r1, r3, #19
 800e1b2:	6922      	ldr	r2, [r4, #16]
 800e1b4:	6022      	str	r2, [r4, #0]
 800e1b6:	d504      	bpl.n	800e1c2 <__sflush_r+0x7e>
 800e1b8:	1c42      	adds	r2, r0, #1
 800e1ba:	d101      	bne.n	800e1c0 <__sflush_r+0x7c>
 800e1bc:	682b      	ldr	r3, [r5, #0]
 800e1be:	b903      	cbnz	r3, 800e1c2 <__sflush_r+0x7e>
 800e1c0:	6560      	str	r0, [r4, #84]	; 0x54
 800e1c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1c4:	602f      	str	r7, [r5, #0]
 800e1c6:	2900      	cmp	r1, #0
 800e1c8:	d0c9      	beq.n	800e15e <__sflush_r+0x1a>
 800e1ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1ce:	4299      	cmp	r1, r3
 800e1d0:	d002      	beq.n	800e1d8 <__sflush_r+0x94>
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	f7ff f94a 	bl	800d46c <_free_r>
 800e1d8:	2000      	movs	r0, #0
 800e1da:	6360      	str	r0, [r4, #52]	; 0x34
 800e1dc:	e7c0      	b.n	800e160 <__sflush_r+0x1c>
 800e1de:	2301      	movs	r3, #1
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	47b0      	blx	r6
 800e1e4:	1c41      	adds	r1, r0, #1
 800e1e6:	d1c8      	bne.n	800e17a <__sflush_r+0x36>
 800e1e8:	682b      	ldr	r3, [r5, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d0c5      	beq.n	800e17a <__sflush_r+0x36>
 800e1ee:	2b1d      	cmp	r3, #29
 800e1f0:	d001      	beq.n	800e1f6 <__sflush_r+0xb2>
 800e1f2:	2b16      	cmp	r3, #22
 800e1f4:	d101      	bne.n	800e1fa <__sflush_r+0xb6>
 800e1f6:	602f      	str	r7, [r5, #0]
 800e1f8:	e7b1      	b.n	800e15e <__sflush_r+0x1a>
 800e1fa:	89a3      	ldrh	r3, [r4, #12]
 800e1fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e200:	81a3      	strh	r3, [r4, #12]
 800e202:	e7ad      	b.n	800e160 <__sflush_r+0x1c>
 800e204:	690f      	ldr	r7, [r1, #16]
 800e206:	2f00      	cmp	r7, #0
 800e208:	d0a9      	beq.n	800e15e <__sflush_r+0x1a>
 800e20a:	0793      	lsls	r3, r2, #30
 800e20c:	680e      	ldr	r6, [r1, #0]
 800e20e:	bf08      	it	eq
 800e210:	694b      	ldreq	r3, [r1, #20]
 800e212:	600f      	str	r7, [r1, #0]
 800e214:	bf18      	it	ne
 800e216:	2300      	movne	r3, #0
 800e218:	eba6 0807 	sub.w	r8, r6, r7
 800e21c:	608b      	str	r3, [r1, #8]
 800e21e:	f1b8 0f00 	cmp.w	r8, #0
 800e222:	dd9c      	ble.n	800e15e <__sflush_r+0x1a>
 800e224:	6a21      	ldr	r1, [r4, #32]
 800e226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e228:	4643      	mov	r3, r8
 800e22a:	463a      	mov	r2, r7
 800e22c:	4628      	mov	r0, r5
 800e22e:	47b0      	blx	r6
 800e230:	2800      	cmp	r0, #0
 800e232:	dc06      	bgt.n	800e242 <__sflush_r+0xfe>
 800e234:	89a3      	ldrh	r3, [r4, #12]
 800e236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e23a:	81a3      	strh	r3, [r4, #12]
 800e23c:	f04f 30ff 	mov.w	r0, #4294967295
 800e240:	e78e      	b.n	800e160 <__sflush_r+0x1c>
 800e242:	4407      	add	r7, r0
 800e244:	eba8 0800 	sub.w	r8, r8, r0
 800e248:	e7e9      	b.n	800e21e <__sflush_r+0xda>
 800e24a:	bf00      	nop
 800e24c:	dfbffffe 	.word	0xdfbffffe

0800e250 <_fflush_r>:
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	690b      	ldr	r3, [r1, #16]
 800e254:	4605      	mov	r5, r0
 800e256:	460c      	mov	r4, r1
 800e258:	b913      	cbnz	r3, 800e260 <_fflush_r+0x10>
 800e25a:	2500      	movs	r5, #0
 800e25c:	4628      	mov	r0, r5
 800e25e:	bd38      	pop	{r3, r4, r5, pc}
 800e260:	b118      	cbz	r0, 800e26a <_fflush_r+0x1a>
 800e262:	6a03      	ldr	r3, [r0, #32]
 800e264:	b90b      	cbnz	r3, 800e26a <_fflush_r+0x1a>
 800e266:	f7fd ffdd 	bl	800c224 <__sinit>
 800e26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d0f3      	beq.n	800e25a <_fflush_r+0xa>
 800e272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e274:	07d0      	lsls	r0, r2, #31
 800e276:	d404      	bmi.n	800e282 <_fflush_r+0x32>
 800e278:	0599      	lsls	r1, r3, #22
 800e27a:	d402      	bmi.n	800e282 <_fflush_r+0x32>
 800e27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e27e:	f7fe fa0d 	bl	800c69c <__retarget_lock_acquire_recursive>
 800e282:	4628      	mov	r0, r5
 800e284:	4621      	mov	r1, r4
 800e286:	f7ff ff5d 	bl	800e144 <__sflush_r>
 800e28a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e28c:	07da      	lsls	r2, r3, #31
 800e28e:	4605      	mov	r5, r0
 800e290:	d4e4      	bmi.n	800e25c <_fflush_r+0xc>
 800e292:	89a3      	ldrh	r3, [r4, #12]
 800e294:	059b      	lsls	r3, r3, #22
 800e296:	d4e1      	bmi.n	800e25c <_fflush_r+0xc>
 800e298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e29a:	f7fe fa00 	bl	800c69e <__retarget_lock_release_recursive>
 800e29e:	e7dd      	b.n	800e25c <_fflush_r+0xc>

0800e2a0 <__swhatbuf_r>:
 800e2a0:	b570      	push	{r4, r5, r6, lr}
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a8:	2900      	cmp	r1, #0
 800e2aa:	b096      	sub	sp, #88	; 0x58
 800e2ac:	4615      	mov	r5, r2
 800e2ae:	461e      	mov	r6, r3
 800e2b0:	da0d      	bge.n	800e2ce <__swhatbuf_r+0x2e>
 800e2b2:	89a3      	ldrh	r3, [r4, #12]
 800e2b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e2b8:	f04f 0100 	mov.w	r1, #0
 800e2bc:	bf0c      	ite	eq
 800e2be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e2c2:	2340      	movne	r3, #64	; 0x40
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	6031      	str	r1, [r6, #0]
 800e2c8:	602b      	str	r3, [r5, #0]
 800e2ca:	b016      	add	sp, #88	; 0x58
 800e2cc:	bd70      	pop	{r4, r5, r6, pc}
 800e2ce:	466a      	mov	r2, sp
 800e2d0:	f000 f848 	bl	800e364 <_fstat_r>
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	dbec      	blt.n	800e2b2 <__swhatbuf_r+0x12>
 800e2d8:	9901      	ldr	r1, [sp, #4]
 800e2da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e2de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e2e2:	4259      	negs	r1, r3
 800e2e4:	4159      	adcs	r1, r3
 800e2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2ea:	e7eb      	b.n	800e2c4 <__swhatbuf_r+0x24>

0800e2ec <__smakebuf_r>:
 800e2ec:	898b      	ldrh	r3, [r1, #12]
 800e2ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2f0:	079d      	lsls	r5, r3, #30
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	460c      	mov	r4, r1
 800e2f6:	d507      	bpl.n	800e308 <__smakebuf_r+0x1c>
 800e2f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2fc:	6023      	str	r3, [r4, #0]
 800e2fe:	6123      	str	r3, [r4, #16]
 800e300:	2301      	movs	r3, #1
 800e302:	6163      	str	r3, [r4, #20]
 800e304:	b002      	add	sp, #8
 800e306:	bd70      	pop	{r4, r5, r6, pc}
 800e308:	ab01      	add	r3, sp, #4
 800e30a:	466a      	mov	r2, sp
 800e30c:	f7ff ffc8 	bl	800e2a0 <__swhatbuf_r>
 800e310:	9900      	ldr	r1, [sp, #0]
 800e312:	4605      	mov	r5, r0
 800e314:	4630      	mov	r0, r6
 800e316:	f7fd f9e9 	bl	800b6ec <_malloc_r>
 800e31a:	b948      	cbnz	r0, 800e330 <__smakebuf_r+0x44>
 800e31c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e320:	059a      	lsls	r2, r3, #22
 800e322:	d4ef      	bmi.n	800e304 <__smakebuf_r+0x18>
 800e324:	f023 0303 	bic.w	r3, r3, #3
 800e328:	f043 0302 	orr.w	r3, r3, #2
 800e32c:	81a3      	strh	r3, [r4, #12]
 800e32e:	e7e3      	b.n	800e2f8 <__smakebuf_r+0xc>
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	6020      	str	r0, [r4, #0]
 800e334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e338:	81a3      	strh	r3, [r4, #12]
 800e33a:	9b00      	ldr	r3, [sp, #0]
 800e33c:	6163      	str	r3, [r4, #20]
 800e33e:	9b01      	ldr	r3, [sp, #4]
 800e340:	6120      	str	r0, [r4, #16]
 800e342:	b15b      	cbz	r3, 800e35c <__smakebuf_r+0x70>
 800e344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e348:	4630      	mov	r0, r6
 800e34a:	f000 f81d 	bl	800e388 <_isatty_r>
 800e34e:	b128      	cbz	r0, 800e35c <__smakebuf_r+0x70>
 800e350:	89a3      	ldrh	r3, [r4, #12]
 800e352:	f023 0303 	bic.w	r3, r3, #3
 800e356:	f043 0301 	orr.w	r3, r3, #1
 800e35a:	81a3      	strh	r3, [r4, #12]
 800e35c:	89a3      	ldrh	r3, [r4, #12]
 800e35e:	431d      	orrs	r5, r3
 800e360:	81a5      	strh	r5, [r4, #12]
 800e362:	e7cf      	b.n	800e304 <__smakebuf_r+0x18>

0800e364 <_fstat_r>:
 800e364:	b538      	push	{r3, r4, r5, lr}
 800e366:	4d07      	ldr	r5, [pc, #28]	; (800e384 <_fstat_r+0x20>)
 800e368:	2300      	movs	r3, #0
 800e36a:	4604      	mov	r4, r0
 800e36c:	4608      	mov	r0, r1
 800e36e:	4611      	mov	r1, r2
 800e370:	602b      	str	r3, [r5, #0]
 800e372:	f7f3 fd34 	bl	8001dde <_fstat>
 800e376:	1c43      	adds	r3, r0, #1
 800e378:	d102      	bne.n	800e380 <_fstat_r+0x1c>
 800e37a:	682b      	ldr	r3, [r5, #0]
 800e37c:	b103      	cbz	r3, 800e380 <_fstat_r+0x1c>
 800e37e:	6023      	str	r3, [r4, #0]
 800e380:	bd38      	pop	{r3, r4, r5, pc}
 800e382:	bf00      	nop
 800e384:	20001974 	.word	0x20001974

0800e388 <_isatty_r>:
 800e388:	b538      	push	{r3, r4, r5, lr}
 800e38a:	4d06      	ldr	r5, [pc, #24]	; (800e3a4 <_isatty_r+0x1c>)
 800e38c:	2300      	movs	r3, #0
 800e38e:	4604      	mov	r4, r0
 800e390:	4608      	mov	r0, r1
 800e392:	602b      	str	r3, [r5, #0]
 800e394:	f7f3 fd33 	bl	8001dfe <_isatty>
 800e398:	1c43      	adds	r3, r0, #1
 800e39a:	d102      	bne.n	800e3a2 <_isatty_r+0x1a>
 800e39c:	682b      	ldr	r3, [r5, #0]
 800e39e:	b103      	cbz	r3, 800e3a2 <_isatty_r+0x1a>
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	bd38      	pop	{r3, r4, r5, pc}
 800e3a4:	20001974 	.word	0x20001974

0800e3a8 <_calloc_r>:
 800e3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3aa:	fba1 2402 	umull	r2, r4, r1, r2
 800e3ae:	b94c      	cbnz	r4, 800e3c4 <_calloc_r+0x1c>
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	9201      	str	r2, [sp, #4]
 800e3b4:	f7fd f99a 	bl	800b6ec <_malloc_r>
 800e3b8:	9a01      	ldr	r2, [sp, #4]
 800e3ba:	4605      	mov	r5, r0
 800e3bc:	b930      	cbnz	r0, 800e3cc <_calloc_r+0x24>
 800e3be:	4628      	mov	r0, r5
 800e3c0:	b003      	add	sp, #12
 800e3c2:	bd30      	pop	{r4, r5, pc}
 800e3c4:	220c      	movs	r2, #12
 800e3c6:	6002      	str	r2, [r0, #0]
 800e3c8:	2500      	movs	r5, #0
 800e3ca:	e7f8      	b.n	800e3be <_calloc_r+0x16>
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	f7fe f883 	bl	800c4d8 <memset>
 800e3d2:	e7f4      	b.n	800e3be <_calloc_r+0x16>

0800e3d4 <__ascii_mbtowc>:
 800e3d4:	b082      	sub	sp, #8
 800e3d6:	b901      	cbnz	r1, 800e3da <__ascii_mbtowc+0x6>
 800e3d8:	a901      	add	r1, sp, #4
 800e3da:	b142      	cbz	r2, 800e3ee <__ascii_mbtowc+0x1a>
 800e3dc:	b14b      	cbz	r3, 800e3f2 <__ascii_mbtowc+0x1e>
 800e3de:	7813      	ldrb	r3, [r2, #0]
 800e3e0:	600b      	str	r3, [r1, #0]
 800e3e2:	7812      	ldrb	r2, [r2, #0]
 800e3e4:	1e10      	subs	r0, r2, #0
 800e3e6:	bf18      	it	ne
 800e3e8:	2001      	movne	r0, #1
 800e3ea:	b002      	add	sp, #8
 800e3ec:	4770      	bx	lr
 800e3ee:	4610      	mov	r0, r2
 800e3f0:	e7fb      	b.n	800e3ea <__ascii_mbtowc+0x16>
 800e3f2:	f06f 0001 	mvn.w	r0, #1
 800e3f6:	e7f8      	b.n	800e3ea <__ascii_mbtowc+0x16>

0800e3f8 <__ascii_wctomb>:
 800e3f8:	b149      	cbz	r1, 800e40e <__ascii_wctomb+0x16>
 800e3fa:	2aff      	cmp	r2, #255	; 0xff
 800e3fc:	bf85      	ittet	hi
 800e3fe:	238a      	movhi	r3, #138	; 0x8a
 800e400:	6003      	strhi	r3, [r0, #0]
 800e402:	700a      	strbls	r2, [r1, #0]
 800e404:	f04f 30ff 	movhi.w	r0, #4294967295
 800e408:	bf98      	it	ls
 800e40a:	2001      	movls	r0, #1
 800e40c:	4770      	bx	lr
 800e40e:	4608      	mov	r0, r1
 800e410:	4770      	bx	lr
	...

0800e414 <_init>:
 800e414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e416:	bf00      	nop
 800e418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e41a:	bc08      	pop	{r3}
 800e41c:	469e      	mov	lr, r3
 800e41e:	4770      	bx	lr

0800e420 <_fini>:
 800e420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e422:	bf00      	nop
 800e424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e426:	bc08      	pop	{r3}
 800e428:	469e      	mov	lr, r3
 800e42a:	4770      	bx	lr
